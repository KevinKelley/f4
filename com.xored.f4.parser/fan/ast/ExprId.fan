**
** ExprId uniquely identifies the type of expr
**
enum class ExprId
{
  localDef,
  closure,
  call,
  dsl,
  staticTarget,
  index,
  paren,
  storage,
  exprList,
  throwExpr,
  
//////////////////////////////////////////////////////////////////////////
// Literals
//////////////////////////////////////////////////////////////////////////
  
  nullLiteral,
  boolLiteral,
  intLiteral,
  floatLiteral,
  decimalLiteral,
  strLiteral,
  durationLiteral,
  uriLiteral,
  dslLiteral,
  
  typeLiteral,
  slotLiteral,
  rangeLiteral,
  listLiteral,
  mapLiteral,
  noneLiteral,
  
//////////////////////////////////////////////////////////////////////////
// References
//////////////////////////////////////////////////////////////////////////

  unresolvedRef,
  podRef,
  typeRef,
  fieldRef,
  methodRef,
  methodVarRef,
  thisRef,
  superRef,
  itRef,
  
//////////////////////////////////////////////////////////////////////////
// Invocation
//////////////////////////////////////////////////////////////////////////
 
  staticInvoke,
  staticSafeInvoke,
  dynamicInvoke,
  dynamicSafeInvoke,
  
//////////////////////////////////////////////////////////////////////////
// Type check
//////////////////////////////////////////////////////////////////////////
 
  asExpr,
  isExpr,
  isnotExpr,
  coerce,
  
//////////////////////////////////////////////////////////////////////////
// Ternary
//////////////////////////////////////////////////////////////////////////
  
  ternary,
  
//////////////////////////////////////////////////////////////////////////
// Assign
//////////////////////////////////////////////////////////////////////////

  assign,
  assignPlus,
  assignMinus,
  assignMult,
  assignDiv,
  assignMod,
  
//////////////////////////////////////////////////////////////////////////
// BinaryExpr
//////////////////////////////////////////////////////////////////////////
  
  or,
  and,
  eq,
  notEq,
  same,
  notSame,
  lt,
  le,
  gt,
  ge,
  cmp,
  elvis,
  plus,
  minus,
  mult,
  div,
  mod,
  add,

//////////////////////////////////////////////////////////////////////////
// UnaryExpr
//////////////////////////////////////////////////////////////////////////
  
  unaryPlus,
  unaryMinus,
  inc,
  dec,
  postfixInc,
  postfixDec,
  not
}

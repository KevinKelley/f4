// $ANTLR 3.0.1 C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g 2009-08-12 20:37:56

package com.xored.fanide.internal.core.parser;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.dltk.ast.references.*;
import com.xored.fanide.ast.*;
import com.xored.fanide.ast.declarations.*;
import com.xored.fanide.ast.typesystem.*;
import com.xored.fanide.ast.expressions.*;
import com.xored.fanide.ast.references.*;
import com.xored.fanide.ast.statements.*;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
public class Fan_v1_0_Parser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Abstract", "Native", "Once", "Override", "Static", "Virtual", "Const", "Final", "ReadOnly", "Using", "As", "Class", "Enum", "Mixin", "Public", "Protected", "Private", "Internal", "New", "This", "Super", "It", "Null", "Break", "Continue", "For", "If", "Else", "Return", "Throw", "While", "Try", "Catch", "Finally", "Switch", "Case", "Default", "False", "True", "RangeExclOld", "RangeExcl", "Range", "Dot", "HexDigit", "UnicodeEscape", "EscapeSequence", "Digits", "Postfix", "Exponent", "IDSTART", "IDCHAR", "AtId", "Id", "Number", "String", "Uri", "Dsl", "LB", "RB", "LP", "RP", "LC", "RC", "Comma", "DoubleColon", "Define", "Colon", "Semi", "QuArrow", "Arrow", "Assign", "MulAss", "DivAss", "ModAss", "AddAss", "SubAss", "LShiftAss", "RShiftAss", "BAndAss", "BNotAss", "PipeAss", "QuDot", "Elvis", "Qu", "Or", "And", "SEq", "NSEq", "Eq", "NEq", "LShift", "RShift", "LEG", "LE", "GE", "LT", "GT", "BNot", "Pipe", "BAnd", "Incr", "Decr", "Add", "Sub", "Mul", "Div", "Mod", "Not", "Inv", "DslStart", "DslEnd", "Pound", "LF", "CR", "LineTerminator", "EOL", "TAB", "VT", "FF", "SP", "NBSP", "WS", "DocComment", "Comment", "LineComment", "'$'", "'isnot'", "'is'"
    };
    public static final int VT=121;
    public static final int ReadOnly=12;
    public static final int Switch=38;
    public static final int Inv=112;
    public static final int LT=99;
    public static final int Pipe=102;
    public static final int NSEq=91;
    public static final int Static=8;
    public static final int BNotAss=83;
    public static final int NEq=93;
    public static final int IDCHAR=54;
    public static final int LP=63;
    public static final int BAndAss=82;
    public static final int Mul=108;
    public static final int Uri=59;
    public static final int RangeExcl=44;
    public static final int EOF=-1;
    public static final int Decr=105;
    public static final int RangeExclOld=43;
    public static final int Finally=37;
    public static final int Default=40;
    public static final int EOL=119;
    public static final int QuArrow=72;
    public static final int Comment=127;
    public static final int Digits=50;
    public static final int QuDot=85;
    public static final int Class=15;
    public static final int AtId=55;
    public static final int Native=5;
    public static final int Null=26;
    public static final int Mod=110;
    public static final int GE=98;
    public static final int Incr=104;
    public static final int This=23;
    public static final int Dsl=60;
    public static final int Eq=92;
    public static final int DivAss=76;
    public static final int Colon=70;
    public static final int Const=10;
    public static final int FF=122;
    public static final int Range=45;
    public static final int RShiftAss=81;
    public static final int WS=125;
    public static final int Semi=71;
    public static final int LShiftAss=80;
    public static final int Break=27;
    public static final int DslStart=113;
    public static final int PipeAss=84;
    public static final int GT=100;
    public static final int DslEnd=114;
    public static final int Else=31;
    public static final int EscapeSequence=49;
    public static final int Private=20;
    public static final int Abstract=4;
    public static final int Elvis=86;
    public static final int Try=35;
    public static final int RC=66;
    public static final int RB=62;
    public static final int RP=64;
    public static final int BNot=101;
    public static final int False=41;
    public static final int LineComment=128;
    public static final int Pound=115;
    public static final int Virtual=9;
    public static final int Final=11;
    public static final int Exponent=52;
    public static final int While=34;
    public static final int Enum=16;
    public static final int Case=39;
    public static final int Add=106;
    public static final int Internal=21;
    public static final int HexDigit=47;
    public static final int Define=69;
    public static final int Assign=74;
    public static final int Number=57;
    public static final int DoubleColon=68;
    public static final int String=58;
    public static final int Or=88;
    public static final int True=42;
    public static final int Return=32;
    public static final int Id=56;
    public static final int If=30;
    public static final int Postfix=51;
    public static final int And=89;
    public static final int Div=109;
    public static final int Continue=28;
    public static final int As=14;
    public static final int Arrow=73;
    public static final int Catch=36;
    public static final int Protected=19;
    public static final int MulAss=75;
    public static final int It=25;
    public static final int Super=24;
    public static final int Throw=33;
    public static final int SEq=90;
    public static final int TAB=120;
    public static final int RShift=95;
    public static final int Once=6;
    public static final int Mixin=17;
    public static final int SubAss=79;
    public static final int LShift=94;
    public static final int For=29;
    public static final int Sub=107;
    public static final int Public=18;
    public static final int LEG=96;
    public static final int New=22;
    public static final int NBSP=124;
    public static final int UnicodeEscape=48;
    public static final int SP=123;
    public static final int LineTerminator=118;
    public static final int Not=111;
    public static final int Dot=46;
    public static final int IDSTART=53;
    public static final int LC=65;
    public static final int LB=61;
    public static final int Qu=87;
    public static final int DocComment=126;
    public static final int Override=7;
    public static final int Using=13;
    public static final int AddAss=78;
    public static final int CR=117;
    public static final int ModAss=77;
    public static final int Comma=67;
    public static final int LE=97;
    public static final int LF=116;
    public static final int BAnd=103;

        public Fan_v1_0_Parser(TokenStream input) {
            super(input);
            ruleMemo = new HashMap[177+1];
         }
        

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g"; }


    Object curSlot = null;
    TypeDeclaration curType = null;

    public FanErrorReporter reporter;
      
    public ModuleDeclaration module;
      
    public int length;

    public ASTFactory factory;
    public TokenConverter converter;

    public SimpleReference convert(Token token) {
      if (token == null) return new SimpleReference(0,0,"");
      int start = converter.convert(token.getLine(), token.getCharPositionInLine());
      String text = token.getText();
      SimpleReference word = new SimpleReference(start,
          start + text.length(), text);
      return word;
    }
        private int startPos() {        
            Token token = getTokenStream().LT(1);
            int offset = token.getCharPositionInLine();
            int line = token.getLine();
            int pos = converter.convert(line, offset);
            return pos;
          }
        private int endPos() {    
          Token token = getTokenStream().LT(-1);
          int offset = token.getCharPositionInLine();
          int line = token.getLine();
          int pos = converter.convert(line, offset);
          int len = 0;
          String text = token.getText();
          if (text != null) {
            len = text.length();
          }
          return pos+len;
        }
    public void append(SimpleReference r1, SimpleReference r2) {
      if (r1==null || r2 ==null) return; 
      if (r1.sourceEnd() <= r2.sourceStart()) {
        r1.setEnd(r2.sourceEnd());
      } else if (r2.sourceEnd() < r1.sourceStart()) {
        r1.setStart(r2.sourceStart());
      } else {
        throw new IllegalArgumentException();
      }
      r1.setName(converter.get(r1.sourceStart(), r1.sourceEnd()));
    }
    public void emitErrorMessage(String msg) {
      if( reporter != null ) {
        reporter.reportMessage(msg);
      }
    }
    public void reportError(RecognitionException e) {
        if ( errorRecovery ) {
          return;
        }
        errorRecovery = true;
      if( reporter != null ) {
        reporter.reportError(e);
      }
    }
    private boolean lookupNL()
            {
              int index=input.index();
        int start=input.mark();
        
        if (index >= input.size()) {
          return true;
        }
        if(index < input.size())
        {
          // Always allowing comma as end of line might be a bit too "loose"
          // it's neeed for itBlocks Add feature
          // maybe i shoul match only when in an itBlock ?
          if(input.get(index).getType() == Comma)
            return true;
          // if next token is a BRACKET_R, that counts as a newline
          if(input.get(index).getType() == RC)
            return true;
        }
        Token token;
        boolean result=false;
        while (index > 0)
        {
          // look back in the hidden channel until we find a linebreak
          index--;
          token = input.get(index);
          if (token.getType() == EOF) {
            result=true;
            break;
          }
          if (token.getChannel() != Token.HIDDEN_CHANNEL)
          {
            /* We are out of the hidden channel, in other word we found a "real" item,
            which means we didn't find a linebreak, so we are done (false)
            */
            break;
          }
          if (token.getType() == EOL)
          {
            // found our LineBreak (true)
            result=true;
            break;
          }
        }
        if(index==0)
          result=true;
        input.rewind(start);
        return result;
    }
    private boolean noWhitespaceBefore()
    {
        int index=input.index();
        while (index > 0)
        {
          Token token = input.get(--index);
          if (token.getChannel() == Token.DEFAULT_CHANNEL) {
            break;
          } else if (token.getType() == WS) {
            return false;
          }    
        }
        return true;
    }
    private boolean noNewLineBefore()
    {
        int index=input.index();
        while (index > 0)
        {
          Token token = input.get(--index);
          if (token.getChannel() == Token.DEFAULT_CHANNEL) {
            break;
          } else if (token.getType() == EOL) {
            return false;
          }    
        }
        return true;
    }
    protected void handleRecognitionException(RecognitionException re) throws RuntimeException {
      if( reporter != null ) {
        reporter.reportError(re);
      }
      recover(input,re);
    }
    protected void handleThrowable(Throwable th) throws RuntimeException {
      if( reporter != null ) {
        reporter.reportThrowable(th);
      }
    }



    // $ANTLR start compilationUnit
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:442:1: compilationUnit : ( intro )? (u= using )* (d= typeDef )* EOF ;
    public final void compilationUnit() throws RecognitionException {
        UsingStmt u = null;

        AbstractFanTypeDeclaration d = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:442:16: ( ( intro )? (u= using )* (d= typeDef )* EOF )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:443:3: ( intro )? (u= using )* (d= typeDef )* EOF
            {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:443:3: ( intro )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==Pound) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:443:3: intro
                    {
                    pushFollow(FOLLOW_intro_in_compilationUnit1879);
                    intro();
                    _fsp--;
                    if (failed) return ;

                    }
                    break;

            }

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:444:3: (u= using )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==Using) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:444:4: u= using
            	    {
            	    pushFollow(FOLLOW_using_in_compilationUnit1890);
            	    u=using();
            	    _fsp--;
            	    if (failed) return ;
            	    if ( backtracking==0 ) {
            	      if (module!=null && u!= null) {module.addStatement(u);}
            	    }

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:445:3: (d= typeDef )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( ((LA3_0>=Abstract && LA3_0<=ReadOnly)||(LA3_0>=Class && LA3_0<=New)||LA3_0==AtId) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:445:4: d= typeDef
            	    {
            	    pushFollow(FOLLOW_typeDef_in_compilationUnit1904);
            	    d=typeDef();
            	    _fsp--;
            	    if (failed) return ;
            	    if ( backtracking==0 ) {
            	      if (module!=null && d!= null) {module.addStatement(d);}
            	    }

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            match(input,EOF,FOLLOW_EOF_in_compilationUnit1913); if (failed) return ;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end compilationUnit


    // $ANTLR start facets
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:449:1: facets returns [List<FanFacetDeclaration> list = new ArrayList<FanFacetDeclaration>()] : ( ( AtId )=>f= facet )* ;
    public final List<FanFacetDeclaration> facets() throws RecognitionException {
        List<FanFacetDeclaration> list =  new ArrayList<FanFacetDeclaration>();

        FanFacetDeclaration f = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:450:3: ( ( ( AtId )=>f= facet )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:451:3: ( ( AtId )=>f= facet )*
            {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:451:3: ( ( AtId )=>f= facet )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==AtId) && (synpred1())) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:451:4: ( AtId )=>f= facet
            	    {
            	    pushFollow(FOLLOW_facet_in_facets1941);
            	    f=facet();
            	    _fsp--;
            	    if (failed) return list;
            	    if ( backtracking==0 ) {
            	       if (f != null) list.add(f);
            	    }

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return list;
    }
    // $ANTLR end facets


    // $ANTLR start facet
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:454:1: facet returns [FanFacetDeclaration facet] : key= AtId ( Assign value= expr )? ;
    public final FanFacetDeclaration facet() throws RecognitionException {
        FanFacetDeclaration facet = null;

        Token key=null;
        Expression value = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:455:3: (key= AtId ( Assign value= expr )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:456:3: key= AtId ( Assign value= expr )?
            {
            key=(Token)input.LT(1);
            match(input,AtId,FOLLOW_AtId_in_facet1965); if (failed) return facet;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:456:12: ( Assign value= expr )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==Assign) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:456:13: Assign value= expr
                    {
                    match(input,Assign,FOLLOW_Assign_in_facet1968); if (failed) return facet;
                    pushFollow(FOLLOW_expr_in_facet1972);
                    value=expr();
                    _fsp--;
                    if (failed) return facet;

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0 && key != null) {
                facet = new FanFacetDeclaration();
                facet.accept(convert(key), value);
              }

        }
        return facet;
    }
    // $ANTLR end facet


    // $ANTLR start intro
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:465:1: intro : Pound Not ( Div Id )* Id ;
    public final void intro() throws RecognitionException {
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:465:7: ( Pound Not ( Div Id )* Id )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:465:9: Pound Not ( Div Id )* Id
            {
            match(input,Pound,FOLLOW_Pound_in_intro1987); if (failed) return ;
            match(input,Not,FOLLOW_Not_in_intro1989); if (failed) return ;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:465:19: ( Div Id )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==Div) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:465:20: Div Id
            	    {
            	    match(input,Div,FOLLOW_Div_in_intro1992); if (failed) return ;
            	    match(input,Id,FOLLOW_Id_in_intro1994); if (failed) return ;

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            match(input,Id,FOLLOW_Id_in_intro1999); if (failed) return ;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end intro


    // $ANTLR start using
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:467:1: using returns [UsingStmt using = new UsingStmt()] : start= 'using' podSpec_res= podSpec ( DoubleColon typeName= Id ( '$' locName= Id )? ( 'as' localName= Id )? )? eos ;
    public final UsingStmt using() throws RecognitionException {
        UsingStmt using =  new UsingStmt();

        Token start=null;
        Token typeName=null;
        Token locName=null;
        Token localName=null;
        SimpleReference podSpec_res = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:467:50: (start= 'using' podSpec_res= podSpec ( DoubleColon typeName= Id ( '$' locName= Id )? ( 'as' localName= Id )? )? eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:468:2: start= 'using' podSpec_res= podSpec ( DoubleColon typeName= Id ( '$' locName= Id )? ( 'as' localName= Id )? )? eos
            {
            if ( backtracking==0 ) {
              using.setStart(startPos());
            }
            start=(Token)input.LT(1);
            match(input,Using,FOLLOW_Using_in_using2019); if (failed) return using;
            pushFollow(FOLLOW_podSpec_in_using2027);
            podSpec_res=podSpec();
            _fsp--;
            if (failed) return using;
            if ( backtracking==0 ) {
              using.setPodName(podSpec_res);
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:472:2: ( DoubleColon typeName= Id ( '$' locName= Id )? ( 'as' localName= Id )? )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==DoubleColon) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:472:3: DoubleColon typeName= Id ( '$' locName= Id )? ( 'as' localName= Id )?
                    {
                    match(input,DoubleColon,FOLLOW_DoubleColon_in_using2035); if (failed) return using;
                    typeName=(Token)input.LT(1);
                    match(input,Id,FOLLOW_Id_in_using2044); if (failed) return using;
                    if ( backtracking==0 ) {
                      using.setTypeName(convert(typeName));
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:474:5: ( '$' locName= Id )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==129) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:474:6: '$' locName= Id
                            {
                            match(input,129,FOLLOW_129_in_using2053); if (failed) return using;
                            locName=(Token)input.LT(1);
                            match(input,Id,FOLLOW_Id_in_using2059); if (failed) return using;
                            if ( backtracking==0 ) {
                              SimpleReference r = convert(typeName);
                              			  r.setName(r.getName() + "$");
                              			  r.setEnd(r.sourceEnd() + 1);
                              			  append(r, convert(locName));
                                      using.setTypeName(r);
                            }

                            }
                            break;

                    }

                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:481:3: ( 'as' localName= Id )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==As) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:481:4: 'as' localName= Id
                            {
                            match(input,As,FOLLOW_As_in_using2076); if (failed) return using;
                            localName=(Token)input.LT(1);
                            match(input,Id,FOLLOW_Id_in_using2085); if (failed) return using;
                            if ( backtracking==0 ) {
                              using.setTypeName(convert(localName));
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_eos_in_using2104);
            eos();
            _fsp--;
            if (failed) return using;
            if ( backtracking==0 ) {
              using.setEnd(endPos());
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return using;
    }
    // $ANTLR end using


    // $ANTLR start podSpec
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:490:1: podSpec returns [SimpleReference ref = null] : (ffi_res= ffi )? f= Id ( Dot n= Id )* ;
    public final SimpleReference podSpec() throws RecognitionException {
        SimpleReference ref =  null;

        Token f=null;
        Token n=null;
        String ffi_res = null;


        ref = new SimpleReference(0,0,"");
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:491:42: ( (ffi_res= ffi )? f= Id ( Dot n= Id )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:492:3: (ffi_res= ffi )? f= Id ( Dot n= Id )*
            {
            if ( backtracking==0 ) {
              ref.setStart(startPos());
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:493:2: (ffi_res= ffi )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==LB) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:493:3: ffi_res= ffi
                    {
                    pushFollow(FOLLOW_ffi_in_podSpec2134);
                    ffi_res=ffi();
                    _fsp--;
                    if (failed) return ref;
                    if ( backtracking==0 ) {
                      ref.setName(ref.getName()+ffi_res);
                    }

                    }
                    break;

            }

            f=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_podSpec2151); if (failed) return ref;
            if ( backtracking==0 ) {
              ref.setName(ref.getName()+f.getText());
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:498:2: ( Dot n= Id )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==Dot) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:498:3: Dot n= Id
            	    {
            	    match(input,Dot,FOLLOW_Dot_in_podSpec2158); if (failed) return ref;
            	    n=(Token)input.LT(1);
            	    match(input,Id,FOLLOW_Id_in_podSpec2165); if (failed) return ref;
            	    if ( backtracking==0 ) {
            	      ref.setName(ref.getName()+"." + n.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            if ( backtracking==0 ) {
              ref.setEnd(endPos());
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ref;
    }
    // $ANTLR end podSpec


    // $ANTLR start ffi
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:505:1: ffi returns [String res] : LB i= Id RB ;
    public final String ffi() throws RecognitionException {
        String res = null;

        Token i=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:505:26: ( LB i= Id RB )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:506:1: LB i= Id RB
            {
            match(input,LB,FOLLOW_LB_in_ffi2192); if (failed) return res;
            i=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_ffi2197); if (failed) return res;
            if ( backtracking==0 ) {
              res="{"+i.getText()+"}";
            }
            match(input,RB,FOLLOW_RB_in_ffi2202); if (failed) return res;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return res;
    }
    // $ANTLR end ffi


    // $ANTLR start flags
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:514:1: flags returns [int flags = 0] : ( 'abstract' | 'const' | 'final' | 'internal' | 'native' | 'new' | 'once' | 'override' | 'private' | 'protected' | 'public' | 'readonly' | 'static' | 'virtual' )* ;
    public final int flags() throws RecognitionException {
        int flags =  0;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:514:30: ( ( 'abstract' | 'const' | 'final' | 'internal' | 'native' | 'new' | 'once' | 'override' | 'private' | 'protected' | 'public' | 'readonly' | 'static' | 'virtual' )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:515:5: ( 'abstract' | 'const' | 'final' | 'internal' | 'native' | 'new' | 'once' | 'override' | 'private' | 'protected' | 'public' | 'readonly' | 'static' | 'virtual' )*
            {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:515:5: ( 'abstract' | 'const' | 'final' | 'internal' | 'native' | 'new' | 'once' | 'override' | 'private' | 'protected' | 'public' | 'readonly' | 'static' | 'virtual' )*
            loop12:
            do {
                int alt12=15;
                switch ( input.LA(1) ) {
                case Abstract:
                    {
                    alt12=1;
                    }
                    break;
                case Const:
                    {
                    alt12=2;
                    }
                    break;
                case Final:
                    {
                    alt12=3;
                    }
                    break;
                case Internal:
                    {
                    alt12=4;
                    }
                    break;
                case Native:
                    {
                    alt12=5;
                    }
                    break;
                case New:
                    {
                    alt12=6;
                    }
                    break;
                case Once:
                    {
                    alt12=7;
                    }
                    break;
                case Override:
                    {
                    alt12=8;
                    }
                    break;
                case Private:
                    {
                    alt12=9;
                    }
                    break;
                case Protected:
                    {
                    alt12=10;
                    }
                    break;
                case Public:
                    {
                    alt12=11;
                    }
                    break;
                case ReadOnly:
                    {
                    alt12=12;
                    }
                    break;
                case Static:
                    {
                    alt12=13;
                    }
                    break;
                case Virtual:
                    {
                    alt12=14;
                    }
                    break;

                }

                switch (alt12) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:515:6: 'abstract'
            	    {
            	    match(input,Abstract,FOLLOW_Abstract_in_flags2221); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccAbstract;
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:516:5: 'const'
            	    {
            	    match(input,Const,FOLLOW_Const_in_flags2229); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccConst;
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:517:5: 'final'
            	    {
            	    match(input,Final,FOLLOW_Final_in_flags2237); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccFinal;
            	    }

            	    }
            	    break;
            	case 4 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:518:5: 'internal'
            	    {
            	    match(input,Internal,FOLLOW_Internal_in_flags2245); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccInternal;
            	    }

            	    }
            	    break;
            	case 5 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:519:5: 'native'
            	    {
            	    match(input,Native,FOLLOW_Native_in_flags2253); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccNative;
            	    }

            	    }
            	    break;
            	case 6 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:520:5: 'new'
            	    {
            	    match(input,New,FOLLOW_New_in_flags2261); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccNew;
            	    }

            	    }
            	    break;
            	case 7 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:521:5: 'once'
            	    {
            	    match(input,Once,FOLLOW_Once_in_flags2269); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccOnce;
            	    }

            	    }
            	    break;
            	case 8 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:522:5: 'override'
            	    {
            	    match(input,Override,FOLLOW_Override_in_flags2277); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccOverride;
            	    }

            	    }
            	    break;
            	case 9 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:523:5: 'private'
            	    {
            	    match(input,Private,FOLLOW_Private_in_flags2285); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccPrivate;
            	    }

            	    }
            	    break;
            	case 10 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:524:5: 'protected'
            	    {
            	    match(input,Protected,FOLLOW_Protected_in_flags2293); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccProtected;
            	    }

            	    }
            	    break;
            	case 11 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:525:5: 'public'
            	    {
            	    match(input,Public,FOLLOW_Public_in_flags2301); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccPublic;
            	    }

            	    }
            	    break;
            	case 12 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:526:5: 'readonly'
            	    {
            	    match(input,ReadOnly,FOLLOW_ReadOnly_in_flags2309); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccReadOnly;
            	    }

            	    }
            	    break;
            	case 13 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:527:5: 'static'
            	    {
            	    match(input,Static,FOLLOW_Static_in_flags2317); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccStatic;
            	    }

            	    }
            	    break;
            	case 14 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:528:5: 'virtual'
            	    {
            	    match(input,Virtual,FOLLOW_Virtual_in_flags2325); if (failed) return flags;
            	    if ( backtracking==0 ) {
            	      flags |= FanModifiers.AccVirtual;
            	    }

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return flags;
    }
    // $ANTLR end flags


    // $ANTLR start typeDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:531:1: typeDef returns [AbstractFanTypeDeclaration decl] : fts= facets f= flags (c= classDef | m= mixinDef | e= enumDef ) ;
    public final AbstractFanTypeDeclaration typeDef() throws RecognitionException {
        AbstractFanTypeDeclaration decl = null;

        List<FanFacetDeclaration> fts = null;

        int f = 0;

        ClassDeclaration c = null;

        MixinDeclaration m = null;

        EnumDeclaration e = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:531:50: (fts= facets f= flags (c= classDef | m= mixinDef | e= enumDef ) )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:532:3: fts= facets f= flags (c= classDef | m= mixinDef | e= enumDef )
            {
            pushFollow(FOLLOW_facets_in_typeDef2347);
            fts=facets();
            _fsp--;
            if (failed) return decl;
            pushFollow(FOLLOW_flags_in_typeDef2353);
            f=flags();
            _fsp--;
            if (failed) return decl;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:534:3: (c= classDef | m= mixinDef | e= enumDef )
            int alt13=3;
            switch ( input.LA(1) ) {
            case Class:
                {
                alt13=1;
                }
                break;
            case Mixin:
                {
                alt13=2;
                }
                break;
            case Enum:
                {
                alt13=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return decl;}
                NoViableAltException nvae =
                    new NoViableAltException("534:3: (c= classDef | m= mixinDef | e= enumDef )", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:534:4: c= classDef
                    {
                    pushFollow(FOLLOW_classDef_in_typeDef2360);
                    c=classDef();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      decl = c; if (decl != null) decl.setModifiers(f);
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:535:5: m= mixinDef
                    {
                    pushFollow(FOLLOW_mixinDef_in_typeDef2372);
                    m=mixinDef();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      decl = m; if (decl != null) decl.setModifiers(f|FanModifiers.AccMixin);
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:536:5: e= enumDef
                    {
                    pushFollow(FOLLOW_enumDef_in_typeDef2382);
                    e=enumDef();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      decl = e; if (decl != null) decl.setModifiers(f|FanModifiers.AccEnum);
                    }

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0 && decl != null && fts != null) {
                factory.handleTypeFacets(decl, fts);
              }

        }
        return decl;
    }
    // $ANTLR end typeDef


    // $ANTLR start enumDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:545:1: enumDef returns [EnumDeclaration decl = new EnumDeclaration()] : 'enum' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC enumValDefs[decl] (slot= slotDef[decl.getName()] )* RC ;
    public final EnumDeclaration enumDef() throws RecognitionException {
        EnumDeclaration decl =  new EnumDeclaration();

        Token name=null;
        FanTypeRef f = null;

        FanTypeRef n = null;

        Declaration slot = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:545:63: ( 'enum' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC enumValDefs[decl] (slot= slotDef[decl.getName()] )* RC )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:546:3: 'enum' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC enumValDefs[decl] (slot= slotDef[decl.getName()] )* RC
            {
            if ( backtracking==0 ) {
              decl.setStart(startPos());
            }
            match(input,Enum,FOLLOW_Enum_in_enumDef2410); if (failed) return decl;
            name=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_enumDef2418); if (failed) return decl;
            if ( backtracking==0 ) {
              SimpleReference nameRef=convert(name); 
                if (nameRef!=null){ 
                  decl.setName(nameRef.getName());
                  decl.setNameStart(nameRef.sourceStart());
                  decl.setNameEnd(nameRef.sourceEnd());
                }
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:555:3: ( Colon f= ctype ( Comma n= ctype )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==Colon) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:555:4: Colon f= ctype ( Comma n= ctype )*
                    {
                    match(input,Colon,FOLLOW_Colon_in_enumDef2432); if (failed) return decl;
                    pushFollow(FOLLOW_ctype_in_enumDef2436);
                    f=ctype();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      if (f!=null) decl.addSuperClass(f);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:556:5: ( Comma n= ctype )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==Comma) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:556:6: Comma n= ctype
                    	    {
                    	    match(input,Comma,FOLLOW_Comma_in_enumDef2446); if (failed) return decl;
                    	    pushFollow(FOLLOW_ctype_in_enumDef2450);
                    	    n=ctype();
                    	    _fsp--;
                    	    if (failed) return decl;
                    	    if ( backtracking==0 ) {
                    	      if (n!=null) decl.addSuperClass(n);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            match(input,LC,FOLLOW_LC_in_enumDef2463); if (failed) return decl;
            pushFollow(FOLLOW_enumValDefs_in_enumDef2467);
            enumValDefs(decl);
            _fsp--;
            if (failed) return decl;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:560:3: (slot= slotDef[decl.getName()] )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( ((LA16_0>=Abstract && LA16_0<=ReadOnly)||(LA16_0>=Public && LA16_0<=New)||(LA16_0>=AtId && LA16_0<=Id)||LA16_0==LB||LA16_0==Pipe) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:560:5: slot= slotDef[decl.getName()]
            	    {
            	    pushFollow(FOLLOW_slotDef_in_enumDef2478);
            	    slot=slotDef(decl.getName());
            	    _fsp--;
            	    if (failed) return decl;
            	    if ( backtracking==0 ) {
            	      if (slot!=null) {
            	          decl.getStatements().add(slot);
            	        }
            	    }

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            match(input,RC,FOLLOW_RC_in_enumDef2493); if (failed) return decl;
            if ( backtracking==0 ) {
              decl.setEnd(endPos());
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return decl;
    }
    // $ANTLR end enumDef


    // $ANTLR start classDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:569:1: classDef returns [ClassDeclaration decl = new ClassDeclaration()] : 'class' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC (slot= slotDef[decl.getName()] )* RC ;
    public final ClassDeclaration classDef() throws RecognitionException {
        ClassDeclaration decl =  new ClassDeclaration();

        Token name=null;
        FanTypeRef f = null;

        FanTypeRef n = null;

        Declaration slot = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:569:66: ( 'class' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC (slot= slotDef[decl.getName()] )* RC )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:570:3: 'class' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC (slot= slotDef[decl.getName()] )* RC
            {
            if ( backtracking==0 ) {
              decl.setStart(startPos());
            }
            match(input,Class,FOLLOW_Class_in_classDef2515); if (failed) return decl;
            name=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_classDef2523); if (failed) return decl;
            if ( backtracking==0 ) {
              SimpleReference nameRef=convert(name); 
                if (nameRef!=null){ 
                  decl.setName(nameRef.getName());
                  decl.setNameStart(nameRef.sourceStart());
                  decl.setNameEnd(nameRef.sourceEnd());
                }
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:579:3: ( Colon f= ctype ( Comma n= ctype )* )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==Colon) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:579:4: Colon f= ctype ( Comma n= ctype )*
                    {
                    match(input,Colon,FOLLOW_Colon_in_classDef2537); if (failed) return decl;
                    pushFollow(FOLLOW_ctype_in_classDef2541);
                    f=ctype();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      if (f!=null) decl.addSuperClass(f);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:580:5: ( Comma n= ctype )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==Comma) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:580:6: Comma n= ctype
                    	    {
                    	    match(input,Comma,FOLLOW_Comma_in_classDef2551); if (failed) return decl;
                    	    pushFollow(FOLLOW_ctype_in_classDef2555);
                    	    n=ctype();
                    	    _fsp--;
                    	    if (failed) return decl;
                    	    if ( backtracking==0 ) {
                    	      if (n!=null) decl.addSuperClass(n);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);


                    }
                    break;

            }

            match(input,LC,FOLLOW_LC_in_classDef2568); if (failed) return decl;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:583:3: (slot= slotDef[decl.getName()] )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( ((LA19_0>=Abstract && LA19_0<=ReadOnly)||(LA19_0>=Public && LA19_0<=New)||(LA19_0>=AtId && LA19_0<=Id)||LA19_0==LB||LA19_0==Pipe) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:583:5: slot= slotDef[decl.getName()]
            	    {
            	    pushFollow(FOLLOW_slotDef_in_classDef2578);
            	    slot=slotDef(decl.getName());
            	    _fsp--;
            	    if (failed) return decl;
            	    if ( backtracking==0 ) {
            	      if (slot!=null) {
            	          decl.getStatements().add(slot);
            	        }
            	    }

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);

            match(input,RC,FOLLOW_RC_in_classDef2593); if (failed) return decl;
            if ( backtracking==0 ) {
              decl.setEnd(endPos());
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return decl;
    }
    // $ANTLR end classDef


    // $ANTLR start mixinDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:592:1: mixinDef returns [MixinDeclaration decl = new MixinDeclaration()] : 'mixin' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC (slot= slotDef[decl.getName()] )* RC ;
    public final MixinDeclaration mixinDef() throws RecognitionException {
        MixinDeclaration decl =  new MixinDeclaration();

        Token name=null;
        FanTypeRef f = null;

        FanTypeRef n = null;

        Declaration slot = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:592:66: ( 'mixin' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC (slot= slotDef[decl.getName()] )* RC )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:593:3: 'mixin' name= Id ( Colon f= ctype ( Comma n= ctype )* )? LC (slot= slotDef[decl.getName()] )* RC
            {
            if ( backtracking==0 ) {
              decl.setStart(startPos());
            }
            match(input,Mixin,FOLLOW_Mixin_in_mixinDef2615); if (failed) return decl;
            name=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_mixinDef2623); if (failed) return decl;
            if ( backtracking==0 ) {
              SimpleReference nameRef=convert(name); 
                if (nameRef!=null){ 
                  decl.setName(nameRef.getName());
                  decl.setNameStart(nameRef.sourceStart());
                  decl.setNameEnd(nameRef.sourceEnd());
                }
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:602:3: ( Colon f= ctype ( Comma n= ctype )* )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==Colon) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:602:4: Colon f= ctype ( Comma n= ctype )*
                    {
                    match(input,Colon,FOLLOW_Colon_in_mixinDef2637); if (failed) return decl;
                    pushFollow(FOLLOW_ctype_in_mixinDef2641);
                    f=ctype();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      if (f!=null) decl.addSuperClass(f);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:603:5: ( Comma n= ctype )*
                    loop20:
                    do {
                        int alt20=2;
                        int LA20_0 = input.LA(1);

                        if ( (LA20_0==Comma) ) {
                            alt20=1;
                        }


                        switch (alt20) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:603:6: Comma n= ctype
                    	    {
                    	    match(input,Comma,FOLLOW_Comma_in_mixinDef2651); if (failed) return decl;
                    	    pushFollow(FOLLOW_ctype_in_mixinDef2655);
                    	    n=ctype();
                    	    _fsp--;
                    	    if (failed) return decl;
                    	    if ( backtracking==0 ) {
                    	      if (n!=null) decl.addSuperClass(n);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop20;
                        }
                    } while (true);


                    }
                    break;

            }

            match(input,LC,FOLLOW_LC_in_mixinDef2668); if (failed) return decl;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:606:3: (slot= slotDef[decl.getName()] )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( ((LA22_0>=Abstract && LA22_0<=ReadOnly)||(LA22_0>=Public && LA22_0<=New)||(LA22_0>=AtId && LA22_0<=Id)||LA22_0==LB||LA22_0==Pipe) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:606:5: slot= slotDef[decl.getName()]
            	    {
            	    pushFollow(FOLLOW_slotDef_in_mixinDef2678);
            	    slot=slotDef(decl.getName());
            	    _fsp--;
            	    if (failed) return decl;
            	    if ( backtracking==0 ) {
            	      if (slot!=null) {
            	          decl.getStatements().add(slot);
            	        }
            	    }

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            match(input,RC,FOLLOW_RC_in_mixinDef2693); if (failed) return decl;
            if ( backtracking==0 ) {
              decl.setEnd(endPos());
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return decl;
    }
    // $ANTLR end mixinDef


    // $ANTLR start enumValDefs
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:617:1: enumValDefs[EnumDeclaration decl] : first= enumValDef (c= Comma next= enumValDef )* eos ;
    public final void enumValDefs(EnumDeclaration decl) throws RecognitionException {
        Token c=null;
        EnumValueDeclaration first = null;

        EnumValueDeclaration next = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:617:34: (first= enumValDef (c= Comma next= enumValDef )* eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:618:3: first= enumValDef (c= Comma next= enumValDef )* eos
            {
            pushFollow(FOLLOW_enumValDef_in_enumValDefs2714);
            first=enumValDef();
            _fsp--;
            if (failed) return ;
            if ( backtracking==0 ) {
              if (decl != null) decl.addValue(first);
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:618:64: (c= Comma next= enumValDef )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==Comma) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:619:5: c= Comma next= enumValDef
            	    {
            	    c=(Token)input.LT(1);
            	    match(input,Comma,FOLLOW_Comma_in_enumValDefs2728); if (failed) return ;
            	    pushFollow(FOLLOW_enumValDef_in_enumValDefs2738);
            	    next=enumValDef();
            	    _fsp--;
            	    if (failed) return ;
            	    if ( backtracking==0 ) {
            	      if (decl != null) decl.addValue(next);
            	    }

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            pushFollow(FOLLOW_eos_in_enumValDefs2750);
            eos();
            _fsp--;
            if (failed) return ;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end enumValDefs


    // $ANTLR start enumValDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:624:1: enumValDef returns [EnumValueDeclaration value = new EnumValueDeclaration()] : ( Id )=>name= Id ( ( LP )=>list= args )? ;
    public final EnumValueDeclaration enumValDef() throws RecognitionException {
        EnumValueDeclaration value =  new EnumValueDeclaration();

        Token name=null;
        CallArgumentsList list = null;


        value.setStart(startPos());
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:625:35: ( ( Id )=>name= Id ( ( LP )=>list= args )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:626:3: ( Id )=>name= Id ( ( LP )=>list= args )?
            {
            name=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_enumValDef2773); if (failed) return value;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:626:17: ( ( LP )=>list= args )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==LP) && (synpred3())) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:626:18: ( LP )=>list= args
                    {
                    pushFollow(FOLLOW_args_in_enumValDef2782);
                    list=args();
                    _fsp--;
                    if (failed) return value;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              value.setEnd(endPos());
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0 && name != null) {
                SimpleReference ref = convert(name);
                value.setName(ref.getName());
                value.setNameStart(ref.sourceStart());
                value.setNameEnd(ref.sourceEnd());
                if (list != null)
                  value.setInitializingArgs(list);
              }

        }
        return value;
    }
    // $ANTLR end enumValDef


    // $ANTLR start slotDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:640:1: slotDef[String ownerName] returns [Declaration decl = null] options {backtrack=true; } : ( ( 'static' LC )=> ( 'static' block ) | fts= facets f= flags ( ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos ) | ( Id )=>cc= ctorDef[fts] ) );
    public final Declaration slotDef(String ownerName) throws RecognitionException {
        Declaration decl =  null;

        Token name=null;
        List<FanFacetDeclaration> fts = null;

        int f = 0;

        FanTypeRef type = null;

        FanMethodDeclaration m = null;

        FanFieldDeclaration ff = null;

        FanFieldDeclaration fff = null;

        FanConstructorDeclaration cc = null;


        int start=0;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:642:1: ( ( 'static' LC )=> ( 'static' block ) | fts= facets f= flags ( ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos ) | ( Id )=>cc= ctorDef[fts] ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==Static) ) {
                int LA27_1 = input.LA(2);

                if ( (LA27_1==LC) && (synpred4())) {
                    alt27=1;
                }
                else if ( ((LA27_1>=Abstract && LA27_1<=ReadOnly)||(LA27_1>=Public && LA27_1<=New)||LA27_1==Id||LA27_1==LB||LA27_1==Pipe) ) {
                    alt27=2;
                }
                else {
                    if (backtracking>0) {failed=true; return decl;}
                    NoViableAltException nvae =
                        new NoViableAltException("640:1: slotDef[String ownerName] returns [Declaration decl = null] options {backtrack=true; } : ( ( 'static' LC )=> ( 'static' block ) | fts= facets f= flags ( ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos ) | ( Id )=>cc= ctorDef[fts] ) );", 27, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA27_0>=Abstract && LA27_0<=Override)||(LA27_0>=Virtual && LA27_0<=ReadOnly)||(LA27_0>=Public && LA27_0<=New)||(LA27_0>=AtId && LA27_0<=Id)||LA27_0==LB||LA27_0==Pipe) ) {
                alt27=2;
            }
            else {
                if (backtracking>0) {failed=true; return decl;}
                NoViableAltException nvae =
                    new NoViableAltException("640:1: slotDef[String ownerName] returns [Declaration decl = null] options {backtrack=true; } : ( ( 'static' LC )=> ( 'static' block ) | fts= facets f= flags ( ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos ) | ( Id )=>cc= ctorDef[fts] ) );", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:643:3: ( 'static' LC )=> ( 'static' block )
                    {
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:643:18: ( 'static' block )
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:643:19: 'static' block
                    {
                    match(input,Static,FOLLOW_Static_in_slotDef2828); if (failed) return decl;
                    pushFollow(FOLLOW_block_in_slotDef2830);
                    block();
                    _fsp--;
                    if (failed) return decl;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:645:3: fts= facets f= flags ( ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos ) | ( Id )=>cc= ctorDef[fts] )
                    {
                    pushFollow(FOLLOW_facets_in_slotDef2842);
                    fts=facets();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      start = startPos();
                    }
                    pushFollow(FOLLOW_flags_in_slotDef2853);
                    f=flags();
                    _fsp--;
                    if (failed) return decl;
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:647:11: ( ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos ) | ( Id )=>cc= ctorDef[fts] )
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==Id) ) {
                        int LA26_1 = input.LA(2);

                        if ( (LA26_1==LP) && (synpred9())) {
                            alt26=2;
                        }
                        else if ( (LA26_1==DoubleColon) && (synpred5())) {
                            alt26=1;
                        }
                        else if ( (LA26_1==Qu) && (synpred5())) {
                            alt26=1;
                        }
                        else if ( (LA26_1==LB) && (synpred5())) {
                            alt26=1;
                        }
                        else if ( (LA26_1==Colon) && (synpred5())) {
                            alt26=1;
                        }
                        else if ( (LA26_1==Id) && (synpred5())) {
                            alt26=1;
                        }
                        else {
                            if (backtracking>0) {failed=true; return decl;}
                            NoViableAltException nvae =
                                new NoViableAltException("647:11: ( ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos ) | ( Id )=>cc= ctorDef[fts] )", 26, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA26_0==LB) && (synpred5())) {
                        alt26=1;
                    }
                    else if ( (LA26_0==Pipe) && (synpred5())) {
                        alt26=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return decl;}
                        NoViableAltException nvae =
                            new NoViableAltException("647:11: ( ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos ) | ( Id )=>cc= ctorDef[fts] )", 26, 0, input);

                        throw nvae;
                    }
                    switch (alt26) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:648:5: ( ctype )=>type= ctype name= Id ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos )
                            {
                            pushFollow(FOLLOW_ctype_in_slotDef2868);
                            type=ctype();
                            _fsp--;
                            if (failed) return decl;
                            name=(Token)input.LT(1);
                            match(input,Id,FOLLOW_Id_in_slotDef2872); if (failed) return decl;
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:649:5: ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos )
                            int alt25=4;
                            int LA25_0 = input.LA(1);

                            if ( (LA25_0==LP) && (synpred6())) {
                                alt25=1;
                            }
                            else if ( (LA25_0==Define) && (synpred7())) {
                                alt25=2;
                            }
                            else if ( (LA25_0==LC) && (synpred8())) {
                                alt25=3;
                            }
                            else if ( (LA25_0==EOF||(LA25_0>=Abstract && LA25_0<=ReadOnly)||(LA25_0>=Public && LA25_0<=New)||(LA25_0>=AtId && LA25_0<=Id)||LA25_0==LB||LA25_0==RC||LA25_0==Semi||LA25_0==Pipe) ) {
                                alt25=4;
                            }
                            else {
                                if (backtracking>0) {failed=true; return decl;}
                                NoViableAltException nvae =
                                    new NoViableAltException("649:5: ( ( LP )=>m= methodDef[type,ownerName, convert(name), fts] | ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts] | ( LC )=>fff= fieldDef[type,convert(name), fts] | eos )", 25, 0, input);

                                throw nvae;
                            }
                            switch (alt25) {
                                case 1 :
                                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:650:5: ( LP )=>m= methodDef[type,ownerName, convert(name), fts]
                                    {
                                    pushFollow(FOLLOW_methodDef_in_slotDef2893);
                                    m=methodDef(type, ownerName,  convert(name),  fts);
                                    _fsp--;
                                    if (failed) return decl;
                                    if ( backtracking==0 ) {
                                      decl=m;
                                    }

                                    }
                                    break;
                                case 2 :
                                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:651:6: ( Define )=>ff= fieldDefWithInitializer[type,convert(name), fts]
                                    {
                                    pushFollow(FOLLOW_fieldDefWithInitializer_in_slotDef2908);
                                    ff=fieldDefWithInitializer(type, convert(name),  fts);
                                    _fsp--;
                                    if (failed) return decl;
                                    if ( backtracking==0 ) {
                                      decl=ff;
                                    }

                                    }
                                    break;
                                case 3 :
                                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:652:7: ( LC )=>fff= fieldDef[type,convert(name), fts]
                                    {
                                    pushFollow(FOLLOW_fieldDef_in_slotDef2924);
                                    fff=fieldDef(type, convert(name),  fts);
                                    _fsp--;
                                    if (failed) return decl;
                                    if ( backtracking==0 ) {
                                      decl=fff;
                                    }

                                    }
                                    break;
                                case 4 :
                                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:653:6: eos
                                    {
                                    pushFollow(FOLLOW_eos_in_slotDef2933);
                                    eos();
                                    _fsp--;
                                    if (failed) return decl;
                                    if ( backtracking==0 ) {

                                          SimpleReference ref = convert(name);
                                          decl = new FanFieldDeclaration(
                                      		  ref.getName(),
                                      		  ref.sourceStart(),
                                      		  ref.sourceEnd(),
                                      		  0,0);
                                        ((FanFieldDeclaration)decl).setType(type);
                                        
                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:663:7: ( Id )=>cc= ctorDef[fts]
                            {
                            pushFollow(FOLLOW_ctorDef_in_slotDef2956);
                            cc=ctorDef(fts);
                            _fsp--;
                            if (failed) return decl;
                            if ( backtracking==0 ) {
                              decl=cc;
                            }

                            }
                            break;

                    }

                    if ( backtracking==0 ) {
                      if (decl!=null) {
                          decl.setStart(start);
                          decl.setEnd(endPos());
                          decl.setModifiers(f);
                         }
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return decl;
    }
    // $ANTLR end slotDef


    // $ANTLR start fieldDefWithInitializer
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:671:1: fieldDefWithInitializer[FanTypeRef type, SimpleReference name, List<FanFacetDeclaration> facets] returns [FanFieldDeclaration decl] : Define in= expr ( ( LC )=> getterAndSetter[decl] )? eos ;
    public final FanFieldDeclaration fieldDefWithInitializer(FanTypeRef type, SimpleReference name, List<FanFacetDeclaration> facets) throws RecognitionException {
        FanFieldDeclaration decl = null;

        Expression in = null;


        decl = new FanFieldDeclaration(
        	  name.getName(),
        	  name.sourceStart(),
        	  name.sourceEnd(),
        	  0,0);
        	  decl.setType(type);
        	  if (facets != null)
        	    factory.handleFieldFacets(decl, facets);
          
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:681:4: ( Define in= expr ( ( LC )=> getterAndSetter[decl] )? eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:682:3: Define in= expr ( ( LC )=> getterAndSetter[decl] )? eos
            {
            match(input,Define,FOLLOW_Define_in_fieldDefWithInitializer2989); if (failed) return decl;
            pushFollow(FOLLOW_expr_in_fieldDefWithInitializer2993);
            in=expr();
            _fsp--;
            if (failed) return decl;
            if ( backtracking==0 ) {
              decl.setInitializer(in);
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:683:3: ( ( LC )=> getterAndSetter[decl] )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==LC) && (synpred10())) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:683:4: ( LC )=> getterAndSetter[decl]
                    {
                    pushFollow(FOLLOW_getterAndSetter_in_fieldDefWithInitializer3004);
                    getterAndSetter(decl);
                    _fsp--;
                    if (failed) return decl;

                    }
                    break;

            }

            pushFollow(FOLLOW_eos_in_fieldDefWithInitializer3012);
            eos();
            _fsp--;
            if (failed) return decl;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return decl;
    }
    // $ANTLR end fieldDefWithInitializer


    // $ANTLR start fieldDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:686:1: fieldDef[FanTypeRef type, SimpleReference name, List<FanFacetDeclaration> facets] returns [FanFieldDeclaration decl] : ( LC )=> getterAndSetter[decl] eos ;
    public final FanFieldDeclaration fieldDef(FanTypeRef type, SimpleReference name, List<FanFacetDeclaration> facets) throws RecognitionException {
        FanFieldDeclaration decl = null;

        decl = new FanFieldDeclaration(
        	  name.getName(),
        	  name.sourceStart(),
        	  name.sourceEnd(),
        	  0,0);
        	  decl.setType(type);
            if (facets != null)
              factory.handleFieldFacets(decl, facets);
          
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:696:4: ( ( LC )=> getterAndSetter[decl] eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:697:3: ( LC )=> getterAndSetter[decl] eos
            {
            pushFollow(FOLLOW_getterAndSetter_in_fieldDef3036);
            getterAndSetter(decl);
            _fsp--;
            if (failed) return decl;
            pushFollow(FOLLOW_eos_in_fieldDef3041);
            eos();
            _fsp--;
            if (failed) return decl;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return decl;
    }
    // $ANTLR end fieldDef


    // $ANTLR start getterAndSetter
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:700:1: getterAndSetter[FanFieldDeclaration base] : LC ( ( ( get )=>getter= fieldGetter (setter= fieldSetter )? ) | (setter= fieldSetter (getter= fieldGetter )? ) ) RC ;
    public final void getterAndSetter(FanFieldDeclaration base) throws RecognitionException {
        FanGetterOrSetterDeclaration getter = null;

        FanGetterOrSetterDeclaration setter = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:701:3: ( LC ( ( ( get )=>getter= fieldGetter (setter= fieldSetter )? ) | (setter= fieldSetter (getter= fieldGetter )? ) ) RC )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:3: LC ( ( ( get )=>getter= fieldGetter (setter= fieldSetter )? ) | (setter= fieldSetter (getter= fieldGetter )? ) ) RC
            {
            match(input,LC,FOLLOW_LC_in_getterAndSetter3055); if (failed) return ;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:6: ( ( ( get )=>getter= fieldGetter (setter= fieldSetter )? ) | (setter= fieldSetter (getter= fieldGetter )? ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==Id) ) {
                int LA31_1 = input.LA(2);

                if ( (synpred12()) ) {
                    alt31=1;
                }
                else if ( (true) ) {
                    alt31=2;
                }
                else {
                    if (backtracking>0) {failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("702:6: ( ( ( get )=>getter= fieldGetter (setter= fieldSetter )? ) | (setter= fieldSetter (getter= fieldGetter )? ) )", 31, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA31_0>=Abstract && LA31_0<=ReadOnly)||(LA31_0>=Public && LA31_0<=New)) ) {
                alt31=2;
            }
            else {
                if (backtracking>0) {failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("702:6: ( ( ( get )=>getter= fieldGetter (setter= fieldSetter )? ) | (setter= fieldSetter (getter= fieldGetter )? ) )", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:7: ( ( get )=>getter= fieldGetter (setter= fieldSetter )? )
                    {
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:7: ( ( get )=>getter= fieldGetter (setter= fieldSetter )? )
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:8: ( get )=>getter= fieldGetter (setter= fieldSetter )?
                    {
                    pushFollow(FOLLOW_fieldGetter_in_getterAndSetter3065);
                    getter=fieldGetter();
                    _fsp--;
                    if (failed) return ;
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:34: (setter= fieldSetter )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( ((LA29_0>=Abstract && LA29_0<=ReadOnly)||(LA29_0>=Public && LA29_0<=New)||LA29_0==Id) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:35: setter= fieldSetter
                            {
                            pushFollow(FOLLOW_fieldSetter_in_getterAndSetter3070);
                            setter=fieldSetter();
                            _fsp--;
                            if (failed) return ;

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:57: (setter= fieldSetter (getter= fieldGetter )? )
                    {
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:57: (setter= fieldSetter (getter= fieldGetter )? )
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:58: setter= fieldSetter (getter= fieldGetter )?
                    {
                    pushFollow(FOLLOW_fieldSetter_in_getterAndSetter3078);
                    setter=fieldSetter();
                    _fsp--;
                    if (failed) return ;
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:77: (getter= fieldGetter )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==Id) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:78: getter= fieldGetter
                            {
                            pushFollow(FOLLOW_fieldGetter_in_getterAndSetter3083);
                            getter=fieldGetter();
                            _fsp--;
                            if (failed) return ;

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            match(input,RC,FOLLOW_RC_in_getterAndSetter3095); if (failed) return ;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0) {
                if (getter != null)
                  base.setGetter(getter);
                if (setter != null)
                  base.setSetter(setter);
              }

        }
        return ;
    }
    // $ANTLR end getterAndSetter


    // $ANTLR start fieldGetter
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:715:1: fieldGetter returns [FanGetterOrSetterDeclaration getter] : get ( eos | bl= block ) ;
    public final FanGetterOrSetterDeclaration fieldGetter() throws RecognitionException {
        FanGetterOrSetterDeclaration getter = null;

        Block bl = null;


        int start = startPos();
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:718:3: ( get ( eos | bl= block ) )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:719:3: get ( eos | bl= block )
            {
            pushFollow(FOLLOW_get_in_fieldGetter3124);
            get();
            _fsp--;
            if (failed) return getter;
            if ( backtracking==0 ) {
              getter = new FanGetterOrSetterDeclaration(start, "get");
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:720:3: ( eos | bl= block )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==EOF||(LA32_0>=Abstract && LA32_0<=ReadOnly)||(LA32_0>=Public && LA32_0<=New)||LA32_0==Id||LA32_0==RC||LA32_0==Semi) ) {
                alt32=1;
            }
            else if ( (LA32_0==LC) ) {
                alt32=2;
            }
            else {
                if (backtracking>0) {failed=true; return getter;}
                NoViableAltException nvae =
                    new NoViableAltException("720:3: ( eos | bl= block )", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:720:4: eos
                    {
                    pushFollow(FOLLOW_eos_in_fieldGetter3131);
                    eos();
                    _fsp--;
                    if (failed) return getter;

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:720:10: bl= block
                    {
                    pushFollow(FOLLOW_block_in_fieldGetter3137);
                    bl=block();
                    _fsp--;
                    if (failed) return getter;
                    if ( backtracking==0 ) {
                      getter.setBody(bl);
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
              if (getter != null) getter.setEnd(endPos());
            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return getter;
    }
    // $ANTLR end fieldGetter


    // $ANTLR start fieldSetter
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:723:1: fieldSetter returns [FanGetterOrSetterDeclaration setter] : f= flags set ( eos | bl= block ) ;
    public final FanGetterOrSetterDeclaration fieldSetter() throws RecognitionException {
        FanGetterOrSetterDeclaration setter = null;

        int f = 0;

        Block bl = null;


        int start = startPos();
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:726:3: (f= flags set ( eos | bl= block ) )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:727:3: f= flags set ( eos | bl= block )
            {
            pushFollow(FOLLOW_flags_in_fieldSetter3167);
            f=flags();
            _fsp--;
            if (failed) return setter;
            pushFollow(FOLLOW_set_in_fieldSetter3169);
            set();
            _fsp--;
            if (failed) return setter;
            if ( backtracking==0 ) {
              setter = new FanGetterOrSetterDeclaration(start, "set");
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:728:3: ( eos | bl= block )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==EOF||LA33_0==Id||LA33_0==RC||LA33_0==Semi) ) {
                alt33=1;
            }
            else if ( (LA33_0==LC) ) {
                alt33=2;
            }
            else {
                if (backtracking>0) {failed=true; return setter;}
                NoViableAltException nvae =
                    new NoViableAltException("728:3: ( eos | bl= block )", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:728:4: eos
                    {
                    pushFollow(FOLLOW_eos_in_fieldSetter3176);
                    eos();
                    _fsp--;
                    if (failed) return setter;

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:728:10: bl= block
                    {
                    pushFollow(FOLLOW_block_in_fieldSetter3182);
                    bl=block();
                    _fsp--;
                    if (failed) return setter;
                    if ( backtracking==0 ) {
                      setter.setBody(bl);
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
              if (setter != null) { setter.setEnd(endPos()); setter.setModifiers(f); }
            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return setter;
    }
    // $ANTLR end fieldSetter


    // $ANTLR start get
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:730:1: get : t= Id {...}?;
    public final void get() throws RecognitionException {
        Token t=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:730:10: (t= Id {...}?)
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:730:12: t= Id {...}?
            {
            t=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_get3200); if (failed) return ;
            if ( !(t.getText().equals("get")) ) {
                if (backtracking>0) {failed=true; return ;}
                throw new FailedPredicateException(input, "get", "t.getText().equals(\"get\")");
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end get


    // $ANTLR start set
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:731:1: set : t= Id {...}?;
    public final void set() throws RecognitionException {
        Token t=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:731:10: (t= Id {...}?)
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:731:12: t= Id {...}?
            {
            t=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_set3216); if (failed) return ;
            if ( !(t.getText().equals("set")) ) {
                if (backtracking>0) {failed=true; return ;}
                throw new FailedPredicateException(input, "set", "t.getText().equals(\"set\")");
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end set


    // $ANTLR start methodDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:733:1: methodDef[FanTypeRef type, String ownerName, SimpleReference name, List<FanFacetDeclaration> facets] returns [FanMethodDeclaration decl] : LP (f= param ( ( Comma )=> Comma n= param )* )? RP body= methodBody ;
    public final FanMethodDeclaration methodDef(FanTypeRef type, String ownerName, SimpleReference name, List<FanFacetDeclaration> facets) throws RecognitionException {
        FanMethodDeclaration decl = null;

        FanArgument f = null;

        FanArgument n = null;

        Block body = null;


        decl = new FanMethodDeclaration(
        	  name.getName(),
        	  name.sourceStart(),
        	  name.sourceEnd(),
        	  0,0);
        	  decl.setDeclaringTypeName(ownerName);
        	  decl.setType(type);
            if (facets != null)
              factory.handleMethodFacets(decl, facets);
          
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:744:4: ( LP (f= param ( ( Comma )=> Comma n= param )* )? RP body= methodBody )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:745:2: LP (f= param ( ( Comma )=> Comma n= param )* )? RP body= methodBody
            {
            match(input,LP,FOLLOW_LP_in_methodDef3237); if (failed) return decl;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:746:3: (f= param ( ( Comma )=> Comma n= param )* )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==Id||LA35_0==LB||LA35_0==Pipe) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:746:4: f= param ( ( Comma )=> Comma n= param )*
                    {
                    pushFollow(FOLLOW_param_in_methodDef3244);
                    f=param();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      decl.addArgument(f);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:747:3: ( ( Comma )=> Comma n= param )*
                    loop34:
                    do {
                        int alt34=2;
                        int LA34_0 = input.LA(1);

                        if ( (LA34_0==Comma) && (synpred13())) {
                            alt34=1;
                        }


                        switch (alt34) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:747:4: ( Comma )=> Comma n= param
                    	    {
                    	    match(input,Comma,FOLLOW_Comma_in_methodDef3256); if (failed) return decl;
                    	    pushFollow(FOLLOW_param_in_methodDef3263);
                    	    n=param();
                    	    _fsp--;
                    	    if (failed) return decl;
                    	    if ( backtracking==0 ) {
                    	      decl.addArgument(n);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);


                    }
                    break;

            }

            match(input,RP,FOLLOW_RP_in_methodDef3272); if (failed) return decl;
            pushFollow(FOLLOW_methodBody_in_methodDef3277);
            body=methodBody();
            _fsp--;
            if (failed) return decl;
            if ( backtracking==0 ) {
              decl.acceptBody(body);
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return decl;
    }
    // $ANTLR end methodDef


    // $ANTLR start param
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:753:1: param returns [FanArgument arg = new FanArgument()] : ( ( ctype )=>t= ctype (name= Id )? | ( Id )=>name= Id ) ( Define in= expr )? ;
    public final FanArgument param() throws RecognitionException {
        FanArgument arg =  new FanArgument();

        Token name=null;
        FanTypeRef t = null;

        Expression in = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:753:53: ( ( ( ctype )=>t= ctype (name= Id )? | ( Id )=>name= Id ) ( Define in= expr )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:754:2: ( ( ctype )=>t= ctype (name= Id )? | ( Id )=>name= Id ) ( Define in= expr )?
            {
            if ( backtracking==0 ) {
              arg.setStart(startPos());
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:755:5: ( ( ctype )=>t= ctype (name= Id )? | ( Id )=>name= Id )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==Id) ) {
                int LA37_1 = input.LA(2);

                if ( (synpred14()) ) {
                    alt37=1;
                }
                else if ( (synpred15()) ) {
                    alt37=2;
                }
                else {
                    if (backtracking>0) {failed=true; return arg;}
                    NoViableAltException nvae =
                        new NoViableAltException("755:5: ( ( ctype )=>t= ctype (name= Id )? | ( Id )=>name= Id )", 37, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA37_0==LB) && (synpred14())) {
                alt37=1;
            }
            else if ( (LA37_0==Pipe) && (synpred14())) {
                alt37=1;
            }
            else {
                if (backtracking>0) {failed=true; return arg;}
                NoViableAltException nvae =
                    new NoViableAltException("755:5: ( ( ctype )=>t= ctype (name= Id )? | ( Id )=>name= Id )", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:755:6: ( ctype )=>t= ctype (name= Id )?
                    {
                    pushFollow(FOLLOW_ctype_in_param3310);
                    t=ctype();
                    _fsp--;
                    if (failed) return arg;
                    if ( backtracking==0 ) {
                      arg.setType(t);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:755:41: (name= Id )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==Id) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:755:42: name= Id
                            {
                            name=(Token)input.LT(1);
                            match(input,Id,FOLLOW_Id_in_param3317); if (failed) return arg;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:756:5: ( Id )=>name= Id
                    {
                    name=(Token)input.LT(1);
                    match(input,Id,FOLLOW_Id_in_param3331); if (failed) return arg;

                    }
                    break;

            }

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:757:2: ( Define in= expr )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==Define) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:757:3: Define in= expr
                    {
                    match(input,Define,FOLLOW_Define_in_param3336); if (failed) return arg;
                    pushFollow(FOLLOW_expr_in_param3340);
                    in=expr();
                    _fsp--;
                    if (failed) return arg;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              arg.setEnd(endPos());
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0) {
                SimpleReference nameRef=convert(name); 
            	  if (nameRef != null) {
            	    arg.setName(nameRef.getName());
            	    arg.setNameStart(nameRef.sourceStart());
            	    arg.setNameEnd(nameRef.sourceEnd());
            	  }
                if (t != null)
                  arg.setType(t);
                if (in != null)
                  arg.setInitializationExpression(in);
              }

        }
        return arg;
    }
    // $ANTLR end param


    // $ANTLR start methodBody
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:775:1: methodBody returns [Block bl = new Block();] : ( ( LC )=> (lc= LC (s= stmt )* rc= RC ) | eos );
    public final Block methodBody() throws RecognitionException {
        Block bl =  new Block();;

        Token lc=null;
        Token rc=null;
        Statement s = null;


        bl.setStart(startPos());
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:777:29: ( ( LC )=> (lc= LC (s= stmt )* rc= RC ) | eos )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==LC) && (synpred16())) {
                alt40=1;
            }
            else if ( (LA40_0==EOF||(LA40_0>=Abstract && LA40_0<=ReadOnly)||(LA40_0>=Public && LA40_0<=New)||(LA40_0>=AtId && LA40_0<=Id)||LA40_0==LB||LA40_0==RC||LA40_0==Semi||LA40_0==Pipe) ) {
                alt40=2;
            }
            else {
                if (backtracking>0) {failed=true; return bl;}
                NoViableAltException nvae =
                    new NoViableAltException("775:1: methodBody returns [Block bl = new Block();] : ( ( LC )=> (lc= LC (s= stmt )* rc= RC ) | eos );", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:778:2: ( LC )=> (lc= LC (s= stmt )* rc= RC )
                    {
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:779:2: (lc= LC (s= stmt )* rc= RC )
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:780:5: lc= LC (s= stmt )* rc= RC
                    {
                    lc=(Token)input.LT(1);
                    match(input,LC,FOLLOW_LC_in_methodBody3389); if (failed) return bl;
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:781:5: (s= stmt )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( ((LA39_0>=This && LA39_0<=If)||(LA39_0>=Return && LA39_0<=Try)||LA39_0==Switch||(LA39_0>=False && LA39_0<=True)||(LA39_0>=AtId && LA39_0<=LB)||LA39_0==LP||(LA39_0>=Pipe && LA39_0<=Sub)||(LA39_0>=Not && LA39_0<=Inv)||LA39_0==Pound) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:781:6: s= stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_methodBody3398);
                    	    s=stmt();
                    	    _fsp--;
                    	    if (failed) return bl;
                    	    if ( backtracking==0 ) {
                    	      bl.addStatement(s);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    rc=(Token)input.LT(1);
                    match(input,RC,FOLLOW_RC_in_methodBody3412); if (failed) return bl;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:783:7: eos
                    {
                    pushFollow(FOLLOW_eos_in_methodBody3420);
                    eos();
                    _fsp--;
                    if (failed) return bl;

                    }
                    break;

            }
            if ( backtracking==0 ) {
              bl.setEnd(endPos());
            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return bl;
    }
    // $ANTLR end methodBody


    // $ANTLR start ctorDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:785:1: ctorDef[List<FanFacetDeclaration> facets] returns [FanConstructorDeclaration decl] : name= Id LP (f= param ( ( Comma )=> Comma n= param )* )? RP (ch= ctorChain )? body= methodBody ;
    public final FanConstructorDeclaration ctorDef(List<FanFacetDeclaration> facets) throws RecognitionException {
        FanConstructorDeclaration decl = null;

        Token name=null;
        FanArgument f = null;

        FanArgument n = null;

        CallExpr ch = null;

        Block body = null;


        decl = new FanConstructorDeclaration("",0,0,0,0);
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:786:57: (name= Id LP (f= param ( ( Comma )=> Comma n= param )* )? RP (ch= ctorChain )? body= methodBody )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:787:2: name= Id LP (f= param ( ( Comma )=> Comma n= param )* )? RP (ch= ctorChain )? body= methodBody
            {
            name=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_ctorDef3441); if (failed) return decl;
            if ( backtracking==0 ) {
              SimpleReference nameRef=convert(name); 
              	  if (nameRef!=null){ 
              	    decl.setName(nameRef.getName());
              	    decl.setNameStart(nameRef.sourceStart());
              	    decl.setNameEnd(nameRef.sourceEnd());
                  }
                  if (facets != null)
                    factory.handleMethodFacets(decl, facets);
                
            }
            match(input,LP,FOLLOW_LP_in_ctorDef3449); if (failed) return decl;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:798:3: (f= param ( ( Comma )=> Comma n= param )* )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==Id||LA42_0==LB||LA42_0==Pipe) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:798:4: f= param ( ( Comma )=> Comma n= param )*
                    {
                    pushFollow(FOLLOW_param_in_ctorDef3456);
                    f=param();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      decl.addArgument(f);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:799:3: ( ( Comma )=> Comma n= param )*
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==Comma) && (synpred17())) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:799:4: ( Comma )=> Comma n= param
                    	    {
                    	    match(input,Comma,FOLLOW_Comma_in_ctorDef3468); if (failed) return decl;
                    	    pushFollow(FOLLOW_param_in_ctorDef3475);
                    	    n=param();
                    	    _fsp--;
                    	    if (failed) return decl;
                    	    if ( backtracking==0 ) {
                    	      decl.addArgument(n);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);


                    }
                    break;

            }

            match(input,RP,FOLLOW_RP_in_ctorDef3484); if (failed) return decl;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:802:3: (ch= ctorChain )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==Colon) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:802:4: ch= ctorChain
                    {
                    pushFollow(FOLLOW_ctorChain_in_ctorDef3491);
                    ch=ctorChain();
                    _fsp--;
                    if (failed) return decl;
                    if ( backtracking==0 ) {
                      decl.setCtorChain(ch);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_methodBody_in_ctorDef3501);
            body=methodBody();
            _fsp--;
            if (failed) return decl;
            if ( backtracking==0 ) {
              decl.acceptBody(body);
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return decl;
    }
    // $ANTLR end ctorDef


    // $ANTLR start ctorChain
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:806:1: ctorChain returns [CallExpr expr] : Colon (ex= ctorChainThis | ex= ctorChainSuper ) ;
    public final CallExpr ctorChain() throws RecognitionException {
        CallExpr expr = null;

        CallExpr ex = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:807:3: ( Colon (ex= ctorChainThis | ex= ctorChainSuper ) )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:808:3: Colon (ex= ctorChainThis | ex= ctorChainSuper )
            {
            match(input,Colon,FOLLOW_Colon_in_ctorChain3520); if (failed) return expr;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:808:9: (ex= ctorChainThis | ex= ctorChainSuper )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==This) ) {
                alt44=1;
            }
            else if ( (LA44_0==Super) ) {
                alt44=2;
            }
            else {
                if (backtracking>0) {failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("808:9: (ex= ctorChainThis | ex= ctorChainSuper )", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:808:10: ex= ctorChainThis
                    {
                    pushFollow(FOLLOW_ctorChainThis_in_ctorChain3525);
                    ex=ctorChainThis();
                    _fsp--;
                    if (failed) return expr;

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:808:29: ex= ctorChainSuper
                    {
                    pushFollow(FOLLOW_ctorChainSuper_in_ctorChain3531);
                    ex=ctorChainSuper();
                    _fsp--;
                    if (failed) return expr;

                    }
                    break;

            }

            if ( backtracking==0 ) {
              expr=ex;
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return expr;
    }
    // $ANTLR end ctorChain


    // $ANTLR start ctorChainThis
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:811:1: ctorChainThis returns [CallExpr expr] : thref= thisRef Dot name= simpleRef list= args ;
    public final CallExpr ctorChainThis() throws RecognitionException {
        CallExpr expr = null;

        ThisReference thref = null;

        SimpleReference name = null;

        CallArgumentsList list = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:812:3: (thref= thisRef Dot name= simpleRef list= args )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:813:3: thref= thisRef Dot name= simpleRef list= args
            {
            pushFollow(FOLLOW_thisRef_in_ctorChainThis3553);
            thref=thisRef();
            _fsp--;
            if (failed) return expr;
            match(input,Dot,FOLLOW_Dot_in_ctorChainThis3557); if (failed) return expr;
            pushFollow(FOLLOW_simpleRef_in_ctorChainThis3563);
            name=simpleRef();
            _fsp--;
            if (failed) return expr;
            pushFollow(FOLLOW_args_in_ctorChainThis3569);
            list=args();
            _fsp--;
            if (failed) return expr;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0) {
                Expression ex = factory.handleIdAccess(thref,name,null);
                expr = (CallExpr)factory.handleCallArgs(ex,list,null);
              }

        }
        return expr;
    }
    // $ANTLR end ctorChainThis


    // $ANTLR start ctorChainSuper
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:825:1: ctorChainSuper returns [CallExpr expr] : sref= superRef ( Dot name= simpleRef )? list= args ;
    public final CallExpr ctorChainSuper() throws RecognitionException {
        CallExpr expr = null;

        SuperReference sref = null;

        SimpleReference name = null;

        CallArgumentsList list = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:826:3: (sref= superRef ( Dot name= simpleRef )? list= args )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:827:3: sref= superRef ( Dot name= simpleRef )? list= args
            {
            pushFollow(FOLLOW_superRef_in_ctorChainSuper3592);
            sref=superRef();
            _fsp--;
            if (failed) return expr;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:828:3: ( Dot name= simpleRef )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==Dot) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:828:4: Dot name= simpleRef
                    {
                    match(input,Dot,FOLLOW_Dot_in_ctorChainSuper3597); if (failed) return expr;
                    pushFollow(FOLLOW_simpleRef_in_ctorChainSuper3601);
                    name=simpleRef();
                    _fsp--;
                    if (failed) return expr;

                    }
                    break;

            }

            pushFollow(FOLLOW_args_in_ctorChainSuper3609);
            list=args();
            _fsp--;
            if (failed) return expr;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0) {
                Expression ex = null;
                if (name != null)
                  ex = factory.handleIdAccess(sref,name,null);
                else
                  ex = sref;
                expr = (CallExpr)factory.handleCallArgs(ex,list,null);
              }

        }
        return expr;
    }
    // $ANTLR end ctorChainSuper


    // $ANTLR start args
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:842:1: args returns [CallArgumentsList list] : lp= LP (f= expr ( Comma n= expr )* )? rp= RP ;
    public final CallArgumentsList args() throws RecognitionException {
        CallArgumentsList list = null;

        Token lp=null;
        Token rp=null;
        Expression f = null;

        Expression n = null;



          List<Expression> args = new ArrayList<Expression>();

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:846:1: (lp= LP (f= expr ( Comma n= expr )* )? rp= RP )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:847:3: lp= LP (f= expr ( Comma n= expr )* )? rp= RP
            {
            lp=(Token)input.LT(1);
            match(input,LP,FOLLOW_LP_in_args3634); if (failed) return list;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:848:3: (f= expr ( Comma n= expr )* )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( ((LA47_0>=This && LA47_0<=Null)||(LA47_0>=False && LA47_0<=True)||(LA47_0>=AtId && LA47_0<=LB)||LA47_0==LP||(LA47_0>=Pipe && LA47_0<=Sub)||(LA47_0>=Not && LA47_0<=Inv)||LA47_0==Pound) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:848:5: f= expr ( Comma n= expr )*
                    {
                    pushFollow(FOLLOW_expr_in_args3643);
                    f=expr();
                    _fsp--;
                    if (failed) return list;
                    if ( backtracking==0 ) {
                      args.add(f);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:849:5: ( Comma n= expr )*
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( (LA46_0==Comma) ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:849:7: Comma n= expr
                    	    {
                    	    match(input,Comma,FOLLOW_Comma_in_args3653); if (failed) return list;
                    	    pushFollow(FOLLOW_expr_in_args3664);
                    	    n=expr();
                    	    _fsp--;
                    	    if (failed) return list;
                    	    if ( backtracking==0 ) {
                    	      args.add(n);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop46;
                        }
                    } while (true);


                    }
                    break;

            }

            rp=(Token)input.LT(1);
            match(input,RP,FOLLOW_RP_in_args3685); if (failed) return list;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) {
                list = factory.makeCallArgs(lp, args, rp);
              }

        }
        return list;
    }
    // $ANTLR end args


    // $ANTLR start block
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:864:1: block returns [Block stmt] : lc= LC list= stmts rc= RC ;
    public final Block block() throws RecognitionException {
        Block stmt = null;

        Token lc=null;
        Token rc=null;
        StmtList list = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:865:3: (lc= LC list= stmts rc= RC )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:866:3: lc= LC list= stmts rc= RC
            {
            lc=(Token)input.LT(1);
            match(input,LC,FOLLOW_LC_in_block3713); if (failed) return stmt;
            pushFollow(FOLLOW_stmts_in_block3720);
            list=stmts();
            _fsp--;
            if (failed) return stmt;
            rc=(Token)input.LT(1);
            match(input,RC,FOLLOW_RC_in_block3726); if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeBlock(lc,list,rc);

        }
        return stmt;
    }
    // $ANTLR end block


    // $ANTLR start blockOrSingleStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:874:1: blockOrSingleStmt returns [Statement stmt] : ( ( LC )=>bl= block | single= stmt );
    public final Statement blockOrSingleStmt() throws RecognitionException {
        Statement stmt = null;

        Block bl = null;

        Statement single = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:874:43: ( ( LC )=>bl= block | single= stmt )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==LC) && (synpred18())) {
                alt48=1;
            }
            else if ( ((LA48_0>=This && LA48_0<=If)||(LA48_0>=Return && LA48_0<=Try)||LA48_0==Switch||(LA48_0>=False && LA48_0<=True)||(LA48_0>=AtId && LA48_0<=LB)||LA48_0==LP||(LA48_0>=Pipe && LA48_0<=Sub)||(LA48_0>=Not && LA48_0<=Inv)||LA48_0==Pound) ) {
                alt48=2;
            }
            else {
                if (backtracking>0) {failed=true; return stmt;}
                NoViableAltException nvae =
                    new NoViableAltException("874:1: blockOrSingleStmt returns [Statement stmt] : ( ( LC )=>bl= block | single= stmt );", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:875:5: ( LC )=>bl= block
                    {
                    pushFollow(FOLLOW_block_in_blockOrSingleStmt3758);
                    bl=block();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt = bl;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:876:5: single= stmt
                    {
                    pushFollow(FOLLOW_stmt_in_blockOrSingleStmt3768);
                    single=stmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt = single;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return stmt;
    }
    // $ANTLR end blockOrSingleStmt


    // $ANTLR start stmts
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:879:1: stmts returns [StmtList stmt] : (s= stmt )* ;
    public final StmtList stmts() throws RecognitionException {
        StmtList stmt = null;

        Statement s = null;



        List<Statement> list = new ArrayList<Statement>();

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:882:3: ( (s= stmt )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:883:3: (s= stmt )*
            {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:883:3: (s= stmt )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( ((LA49_0>=This && LA49_0<=If)||(LA49_0>=Return && LA49_0<=Try)||LA49_0==Switch||(LA49_0>=False && LA49_0<=True)||(LA49_0>=AtId && LA49_0<=LB)||LA49_0==LP||(LA49_0>=Pipe && LA49_0<=Sub)||(LA49_0>=Not && LA49_0<=Inv)||LA49_0==Pound) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:884:5: s= stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_stmts3799);
            	    s=stmt();
            	    _fsp--;
            	    if (failed) return stmt;
            	    if ( backtracking==0 ) {
            	      list.add(s);
            	    }

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeStmtList(list);

        }
        return stmt;
    }
    // $ANTLR end stmts


    // $ANTLR start stmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:891:1: stmt returns [Statement stmt] : ( ( 'break' )=>brs= breakStmt | ( 'continue' )=>cos= continueStmt | ( 'for' )=>fos= forStmt | ( 'if' )=>ifs= ifStmt | ( 'return' )=>res= returnStmt | ( 'switch' )=>sws= switchStmt | ( 'throw' )=>ths= throwStmt | ( 'while' )=>whs= whileStmt | ( 'try' )=>trs= tryStmt | les= locOrExprStmt );
    public final Statement stmt() throws RecognitionException {
        Statement stmt = null;

        BreakStmt brs = null;

        ContinueStmt cos = null;

        ForStmt fos = null;

        IfStmt ifs = null;

        ReturnStmt res = null;

        SwitchStmt sws = null;

        ThrowStmt ths = null;

        WhileStmt whs = null;

        TryStmt trs = null;

        Statement les = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:892:3: ( ( 'break' )=>brs= breakStmt | ( 'continue' )=>cos= continueStmt | ( 'for' )=>fos= forStmt | ( 'if' )=>ifs= ifStmt | ( 'return' )=>res= returnStmt | ( 'switch' )=>sws= switchStmt | ( 'throw' )=>ths= throwStmt | ( 'while' )=>whs= whileStmt | ( 'try' )=>trs= tryStmt | les= locOrExprStmt )
            int alt50=10;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==Break) && (synpred19())) {
                alt50=1;
            }
            else if ( (LA50_0==Continue) && (synpred20())) {
                alt50=2;
            }
            else if ( (LA50_0==For) && (synpred21())) {
                alt50=3;
            }
            else if ( (LA50_0==If) && (synpred22())) {
                alt50=4;
            }
            else if ( (LA50_0==Return) && (synpred23())) {
                alt50=5;
            }
            else if ( (LA50_0==Switch) && (synpred24())) {
                alt50=6;
            }
            else if ( (LA50_0==Throw) && (synpred25())) {
                alt50=7;
            }
            else if ( (LA50_0==While) && (synpred26())) {
                alt50=8;
            }
            else if ( (LA50_0==Try) && (synpred27())) {
                alt50=9;
            }
            else if ( ((LA50_0>=This && LA50_0<=Null)||(LA50_0>=False && LA50_0<=True)||(LA50_0>=AtId && LA50_0<=LB)||LA50_0==LP||(LA50_0>=Pipe && LA50_0<=Sub)||(LA50_0>=Not && LA50_0<=Inv)||LA50_0==Pound) ) {
                alt50=10;
            }
            else {
                if (backtracking>0) {failed=true; return stmt;}
                NoViableAltException nvae =
                    new NoViableAltException("891:1: stmt returns [Statement stmt] : ( ( 'break' )=>brs= breakStmt | ( 'continue' )=>cos= continueStmt | ( 'for' )=>fos= forStmt | ( 'if' )=>ifs= ifStmt | ( 'return' )=>res= returnStmt | ( 'switch' )=>sws= switchStmt | ( 'throw' )=>ths= throwStmt | ( 'while' )=>whs= whileStmt | ( 'try' )=>trs= tryStmt | les= locOrExprStmt );", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:893:5: ( 'break' )=>brs= breakStmt
                    {
                    pushFollow(FOLLOW_breakStmt_in_stmt3844);
                    brs=breakStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=brs;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:895:5: ( 'continue' )=>cos= continueStmt
                    {
                    pushFollow(FOLLOW_continueStmt_in_stmt3867);
                    cos=continueStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=cos;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:897:5: ( 'for' )=>fos= forStmt
                    {
                    pushFollow(FOLLOW_forStmt_in_stmt3887);
                    fos=forStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=fos;
                    }

                    }
                    break;
                case 4 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:899:5: ( 'if' )=>ifs= ifStmt
                    {
                    pushFollow(FOLLOW_ifStmt_in_stmt3912);
                    ifs=ifStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=ifs;
                    }

                    }
                    break;
                case 5 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:901:5: ( 'return' )=>res= returnStmt
                    {
                    pushFollow(FOLLOW_returnStmt_in_stmt3938);
                    res=returnStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=res;
                    }

                    }
                    break;
                case 6 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:903:5: ( 'switch' )=>sws= switchStmt
                    {
                    pushFollow(FOLLOW_switchStmt_in_stmt3960);
                    sws=switchStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=sws;
                    }

                    }
                    break;
                case 7 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:905:5: ( 'throw' )=>ths= throwStmt
                    {
                    pushFollow(FOLLOW_throwStmt_in_stmt3982);
                    ths=throwStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=ths;
                    }

                    }
                    break;
                case 8 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:907:5: ( 'while' )=>whs= whileStmt
                    {
                    pushFollow(FOLLOW_whileStmt_in_stmt4005);
                    whs=whileStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=whs;
                    }

                    }
                    break;
                case 9 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:909:5: ( 'try' )=>trs= tryStmt
                    {
                    pushFollow(FOLLOW_tryStmt_in_stmt4028);
                    trs=tryStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=trs;
                    }

                    }
                    break;
                case 10 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:911:5: les= locOrExprStmt
                    {
                    pushFollow(FOLLOW_locOrExprStmt_in_stmt4044);
                    les=locOrExprStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=les;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return stmt;
    }
    // $ANTLR end stmt


    // $ANTLR start locOrExprStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:914:1: locOrExprStmt returns [Statement stmt] options {backtrack=true; } : ( ( Id Define )=>s1= inferredTypedLocalDefStmt | ( ctype Id Define )=>s2= localDefStmt | s3= exprStmt );
    public final Statement locOrExprStmt() throws RecognitionException {
        Statement stmt = null;

        ExpressionStmt s1 = null;

        ExpressionStmt s2 = null;

        ExpressionStmt s3 = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:914:70: ( ( Id Define )=>s1= inferredTypedLocalDefStmt | ( ctype Id Define )=>s2= localDefStmt | s3= exprStmt )
            int alt51=3;
            switch ( input.LA(1) ) {
            case Id:
                {
                int LA51_1 = input.LA(2);

                if ( (synpred28()) ) {
                    alt51=1;
                }
                else if ( (synpred29()) ) {
                    alt51=2;
                }
                else if ( (true) ) {
                    alt51=3;
                }
                else {
                    if (backtracking>0) {failed=true; return stmt;}
                    NoViableAltException nvae =
                        new NoViableAltException("914:1: locOrExprStmt returns [Statement stmt] options {backtrack=true; } : ( ( Id Define )=>s1= inferredTypedLocalDefStmt | ( ctype Id Define )=>s2= localDefStmt | s3= exprStmt );", 51, 1, input);

                    throw nvae;
                }
                }
                break;
            case LB:
                {
                int LA51_2 = input.LA(2);

                if ( (synpred29()) ) {
                    alt51=2;
                }
                else if ( (true) ) {
                    alt51=3;
                }
                else {
                    if (backtracking>0) {failed=true; return stmt;}
                    NoViableAltException nvae =
                        new NoViableAltException("914:1: locOrExprStmt returns [Statement stmt] options {backtrack=true; } : ( ( Id Define )=>s1= inferredTypedLocalDefStmt | ( ctype Id Define )=>s2= localDefStmt | s3= exprStmt );", 51, 2, input);

                    throw nvae;
                }
                }
                break;
            case Pipe:
                {
                int LA51_3 = input.LA(2);

                if ( (synpred29()) ) {
                    alt51=2;
                }
                else if ( (true) ) {
                    alt51=3;
                }
                else {
                    if (backtracking>0) {failed=true; return stmt;}
                    NoViableAltException nvae =
                        new NoViableAltException("914:1: locOrExprStmt returns [Statement stmt] options {backtrack=true; } : ( ( Id Define )=>s1= inferredTypedLocalDefStmt | ( ctype Id Define )=>s2= localDefStmt | s3= exprStmt );", 51, 3, input);

                    throw nvae;
                }
                }
                break;
            case This:
            case Super:
            case It:
            case Null:
            case False:
            case True:
            case AtId:
            case Number:
            case String:
            case Uri:
            case Dsl:
            case LP:
            case BAnd:
            case Incr:
            case Decr:
            case Add:
            case Sub:
            case Not:
            case Inv:
            case Pound:
                {
                alt51=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return stmt;}
                NoViableAltException nvae =
                    new NoViableAltException("914:1: locOrExprStmt returns [Statement stmt] options {backtrack=true; } : ( ( Id Define )=>s1= inferredTypedLocalDefStmt | ( ctype Id Define )=>s2= localDefStmt | s3= exprStmt );", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:915:5: ( Id Define )=>s1= inferredTypedLocalDefStmt
                    {
                    pushFollow(FOLLOW_inferredTypedLocalDefStmt_in_locOrExprStmt4084);
                    s1=inferredTypedLocalDefStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=s1;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:916:5: ( ctype Id Define )=>s2= localDefStmt
                    {
                    pushFollow(FOLLOW_localDefStmt_in_locOrExprStmt4101);
                    s2=localDefStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=s2;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:917:5: s3= exprStmt
                    {
                    pushFollow(FOLLOW_exprStmt_in_locOrExprStmt4110);
                    s3=exprStmt();
                    _fsp--;
                    if (failed) return stmt;
                    if ( backtracking==0 ) {
                      stmt=s3;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return stmt;
    }
    // $ANTLR end locOrExprStmt


    // $ANTLR start localDefStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:920:1: localDefStmt returns [ExpressionStmt stmt = new ExpressionStmt()] : d= localDef eos ;
    public final ExpressionStmt localDefStmt() throws RecognitionException {
        ExpressionStmt stmt =  new ExpressionStmt();

        LocalVariableDef d = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:920:66: (d= localDef eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:921:2: d= localDef eos
            {
            pushFollow(FOLLOW_localDef_in_localDefStmt4128);
            d=localDef();
            _fsp--;
            if (failed) return stmt;
            if ( backtracking==0 ) {
              stmt.setExpression(d); 
              	stmt.setStart(d.sourceStart());
              	stmt.setEnd(d.sourceEnd());
            }
            pushFollow(FOLLOW_eos_in_localDefStmt4133);
            eos();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return stmt;
    }
    // $ANTLR end localDefStmt


    // $ANTLR start inferredTypedLocalDefStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:927:1: inferredTypedLocalDefStmt returns [ExpressionStmt stmt = new ExpressionStmt()] : d= inferredTypedLocalDef eos ;
    public final ExpressionStmt inferredTypedLocalDefStmt() throws RecognitionException {
        ExpressionStmt stmt =  new ExpressionStmt();

        LocalVariableDef d = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:927:79: (d= inferredTypedLocalDef eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:928:2: d= inferredTypedLocalDef eos
            {
            pushFollow(FOLLOW_inferredTypedLocalDef_in_inferredTypedLocalDefStmt4148);
            d=inferredTypedLocalDef();
            _fsp--;
            if (failed) return stmt;
            if ( backtracking==0 ) {
              stmt.setExpression(d); 
              	stmt.setStart(d.sourceStart());
              	stmt.setEnd(d.sourceEnd());
            }
            pushFollow(FOLLOW_eos_in_inferredTypedLocalDefStmt4153);
            eos();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return stmt;
    }
    // $ANTLR end inferredTypedLocalDefStmt


    // $ANTLR start locOrExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:934:1: locOrExpr returns [Expression s] options {backtrack=true; } : (s1= localDef | s2= inferredTypedLocalDef | s3= expr );
    public final Expression locOrExpr() throws RecognitionException {
        Expression s = null;

        LocalVariableDef s1 = null;

        LocalVariableDef s2 = null;

        Expression s3 = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:934:63: (s1= localDef | s2= inferredTypedLocalDef | s3= expr )
            int alt52=3;
            switch ( input.LA(1) ) {
            case Id:
                {
                int LA52_1 = input.LA(2);

                if ( (synpred30()) ) {
                    alt52=1;
                }
                else if ( (synpred31()) ) {
                    alt52=2;
                }
                else if ( (true) ) {
                    alt52=3;
                }
                else {
                    if (backtracking>0) {failed=true; return s;}
                    NoViableAltException nvae =
                        new NoViableAltException("934:1: locOrExpr returns [Expression s] options {backtrack=true; } : (s1= localDef | s2= inferredTypedLocalDef | s3= expr );", 52, 1, input);

                    throw nvae;
                }
                }
                break;
            case LB:
                {
                int LA52_2 = input.LA(2);

                if ( (synpred30()) ) {
                    alt52=1;
                }
                else if ( (true) ) {
                    alt52=3;
                }
                else {
                    if (backtracking>0) {failed=true; return s;}
                    NoViableAltException nvae =
                        new NoViableAltException("934:1: locOrExpr returns [Expression s] options {backtrack=true; } : (s1= localDef | s2= inferredTypedLocalDef | s3= expr );", 52, 2, input);

                    throw nvae;
                }
                }
                break;
            case Pipe:
                {
                int LA52_3 = input.LA(2);

                if ( (synpred30()) ) {
                    alt52=1;
                }
                else if ( (true) ) {
                    alt52=3;
                }
                else {
                    if (backtracking>0) {failed=true; return s;}
                    NoViableAltException nvae =
                        new NoViableAltException("934:1: locOrExpr returns [Expression s] options {backtrack=true; } : (s1= localDef | s2= inferredTypedLocalDef | s3= expr );", 52, 3, input);

                    throw nvae;
                }
                }
                break;
            case This:
            case Super:
            case It:
            case Null:
            case False:
            case True:
            case AtId:
            case Number:
            case String:
            case Uri:
            case Dsl:
            case LP:
            case BAnd:
            case Incr:
            case Decr:
            case Add:
            case Sub:
            case Not:
            case Inv:
            case Pound:
                {
                alt52=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return s;}
                NoViableAltException nvae =
                    new NoViableAltException("934:1: locOrExpr returns [Expression s] options {backtrack=true; } : (s1= localDef | s2= inferredTypedLocalDef | s3= expr );", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:935:5: s1= localDef
                    {
                    pushFollow(FOLLOW_localDef_in_locOrExpr4182);
                    s1=localDef();
                    _fsp--;
                    if (failed) return s;
                    if ( backtracking==0 ) {
                      s=s1;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:936:5: s2= inferredTypedLocalDef
                    {
                    pushFollow(FOLLOW_inferredTypedLocalDef_in_locOrExpr4191);
                    s2=inferredTypedLocalDef();
                    _fsp--;
                    if (failed) return s;
                    if ( backtracking==0 ) {
                      s=s2;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:937:5: s3= expr
                    {
                    pushFollow(FOLLOW_expr_in_locOrExpr4200);
                    s3=expr();
                    _fsp--;
                    if (failed) return s;
                    if ( backtracking==0 ) {
                      s=s3;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return s;
    }
    // $ANTLR end locOrExpr


    // $ANTLR start localDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:940:1: localDef returns [LocalVariableDef def = new LocalVariableDef()] : t= ctype name= Id ( Define in= expr )? ;
    public final LocalVariableDef localDef() throws RecognitionException {
        LocalVariableDef def =  new LocalVariableDef();

        Token name=null;
        FanTypeRef t = null;

        Expression in = null;


        def.setStart(startPos());
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:942:30: (t= ctype name= Id ( Define in= expr )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:943:2: t= ctype name= Id ( Define in= expr )?
            {
            pushFollow(FOLLOW_ctype_in_localDef4224);
            t=ctype();
            _fsp--;
            if (failed) return def;
            if ( backtracking==0 ) {
              def.setType(t);
            }
            name=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_localDef4231); if (failed) return def;
            if ( backtracking==0 ) {
              def.setName(convert(name));
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:945:2: ( Define in= expr )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==Define) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:945:3: Define in= expr
                    {
                    match(input,Define,FOLLOW_Define_in_localDef4237); if (failed) return def;
                    pushFollow(FOLLOW_expr_in_localDef4241);
                    in=expr();
                    _fsp--;
                    if (failed) return def;
                    if ( backtracking==0 ) {
                      def.setInitializer(in);
                    }

                    }
                    break;

            }


            }

            if ( backtracking==0 ) {
              def.setEnd(endPos());
            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return def;
    }
    // $ANTLR end localDef


    // $ANTLR start inferredTypedLocalDef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:948:1: inferredTypedLocalDef returns [LocalVariableDef def = new LocalVariableDef()] : name= Id Define in= expr ;
    public final LocalVariableDef inferredTypedLocalDef() throws RecognitionException {
        LocalVariableDef def =  new LocalVariableDef();

        Token name=null;
        Expression in = null;


        def.setStart(startPos());
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:950:30: (name= Id Define in= expr )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:951:2: name= Id Define in= expr
            {
            name=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_inferredTypedLocalDef4268); if (failed) return def;
            if ( backtracking==0 ) {
              def.setName(convert(name));
            }
            match(input,Define,FOLLOW_Define_in_inferredTypedLocalDef4273); if (failed) return def;
            pushFollow(FOLLOW_expr_in_inferredTypedLocalDef4279);
            in=expr();
            _fsp--;
            if (failed) return def;
            if ( backtracking==0 ) {
              def.setInitializer(in);
            }

            }

            if ( backtracking==0 ) {
              def.setEnd(endPos());
            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return def;
    }
    // $ANTLR end inferredTypedLocalDef


    // $ANTLR start breakStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:956:1: breakStmt returns [BreakStmt stmt] : breakKw= 'break' semi= eos ;
    public final BreakStmt breakStmt() throws RecognitionException {
        BreakStmt stmt = null;

        Token breakKw=null;
        Token semi = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:957:3: (breakKw= 'break' semi= eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:958:3: breakKw= 'break' semi= eos
            {
            breakKw=(Token)input.LT(1);
            match(input,Break,FOLLOW_Break_in_breakStmt4300); if (failed) return stmt;
            pushFollow(FOLLOW_eos_in_breakStmt4306);
            semi=eos();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeBreakStmt(breakKw,semi);

        }
        return stmt;
    }
    // $ANTLR end breakStmt


    // $ANTLR start continueStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:965:1: continueStmt returns [ContinueStmt stmt] : continueKw= 'continue' semi= eos ;
    public final ContinueStmt continueStmt() throws RecognitionException {
        ContinueStmt stmt = null;

        Token continueKw=null;
        Token semi = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:966:3: (continueKw= 'continue' semi= eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:967:3: continueKw= 'continue' semi= eos
            {
            continueKw=(Token)input.LT(1);
            match(input,Continue,FOLLOW_Continue_in_continueStmt4331); if (failed) return stmt;
            pushFollow(FOLLOW_eos_in_continueStmt4337);
            semi=eos();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeContinueStmt(continueKw,semi);

        }
        return stmt;
    }
    // $ANTLR end continueStmt


    // $ANTLR start forStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:974:1: forStmt returns [ForStmt stmt] : forKw= 'for' lp= LP init= forInit ( Semi )=>semi1= Semi (cond= expr )? ( Semi )=>semi2= Semi (incr= expr )? rp= RP body= blockOrSingleStmt ;
    public final ForStmt forStmt() throws RecognitionException {
        ForStmt stmt = null;

        Token forKw=null;
        Token lp=null;
        Token semi1=null;
        Token semi2=null;
        Token rp=null;
        Expression init = null;

        Expression cond = null;

        Expression incr = null;

        Statement body = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:975:3: (forKw= 'for' lp= LP init= forInit ( Semi )=>semi1= Semi (cond= expr )? ( Semi )=>semi2= Semi (incr= expr )? rp= RP body= blockOrSingleStmt )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:976:3: forKw= 'for' lp= LP init= forInit ( Semi )=>semi1= Semi (cond= expr )? ( Semi )=>semi2= Semi (incr= expr )? rp= RP body= blockOrSingleStmt
            {
            forKw=(Token)input.LT(1);
            match(input,For,FOLLOW_For_in_forStmt4362); if (failed) return stmt;
            lp=(Token)input.LT(1);
            match(input,LP,FOLLOW_LP_in_forStmt4368); if (failed) return stmt;
            pushFollow(FOLLOW_forInit_in_forStmt4374);
            init=forInit();
            _fsp--;
            if (failed) return stmt;
            semi1=(Token)input.LT(1);
            match(input,Semi,FOLLOW_Semi_in_forStmt4387); if (failed) return stmt;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:981:7: (cond= expr )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=This && LA54_0<=Null)||(LA54_0>=False && LA54_0<=True)||(LA54_0>=AtId && LA54_0<=LB)||LA54_0==LP||(LA54_0>=Pipe && LA54_0<=Sub)||(LA54_0>=Not && LA54_0<=Inv)||LA54_0==Pound) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:981:7: cond= expr
                    {
                    pushFollow(FOLLOW_expr_in_forStmt4393);
                    cond=expr();
                    _fsp--;
                    if (failed) return stmt;

                    }
                    break;

            }

            semi2=(Token)input.LT(1);
            match(input,Semi,FOLLOW_Semi_in_forStmt4407); if (failed) return stmt;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:984:7: (incr= expr )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( ((LA55_0>=This && LA55_0<=Null)||(LA55_0>=False && LA55_0<=True)||(LA55_0>=AtId && LA55_0<=LB)||LA55_0==LP||(LA55_0>=Pipe && LA55_0<=Sub)||(LA55_0>=Not && LA55_0<=Inv)||LA55_0==Pound) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:984:7: incr= expr
                    {
                    pushFollow(FOLLOW_expr_in_forStmt4413);
                    incr=expr();
                    _fsp--;
                    if (failed) return stmt;

                    }
                    break;

            }

            rp=(Token)input.LT(1);
            match(input,RP,FOLLOW_RP_in_forStmt4420); if (failed) return stmt;
            pushFollow(FOLLOW_blockOrSingleStmt_in_forStmt4426);
            body=blockOrSingleStmt();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeForStmt(forKw,lp,init,semi1,cond,semi2,incr,rp,body);

        }
        return stmt;
    }
    // $ANTLR end forStmt


    // $ANTLR start forInit
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:991:1: forInit returns [Expression expr] : (e= locOrExpr )? ;
    public final Expression forInit() throws RecognitionException {
        Expression expr = null;

        Expression e = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:991:34: ( (e= locOrExpr )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:992:3: (e= locOrExpr )?
            {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:992:3: (e= locOrExpr )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( ((LA56_0>=This && LA56_0<=Null)||(LA56_0>=False && LA56_0<=True)||(LA56_0>=AtId && LA56_0<=LB)||LA56_0==LP||(LA56_0>=Pipe && LA56_0<=Sub)||(LA56_0>=Not && LA56_0<=Inv)||LA56_0==Pound) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:992:4: e= locOrExpr
                    {
                    pushFollow(FOLLOW_locOrExpr_in_forInit4448);
                    e=locOrExpr();
                    _fsp--;
                    if (failed) return expr;
                    if ( backtracking==0 ) {
                      expr = e;
                    }

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return expr;
    }
    // $ANTLR end forInit


    // $ANTLR start ifStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:995:1: ifStmt returns [IfStmt stmt] : ifKw= 'if' lp= LP cond= expr rp= RP thenBody= blockOrSingleStmt ( ( 'else' )=>elseKw= 'else' elseBody= blockOrSingleStmt )? ;
    public final IfStmt ifStmt() throws RecognitionException {
        IfStmt stmt = null;

        Token ifKw=null;
        Token lp=null;
        Token rp=null;
        Token elseKw=null;
        Expression cond = null;

        Statement thenBody = null;

        Statement elseBody = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:996:3: (ifKw= 'if' lp= LP cond= expr rp= RP thenBody= blockOrSingleStmt ( ( 'else' )=>elseKw= 'else' elseBody= blockOrSingleStmt )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:997:3: ifKw= 'if' lp= LP cond= expr rp= RP thenBody= blockOrSingleStmt ( ( 'else' )=>elseKw= 'else' elseBody= blockOrSingleStmt )?
            {
            ifKw=(Token)input.LT(1);
            match(input,If,FOLLOW_If_in_ifStmt4473); if (failed) return stmt;
            lp=(Token)input.LT(1);
            match(input,LP,FOLLOW_LP_in_ifStmt4479); if (failed) return stmt;
            pushFollow(FOLLOW_expr_in_ifStmt4485);
            cond=expr();
            _fsp--;
            if (failed) return stmt;
            rp=(Token)input.LT(1);
            match(input,RP,FOLLOW_RP_in_ifStmt4491); if (failed) return stmt;
            pushFollow(FOLLOW_blockOrSingleStmt_in_ifStmt4497);
            thenBody=blockOrSingleStmt();
            _fsp--;
            if (failed) return stmt;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1002:3: ( ( 'else' )=>elseKw= 'else' elseBody= blockOrSingleStmt )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Else) ) {
                int LA57_1 = input.LA(2);

                if ( (synpred34()) ) {
                    alt57=1;
                }
            }
            switch (alt57) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1002:4: ( 'else' )=>elseKw= 'else' elseBody= blockOrSingleStmt
                    {
                    elseKw=(Token)input.LT(1);
                    match(input,Else,FOLLOW_Else_in_ifStmt4513); if (failed) return stmt;
                    pushFollow(FOLLOW_blockOrSingleStmt_in_ifStmt4521);
                    elseBody=blockOrSingleStmt();
                    _fsp--;
                    if (failed) return stmt;

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeIfStmt(ifKw,lp,cond,rp,thenBody,elseKw,elseBody);

        }
        return stmt;
    }
    // $ANTLR end ifStmt


    // $ANTLR start returnStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1011:1: returnStmt returns [ReturnStmt stmt] : returnKw= 'return' ( ( eos )=> | returned= expr )? semic= eos ;
    public final ReturnStmt returnStmt() throws RecognitionException {
        ReturnStmt stmt = null;

        Token returnKw=null;
        Expression returned = null;

        Token semic = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1012:3: (returnKw= 'return' ( ( eos )=> | returned= expr )? semic= eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1013:3: returnKw= 'return' ( ( eos )=> | returned= expr )? semic= eos
            {
            returnKw=(Token)input.LT(1);
            match(input,Return,FOLLOW_Return_in_returnStmt4551); if (failed) return stmt;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1014:3: ( ( eos )=> | returned= expr )?
            int alt58=3;
            switch ( input.LA(1) ) {
                case EOF:
                    {
                    int LA58_1 = input.LA(2);

                    if ( (synpred35()) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Semi:
                    {
                    int LA58_2 = input.LA(2);

                    if ( (synpred35()) ) {
                        alt58=1;
                    }
                    }
                    break;
                case RC:
                    {
                    int LA58_3 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Break:
                    {
                    int LA58_4 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Continue:
                    {
                    int LA58_5 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case For:
                    {
                    int LA58_6 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case If:
                    {
                    int LA58_7 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Return:
                    {
                    int LA58_8 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Switch:
                    {
                    int LA58_9 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Throw:
                    {
                    int LA58_10 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case While:
                    {
                    int LA58_11 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Try:
                    {
                    int LA58_12 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Id:
                    {
                    int LA58_13 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case LB:
                    {
                    int LA58_14 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Pipe:
                    {
                    int LA58_15 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Add:
                    {
                    int LA58_16 = input.LA(2);

                    if ( ((LA58_16>=This && LA58_16<=Null)||(LA58_16>=False && LA58_16<=True)||(LA58_16>=AtId && LA58_16<=LB)||LA58_16==LP||(LA58_16>=Pipe && LA58_16<=Sub)||(LA58_16>=Not && LA58_16<=Inv)||LA58_16==Pound) ) {
                        alt58=2;
                    }
                    else if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Sub:
                    {
                    int LA58_17 = input.LA(2);

                    if ( ((LA58_17>=This && LA58_17<=Null)||(LA58_17>=False && LA58_17<=True)||(LA58_17>=AtId && LA58_17<=LB)||LA58_17==LP||(LA58_17>=Pipe && LA58_17<=Sub)||(LA58_17>=Not && LA58_17<=Inv)||LA58_17==Pound) ) {
                        alt58=2;
                    }
                    else if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Incr:
                    {
                    int LA58_18 = input.LA(2);

                    if ( ((LA58_18>=This && LA58_18<=Null)||(LA58_18>=False && LA58_18<=True)||(LA58_18>=AtId && LA58_18<=LB)||LA58_18==LP||(LA58_18>=Pipe && LA58_18<=Sub)||(LA58_18>=Not && LA58_18<=Inv)||LA58_18==Pound) ) {
                        alt58=2;
                    }
                    else if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Decr:
                    {
                    int LA58_19 = input.LA(2);

                    if ( ((LA58_19>=This && LA58_19<=Null)||(LA58_19>=False && LA58_19<=True)||(LA58_19>=AtId && LA58_19<=LB)||LA58_19==LP||(LA58_19>=Pipe && LA58_19<=Sub)||(LA58_19>=Not && LA58_19<=Inv)||LA58_19==Pound) ) {
                        alt58=2;
                    }
                    else if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Inv:
                    {
                    int LA58_20 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Not:
                    {
                    int LA58_21 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case BAnd:
                    {
                    int LA58_22 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case LP:
                    {
                    int LA58_23 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Number:
                    {
                    int LA58_24 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case String:
                    {
                    int LA58_25 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Uri:
                    {
                    int LA58_26 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Null:
                    {
                    int LA58_27 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Super:
                    {
                    int LA58_28 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case This:
                    {
                    int LA58_29 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case It:
                    {
                    int LA58_30 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case True:
                    {
                    int LA58_31 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case False:
                    {
                    int LA58_32 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Dsl:
                    {
                    int LA58_33 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Pound:
                    {
                    int LA58_34 = input.LA(2);

                    if ( (LA58_34==Id) ) {
                        alt58=2;
                    }
                    else if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case AtId:
                    {
                    int LA58_35 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    else if ( (true) ) {
                        alt58=2;
                    }
                    }
                    break;
                case Else:
                    {
                    int LA58_36 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Catch:
                    {
                    int LA58_37 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Finally:
                    {
                    int LA58_38 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Default:
                    {
                    int LA58_39 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
                case Case:
                    {
                    int LA58_40 = input.LA(2);

                    if ( ((synpred35()&&lookupNL())) ) {
                        alt58=1;
                    }
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1014:4: ( eos )=>
                    {
                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1015:5: returned= expr
                    {
                    pushFollow(FOLLOW_expr_in_returnStmt4568);
                    returned=expr();
                    _fsp--;
                    if (failed) return stmt;

                    }
                    break;

            }

            pushFollow(FOLLOW_eos_in_returnStmt4579);
            semic=eos();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeReturnStmt(returnKw,returned,semic);

        }
        return stmt;
    }
    // $ANTLR end returnStmt


    // $ANTLR start throwStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1023:1: throwStmt returns [ThrowStmt stmt] : throwKw= 'throw' thrown= expr semic= eos ;
    public final ThrowStmt throwStmt() throws RecognitionException {
        ThrowStmt stmt = null;

        Token throwKw=null;
        Expression thrown = null;

        Token semic = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1024:3: (throwKw= 'throw' thrown= expr semic= eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1025:3: throwKw= 'throw' thrown= expr semic= eos
            {
            throwKw=(Token)input.LT(1);
            match(input,Throw,FOLLOW_Throw_in_throwStmt4604); if (failed) return stmt;
            pushFollow(FOLLOW_expr_in_throwStmt4610);
            thrown=expr();
            _fsp--;
            if (failed) return stmt;
            pushFollow(FOLLOW_eos_in_throwStmt4616);
            semic=eos();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeThrowStmt(throwKw,thrown,semic);

        }
        return stmt;
    }
    // $ANTLR end throwStmt


    // $ANTLR start whileStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1033:1: whileStmt returns [WhileStmt stmt] : whileKw= 'while' lp= LP cond= expr rp= RP body= blockOrSingleStmt ;
    public final WhileStmt whileStmt() throws RecognitionException {
        WhileStmt stmt = null;

        Token whileKw=null;
        Token lp=null;
        Token rp=null;
        Expression cond = null;

        Statement body = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1034:3: (whileKw= 'while' lp= LP cond= expr rp= RP body= blockOrSingleStmt )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1035:3: whileKw= 'while' lp= LP cond= expr rp= RP body= blockOrSingleStmt
            {
            whileKw=(Token)input.LT(1);
            match(input,While,FOLLOW_While_in_whileStmt4641); if (failed) return stmt;
            lp=(Token)input.LT(1);
            match(input,LP,FOLLOW_LP_in_whileStmt4648); if (failed) return stmt;
            pushFollow(FOLLOW_expr_in_whileStmt4655);
            cond=expr();
            _fsp--;
            if (failed) return stmt;
            rp=(Token)input.LT(1);
            match(input,RP,FOLLOW_RP_in_whileStmt4662); if (failed) return stmt;
            pushFollow(FOLLOW_blockOrSingleStmt_in_whileStmt4669);
            body=blockOrSingleStmt();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeWhileStmt(whileKw,lp,cond,rp,body);

        }
        return stmt;
    }
    // $ANTLR end whileStmt


    // $ANTLR start exprStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1045:1: exprStmt returns [ExpressionStmt s = new ExpressionStmt()] : ee= expr ( Comma ( ( eos )=> | expr )? )* eos ;
    public final ExpressionStmt exprStmt() throws RecognitionException {
        ExpressionStmt s =  new ExpressionStmt();

        Expression ee = null;


        s.setStart(startPos());
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1047:28: (ee= expr ( Comma ( ( eos )=> | expr )? )* eos )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1048:3: ee= expr ( Comma ( ( eos )=> | expr )? )* eos
            {
            pushFollow(FOLLOW_expr_in_exprStmt4699);
            ee=expr();
            _fsp--;
            if (failed) return s;
            if ( backtracking==0 ) {
              s.setExpression(ee);
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1049:3: ( Comma ( ( eos )=> | expr )? )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==Comma) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1049:4: Comma ( ( eos )=> | expr )?
            	    {
            	    match(input,Comma,FOLLOW_Comma_in_exprStmt4707); if (failed) return s;
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1049:10: ( ( eos )=> | expr )?
            	    int alt59=3;
            	    switch ( input.LA(1) ) {
            	        case EOF:
            	            {
            	            int LA59_1 = input.LA(2);

            	            if ( (synpred36()) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Semi:
            	            {
            	            int LA59_2 = input.LA(2);

            	            if ( (synpred36()) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case RC:
            	            {
            	            int LA59_3 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Break:
            	            {
            	            int LA59_4 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Continue:
            	            {
            	            int LA59_5 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case For:
            	            {
            	            int LA59_6 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case If:
            	            {
            	            int LA59_7 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Return:
            	            {
            	            int LA59_8 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Switch:
            	            {
            	            int LA59_9 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Throw:
            	            {
            	            int LA59_10 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case While:
            	            {
            	            int LA59_11 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Try:
            	            {
            	            int LA59_12 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Id:
            	            {
            	            int LA59_13 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case LB:
            	            {
            	            int LA59_14 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Pipe:
            	            {
            	            int LA59_15 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Add:
            	            {
            	            int LA59_16 = input.LA(2);

            	            if ( ((LA59_16>=This && LA59_16<=Null)||(LA59_16>=False && LA59_16<=True)||(LA59_16>=AtId && LA59_16<=LB)||LA59_16==LP||(LA59_16>=Pipe && LA59_16<=Sub)||(LA59_16>=Not && LA59_16<=Inv)||LA59_16==Pound) ) {
            	                alt59=2;
            	            }
            	            else if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Sub:
            	            {
            	            int LA59_17 = input.LA(2);

            	            if ( ((LA59_17>=This && LA59_17<=Null)||(LA59_17>=False && LA59_17<=True)||(LA59_17>=AtId && LA59_17<=LB)||LA59_17==LP||(LA59_17>=Pipe && LA59_17<=Sub)||(LA59_17>=Not && LA59_17<=Inv)||LA59_17==Pound) ) {
            	                alt59=2;
            	            }
            	            else if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Incr:
            	            {
            	            int LA59_18 = input.LA(2);

            	            if ( ((LA59_18>=This && LA59_18<=Null)||(LA59_18>=False && LA59_18<=True)||(LA59_18>=AtId && LA59_18<=LB)||LA59_18==LP||(LA59_18>=Pipe && LA59_18<=Sub)||(LA59_18>=Not && LA59_18<=Inv)||LA59_18==Pound) ) {
            	                alt59=2;
            	            }
            	            else if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Decr:
            	            {
            	            int LA59_19 = input.LA(2);

            	            if ( ((LA59_19>=This && LA59_19<=Null)||(LA59_19>=False && LA59_19<=True)||(LA59_19>=AtId && LA59_19<=LB)||LA59_19==LP||(LA59_19>=Pipe && LA59_19<=Sub)||(LA59_19>=Not && LA59_19<=Inv)||LA59_19==Pound) ) {
            	                alt59=2;
            	            }
            	            else if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Inv:
            	            {
            	            int LA59_20 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Not:
            	            {
            	            int LA59_21 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case BAnd:
            	            {
            	            int LA59_22 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case LP:
            	            {
            	            int LA59_23 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Number:
            	            {
            	            int LA59_24 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case String:
            	            {
            	            int LA59_25 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Uri:
            	            {
            	            int LA59_26 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Null:
            	            {
            	            int LA59_27 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Super:
            	            {
            	            int LA59_28 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case This:
            	            {
            	            int LA59_29 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case It:
            	            {
            	            int LA59_30 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case True:
            	            {
            	            int LA59_31 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case False:
            	            {
            	            int LA59_32 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Dsl:
            	            {
            	            int LA59_33 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Pound:
            	            {
            	            int LA59_34 = input.LA(2);

            	            if ( (LA59_34==Id) ) {
            	                alt59=2;
            	            }
            	            else if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case AtId:
            	            {
            	            int LA59_35 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            else if ( (true) ) {
            	                alt59=2;
            	            }
            	            }
            	            break;
            	        case Else:
            	            {
            	            int LA59_36 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Catch:
            	            {
            	            int LA59_37 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Finally:
            	            {
            	            int LA59_38 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Default:
            	            {
            	            int LA59_39 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Case:
            	            {
            	            int LA59_40 = input.LA(2);

            	            if ( ((synpred36()&&lookupNL())) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	        case Comma:
            	            {
            	            int LA59_41 = input.LA(2);

            	            if ( (synpred36()) ) {
            	                alt59=1;
            	            }
            	            }
            	            break;
            	    }

            	    switch (alt59) {
            	        case 1 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1049:11: ( eos )=>
            	            {
            	            }
            	            break;
            	        case 2 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1049:19: expr
            	            {
            	            pushFollow(FOLLOW_expr_in_exprStmt4715);
            	            expr();
            	            _fsp--;
            	            if (failed) return s;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            pushFollow(FOLLOW_eos_in_exprStmt4724);
            eos();
            _fsp--;
            if (failed) return s;

            }

            if ( backtracking==0 ) {
              s.setEnd(endPos());
            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return s;
    }
    // $ANTLR end exprStmt


    // $ANTLR start tryStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1053:1: tryStmt returns [TryStmt stmt] : tryKw= 'try' body= blockOrSingleStmt ( ( 'catch' )=>c= catchStmt )* ( ( 'finally' )=>f= finallyStmt )? ;
    public final TryStmt tryStmt() throws RecognitionException {
        TryStmt stmt = null;

        Token tryKw=null;
        Statement body = null;

        CatchStmt c = null;

        FinallyStmt f = null;



        List<CatchStmt> catches = new ArrayList<CatchStmt>();

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1057:3: (tryKw= 'try' body= blockOrSingleStmt ( ( 'catch' )=>c= catchStmt )* ( ( 'finally' )=>f= finallyStmt )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1058:3: tryKw= 'try' body= blockOrSingleStmt ( ( 'catch' )=>c= catchStmt )* ( ( 'finally' )=>f= finallyStmt )?
            {
            tryKw=(Token)input.LT(1);
            match(input,Try,FOLLOW_Try_in_tryStmt4749); if (failed) return stmt;
            pushFollow(FOLLOW_blockOrSingleStmt_in_tryStmt4755);
            body=blockOrSingleStmt();
            _fsp--;
            if (failed) return stmt;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1060:3: ( ( 'catch' )=>c= catchStmt )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==Catch) ) {
                    int LA61_2 = input.LA(2);

                    if ( (synpred37()) ) {
                        alt61=1;
                    }


                }


                switch (alt61) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1060:4: ( 'catch' )=>c= catchStmt
            	    {
            	    pushFollow(FOLLOW_catchStmt_in_tryStmt4771);
            	    c=catchStmt();
            	    _fsp--;
            	    if (failed) return stmt;
            	    if ( backtracking==0 ) {
            	      catches.add(c);
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1063:3: ( ( 'finally' )=>f= finallyStmt )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==Finally) ) {
                int LA62_1 = input.LA(2);

                if ( (synpred38()) ) {
                    alt62=1;
                }
            }
            switch (alt62) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1063:4: ( 'finally' )=>f= finallyStmt
                    {
                    pushFollow(FOLLOW_finallyStmt_in_tryStmt4794);
                    f=finallyStmt();
                    _fsp--;
                    if (failed) return stmt;

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeTryStmt(tryKw,catches,f);

        }
        return stmt;
    }
    // $ANTLR end tryStmt


    // $ANTLR start catchStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1070:1: catchStmt returns [CatchStmt stmt] : catchKw= 'catch' ( ( LP )=>lp= LP type= ctype id= Id rp= RP )? body= blockOrSingleStmt ;
    public final CatchStmt catchStmt() throws RecognitionException {
        CatchStmt stmt = null;

        Token catchKw=null;
        Token lp=null;
        Token id=null;
        Token rp=null;
        FanTypeRef type = null;

        Statement body = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1071:3: (catchKw= 'catch' ( ( LP )=>lp= LP type= ctype id= Id rp= RP )? body= blockOrSingleStmt )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1072:3: catchKw= 'catch' ( ( LP )=>lp= LP type= ctype id= Id rp= RP )? body= blockOrSingleStmt
            {
            catchKw=(Token)input.LT(1);
            match(input,Catch,FOLLOW_Catch_in_catchStmt4823); if (failed) return stmt;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1073:3: ( ( LP )=>lp= LP type= ctype id= Id rp= RP )?
            int alt63=2;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1073:4: ( LP )=>lp= LP type= ctype id= Id rp= RP
                    {
                    lp=(Token)input.LT(1);
                    match(input,LP,FOLLOW_LP_in_catchStmt4839); if (failed) return stmt;
                    pushFollow(FOLLOW_ctype_in_catchStmt4847);
                    type=ctype();
                    _fsp--;
                    if (failed) return stmt;
                    id=(Token)input.LT(1);
                    match(input,Id,FOLLOW_Id_in_catchStmt4855); if (failed) return stmt;
                    rp=(Token)input.LT(1);
                    match(input,RP,FOLLOW_RP_in_catchStmt4863); if (failed) return stmt;

                    }
                    break;

            }

            pushFollow(FOLLOW_blockOrSingleStmt_in_catchStmt4874);
            body=blockOrSingleStmt();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeCatchStmt(catchKw,lp,type,id,rp,body);

        }
        return stmt;
    }
    // $ANTLR end catchStmt


    // $ANTLR start finallyStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1084:1: finallyStmt returns [FinallyStmt stmt] : finallyKw= 'finally' body= blockOrSingleStmt ;
    public final FinallyStmt finallyStmt() throws RecognitionException {
        FinallyStmt stmt = null;

        Token finallyKw=null;
        Statement body = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1085:3: (finallyKw= 'finally' body= blockOrSingleStmt )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1086:3: finallyKw= 'finally' body= blockOrSingleStmt
            {
            finallyKw=(Token)input.LT(1);
            match(input,Finally,FOLLOW_Finally_in_finallyStmt4898); if (failed) return stmt;
            pushFollow(FOLLOW_blockOrSingleStmt_in_finallyStmt4904);
            body=blockOrSingleStmt();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeFinallyStmt(finallyKw,body);

        }
        return stmt;
    }
    // $ANTLR end finallyStmt


    // $ANTLR start switchStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1093:1: switchStmt returns [SwitchStmt stmt] : switchKw= 'switch' lp= LP e= expr rp= RP lc= LC (c= caseStmt )* (d= defaultStmt )? rc= RC ;
    public final SwitchStmt switchStmt() throws RecognitionException {
        SwitchStmt stmt = null;

        Token switchKw=null;
        Token lp=null;
        Token rp=null;
        Token lc=null;
        Token rc=null;
        Expression e = null;

        CaseStmt c = null;

        DefaultStmt d = null;



        List<CaseStmt> cases = new ArrayList<CaseStmt>();

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1097:3: (switchKw= 'switch' lp= LP e= expr rp= RP lc= LC (c= caseStmt )* (d= defaultStmt )? rc= RC )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1098:3: switchKw= 'switch' lp= LP e= expr rp= RP lc= LC (c= caseStmt )* (d= defaultStmt )? rc= RC
            {
            switchKw=(Token)input.LT(1);
            match(input,Switch,FOLLOW_Switch_in_switchStmt4933); if (failed) return stmt;
            lp=(Token)input.LT(1);
            match(input,LP,FOLLOW_LP_in_switchStmt4939); if (failed) return stmt;
            pushFollow(FOLLOW_expr_in_switchStmt4945);
            e=expr();
            _fsp--;
            if (failed) return stmt;
            rp=(Token)input.LT(1);
            match(input,RP,FOLLOW_RP_in_switchStmt4951); if (failed) return stmt;
            lc=(Token)input.LT(1);
            match(input,LC,FOLLOW_LC_in_switchStmt4957); if (failed) return stmt;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1103:3: (c= caseStmt )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==Case) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1103:4: c= caseStmt
            	    {
            	    pushFollow(FOLLOW_caseStmt_in_switchStmt4964);
            	    c=caseStmt();
            	    _fsp--;
            	    if (failed) return stmt;
            	    if ( backtracking==0 ) {
            	      cases.add(c);
            	    }

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1104:3: (d= defaultStmt )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Default) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1104:4: d= defaultStmt
                    {
                    pushFollow(FOLLOW_defaultStmt_in_switchStmt4975);
                    d=defaultStmt();
                    _fsp--;
                    if (failed) return stmt;

                    }
                    break;

            }

            rc=(Token)input.LT(1);
            match(input,RC,FOLLOW_RC_in_switchStmt4983); if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeSwitchStmt(switchKw,lp,e,rp,lc,cases,d,rc);

        }
        return stmt;
    }
    // $ANTLR end switchStmt


    // $ANTLR start caseStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1111:1: caseStmt returns [CaseStmt stmt] : caseKw= 'case' ex= expr colon= Colon body= stmts ;
    public final CaseStmt caseStmt() throws RecognitionException {
        CaseStmt stmt = null;

        Token caseKw=null;
        Token colon=null;
        Expression ex = null;

        StmtList body = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1112:3: (caseKw= 'case' ex= expr colon= Colon body= stmts )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1113:3: caseKw= 'case' ex= expr colon= Colon body= stmts
            {
            caseKw=(Token)input.LT(1);
            match(input,Case,FOLLOW_Case_in_caseStmt5008); if (failed) return stmt;
            pushFollow(FOLLOW_expr_in_caseStmt5014);
            ex=expr();
            _fsp--;
            if (failed) return stmt;
            colon=(Token)input.LT(1);
            match(input,Colon,FOLLOW_Colon_in_caseStmt5020); if (failed) return stmt;
            pushFollow(FOLLOW_stmts_in_caseStmt5026);
            body=stmts();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeCaseStmt(caseKw,ex,colon,body);

        }
        return stmt;
    }
    // $ANTLR end caseStmt


    // $ANTLR start defaultStmt
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1121:1: defaultStmt returns [DefaultStmt stmt] : defaultKw= 'default' colon= Colon body= stmts ;
    public final DefaultStmt defaultStmt() throws RecognitionException {
        DefaultStmt stmt = null;

        Token defaultKw=null;
        Token colon=null;
        StmtList body = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1122:3: (defaultKw= 'default' colon= Colon body= stmts )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1123:3: defaultKw= 'default' colon= Colon body= stmts
            {
            defaultKw=(Token)input.LT(1);
            match(input,Default,FOLLOW_Default_in_defaultStmt5050); if (failed) return stmt;
            colon=(Token)input.LT(1);
            match(input,Colon,FOLLOW_Colon_in_defaultStmt5056); if (failed) return stmt;
            pushFollow(FOLLOW_stmts_in_defaultStmt5062);
            body=stmts();
            _fsp--;
            if (failed) return stmt;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              stmt = factory.makeDefaultStmt(defaultKw,colon,body);

        }
        return stmt;
    }
    // $ANTLR end defaultStmt


    // $ANTLR start ctype
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1133:1: ctype returns [FanTypeRef ref] : ( ( Id )=>st= simpleType | ( LB )=> LB br= ctype RB | ( Pipe )=>func= funcType ) ({...}? => Qu )? ( ( LB )=>lb= LB rb= RB )* ({...}? =>colon= Colon valueType= ctype )? ({...}? => Qu )? ;
    public final FanTypeRef ctype() throws RecognitionException {
        FanTypeRef ref = null;

        Token lb=null;
        Token rb=null;
        Token colon=null;
        SimpleTypeRef st = null;

        FanTypeRef br = null;

        FuncTypeRef func = null;

        FanTypeRef valueType = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1134:3: ( ( ( Id )=>st= simpleType | ( LB )=> LB br= ctype RB | ( Pipe )=>func= funcType ) ({...}? => Qu )? ( ( LB )=>lb= LB rb= RB )* ({...}? =>colon= Colon valueType= ctype )? ({...}? => Qu )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1134:5: ( ( Id )=>st= simpleType | ( LB )=> LB br= ctype RB | ( Pipe )=>func= funcType ) ({...}? => Qu )? ( ( LB )=>lb= LB rb= RB )* ({...}? =>colon= Colon valueType= ctype )? ({...}? => Qu )?
            {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1134:5: ( ( Id )=>st= simpleType | ( LB )=> LB br= ctype RB | ( Pipe )=>func= funcType )
            int alt66=3;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Id) && (synpred40())) {
                alt66=1;
            }
            else if ( (LA66_0==LB) && (synpred41())) {
                alt66=2;
            }
            else if ( (LA66_0==Pipe) && (synpred42())) {
                alt66=3;
            }
            else {
                if (backtracking>0) {failed=true; return ref;}
                NoViableAltException nvae =
                    new NoViableAltException("1134:5: ( ( Id )=>st= simpleType | ( LB )=> LB br= ctype RB | ( Pipe )=>func= funcType )", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1135:7: ( Id )=>st= simpleType
                    {
                    pushFollow(FOLLOW_simpleType_in_ctype5103);
                    st=simpleType();
                    _fsp--;
                    if (failed) return ref;
                    if ( backtracking==0 ) {
                      ref=st;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1136:7: ( LB )=> LB br= ctype RB
                    {
                    match(input,LB,FOLLOW_LB_in_ctype5121); if (failed) return ref;
                    pushFollow(FOLLOW_ctype_in_ctype5125);
                    br=ctype();
                    _fsp--;
                    if (failed) return ref;
                    match(input,RB,FOLLOW_RB_in_ctype5127); if (failed) return ref;
                    if ( backtracking==0 ) {
                      ref=br;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1137:7: ( Pipe )=>func= funcType
                    {
                    pushFollow(FOLLOW_funcType_in_ctype5145);
                    func=funcType();
                    _fsp--;
                    if (failed) return ref;
                    if ( backtracking==0 ) {
                      ref=func;
                    }

                    }
                    break;

            }

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1139:3: ({...}? => Qu )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==Qu) ) {
                int LA67_1 = input.LA(2);

                if ( (noWhitespaceBefore()) ) {
                    alt67=1;
                }
            }
            switch (alt67) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1139:4: {...}? => Qu
                    {
                    if ( !(noWhitespaceBefore()) ) {
                        if (backtracking>0) {failed=true; return ref;}
                        throw new FailedPredicateException(input, "ctype", "noWhitespaceBefore()");
                    }
                    match(input,Qu,FOLLOW_Qu_in_ctype5159); if (failed) return ref;
                    if ( backtracking==0 ) {
                      ref.setNullable(true);
                    }

                    }
                    break;

            }

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1140:3: ( ( LB )=>lb= LB rb= RB )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==LB) ) {
                    int LA68_2 = input.LA(2);

                    if ( (LA68_2==RB) && (synpred43())) {
                        alt68=1;
                    }


                }


                switch (alt68) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1141:5: ( LB )=>lb= LB rb= RB
            	    {
            	    lb=(Token)input.LT(1);
            	    match(input,LB,FOLLOW_LB_in_ctype5180); if (failed) return ref;
            	    rb=(Token)input.LT(1);
            	    match(input,RB,FOLLOW_RB_in_ctype5184); if (failed) return ref;
            	    if ( backtracking==0 ) {

            	            ArrayTypeRef array = factory.makeArrayTypeRef(ref,lb,rb);
            	            ref = array;
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1147:3: ({...}? =>colon= Colon valueType= ctype )?
            int alt69=2;
            alt69 = dfa69.predict(input);
            switch (alt69) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1148:5: {...}? =>colon= Colon valueType= ctype
                    {
                    if ( !(noWhitespaceBefore()) ) {
                        if (backtracking>0) {failed=true; return ref;}
                        throw new FailedPredicateException(input, "ctype", "noWhitespaceBefore()");
                    }
                    colon=(Token)input.LT(1);
                    match(input,Colon,FOLLOW_Colon_in_ctype5211); if (failed) return ref;
                    pushFollow(FOLLOW_ctype_in_ctype5220);
                    valueType=ctype();
                    _fsp--;
                    if (failed) return ref;
                    if ( backtracking==0 ) {

                            MapTypeRef map = factory.makeMapTypeRef(ref,colon,valueType);
                            ref = map;
                          
                    }

                    }
                    break;

            }

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1155:3: ({...}? => Qu )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==Qu) ) {
                int LA70_1 = input.LA(2);

                if ( (noWhitespaceBefore()) ) {
                    alt70=1;
                }
            }
            switch (alt70) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1155:4: {...}? => Qu
                    {
                    if ( !(noWhitespaceBefore()) ) {
                        if (backtracking>0) {failed=true; return ref;}
                        throw new FailedPredicateException(input, "ctype", "noWhitespaceBefore()");
                    }
                    match(input,Qu,FOLLOW_Qu_in_ctype5240); if (failed) return ref;
                    if ( backtracking==0 ) {
                      ref.setNullable(true);
                    }

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ref;
    }
    // $ANTLR end ctype


    // $ANTLR start simpleType
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1159:1: simpleType returns [SimpleTypeRef ref] : (podName= Id dc= DoubleColon )? typeName= Id ;
    public final SimpleTypeRef simpleType() throws RecognitionException {
        SimpleTypeRef ref = null;

        Token podName=null;
        Token dc=null;
        Token typeName=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1160:3: ( (podName= Id dc= DoubleColon )? typeName= Id )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1161:3: (podName= Id dc= DoubleColon )? typeName= Id
            {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1161:3: (podName= Id dc= DoubleColon )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==Id) ) {
                int LA71_1 = input.LA(2);

                if ( (LA71_1==DoubleColon) ) {
                    alt71=1;
                }
            }
            switch (alt71) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1162:5: podName= Id dc= DoubleColon
                    {
                    podName=(Token)input.LT(1);
                    match(input,Id,FOLLOW_Id_in_simpleType5276); if (failed) return ref;
                    dc=(Token)input.LT(1);
                    match(input,DoubleColon,FOLLOW_DoubleColon_in_simpleType5285); if (failed) return ref;

                    }
                    break;

            }

            typeName=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_simpleType5296); if (failed) return ref;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) ref = factory.makeSimpleTypeRef(podName,dc,typeName);

        }
        return ref;
    }
    // $ANTLR end simpleType


    // $ANTLR start funcType
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1171:1: funcType returns [FuncTypeRef ref] : startPipe= Pipe ( Comma | arrow= Arrow returnedType1= ctype | firstParam= funcTypeParam ( Comma nextParam= funcTypeParam )* ( Arrow returnedType2= ctype )? ) endPipe= Pipe ;
    public final FuncTypeRef funcType() throws RecognitionException {
        FuncTypeRef ref = null;

        Token startPipe=null;
        Token arrow=null;
        Token endPipe=null;
        FanTypeRef returnedType1 = null;

        FuncTypeRef.Param firstParam = null;

        FuncTypeRef.Param nextParam = null;

        FanTypeRef returnedType2 = null;



          FanTypeRef returnedType = null;
          List<FuncTypeRef.Param> params = new ArrayList<FuncTypeRef.Param>();

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1175:3: (startPipe= Pipe ( Comma | arrow= Arrow returnedType1= ctype | firstParam= funcTypeParam ( Comma nextParam= funcTypeParam )* ( Arrow returnedType2= ctype )? ) endPipe= Pipe )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1176:3: startPipe= Pipe ( Comma | arrow= Arrow returnedType1= ctype | firstParam= funcTypeParam ( Comma nextParam= funcTypeParam )* ( Arrow returnedType2= ctype )? ) endPipe= Pipe
            {
            startPipe=(Token)input.LT(1);
            match(input,Pipe,FOLLOW_Pipe_in_funcType5325); if (failed) return ref;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1177:3: ( Comma | arrow= Arrow returnedType1= ctype | firstParam= funcTypeParam ( Comma nextParam= funcTypeParam )* ( Arrow returnedType2= ctype )? )
            int alt74=3;
            switch ( input.LA(1) ) {
            case Comma:
                {
                alt74=1;
                }
                break;
            case Arrow:
                {
                alt74=2;
                }
                break;
            case Id:
            case LB:
            case Pipe:
                {
                alt74=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return ref;}
                NoViableAltException nvae =
                    new NoViableAltException("1177:3: ( Comma | arrow= Arrow returnedType1= ctype | firstParam= funcTypeParam ( Comma nextParam= funcTypeParam )* ( Arrow returnedType2= ctype )? )", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1178:5: Comma
                    {
                    match(input,Comma,FOLLOW_Comma_in_funcType5335); if (failed) return ref;

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1179:5: arrow= Arrow returnedType1= ctype
                    {
                    arrow=(Token)input.LT(1);
                    match(input,Arrow,FOLLOW_Arrow_in_funcType5343); if (failed) return ref;
                    pushFollow(FOLLOW_ctype_in_funcType5347);
                    returnedType1=ctype();
                    _fsp--;
                    if (failed) return ref;
                    if ( backtracking==0 ) {
                      returnedType=returnedType1;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1180:5: firstParam= funcTypeParam ( Comma nextParam= funcTypeParam )* ( Arrow returnedType2= ctype )?
                    {
                    pushFollow(FOLLOW_funcTypeParam_in_funcType5357);
                    firstParam=funcTypeParam();
                    _fsp--;
                    if (failed) return ref;
                    if ( backtracking==0 ) {
                      params.add(firstParam);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1181:7: ( Comma nextParam= funcTypeParam )*
                    loop72:
                    do {
                        int alt72=2;
                        int LA72_0 = input.LA(1);

                        if ( (LA72_0==Comma) ) {
                            alt72=1;
                        }


                        switch (alt72) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1181:8: Comma nextParam= funcTypeParam
                    	    {
                    	    match(input,Comma,FOLLOW_Comma_in_funcType5368); if (failed) return ref;
                    	    pushFollow(FOLLOW_funcTypeParam_in_funcType5372);
                    	    nextParam=funcTypeParam();
                    	    _fsp--;
                    	    if (failed) return ref;
                    	    if ( backtracking==0 ) {
                    	      params.add(nextParam);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop72;
                        }
                    } while (true);

                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1182:7: ( Arrow returnedType2= ctype )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==Arrow) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1182:8: Arrow returnedType2= ctype
                            {
                            match(input,Arrow,FOLLOW_Arrow_in_funcType5386); if (failed) return ref;
                            pushFollow(FOLLOW_ctype_in_funcType5390);
                            returnedType2=ctype();
                            _fsp--;
                            if (failed) return ref;
                            if ( backtracking==0 ) {
                              returnedType=returnedType2;
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            endPipe=(Token)input.LT(1);
            match(input,Pipe,FOLLOW_Pipe_in_funcType5404); if (failed) return ref;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) ref = factory.makeFuncTypeRef(startPipe,params,returnedType,endPipe);

        }
        return ref;
    }
    // $ANTLR end funcType


    // $ANTLR start funcTypeParam
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1190:1: funcTypeParam returns [FuncTypeRef.Param ref] : ( ( Id | Pipe | LB )=> (type= ctype (id1= Id )? ) | id2= Id );
    public final FuncTypeRef.Param funcTypeParam() throws RecognitionException {
        FuncTypeRef.Param ref = null;

        Token id1=null;
        Token id2=null;
        FanTypeRef type = null;



          Token paramName = null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1193:3: ( ( Id | Pipe | LB )=> (type= ctype (id1= Id )? ) | id2= Id )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==Id) ) {
                int LA76_1 = input.LA(2);

                if ( (synpred44()) ) {
                    alt76=1;
                }
                else if ( (true) ) {
                    alt76=2;
                }
                else {
                    if (backtracking>0) {failed=true; return ref;}
                    NoViableAltException nvae =
                        new NoViableAltException("1190:1: funcTypeParam returns [FuncTypeRef.Param ref] : ( ( Id | Pipe | LB )=> (type= ctype (id1= Id )? ) | id2= Id );", 76, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA76_0==LB) && (synpred44())) {
                alt76=1;
            }
            else if ( (LA76_0==Pipe) && (synpred44())) {
                alt76=1;
            }
            else {
                if (backtracking>0) {failed=true; return ref;}
                NoViableAltException nvae =
                    new NoViableAltException("1190:1: funcTypeParam returns [FuncTypeRef.Param ref] : ( ( Id | Pipe | LB )=> (type= ctype (id1= Id )? ) | id2= Id );", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1194:3: ( Id | Pipe | LB )=> (type= ctype (id1= Id )? )
                    {
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1194:17: (type= ctype (id1= Id )? )
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1195:5: type= ctype (id1= Id )?
                    {
                    pushFollow(FOLLOW_ctype_in_funcTypeParam5446);
                    type=ctype();
                    _fsp--;
                    if (failed) return ref;
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1196:5: (id1= Id )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==Id) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1196:6: id1= Id
                            {
                            id1=(Token)input.LT(1);
                            match(input,Id,FOLLOW_Id_in_funcTypeParam5457); if (failed) return ref;
                            if ( backtracking==0 ) {
                              paramName=id1;
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1198:5: id2= Id
                    {
                    id2=(Token)input.LT(1);
                    match(input,Id,FOLLOW_Id_in_funcTypeParam5473); if (failed) return ref;
                    if ( backtracking==0 ) {
                      paramName=id2;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) ref = factory.makeFuncTypeParamRef(type,paramName);

        }
        return ref;
    }
    // $ANTLR end funcTypeParam


    // $ANTLR start expr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1207:1: expr returns [Expression ex] : asex= assignExpr ;
    public final Expression expr() throws RecognitionException {
        Expression ex = null;

        Expression asex = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1207:30: (asex= assignExpr )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1208:3: asex= assignExpr
            {
            pushFollow(FOLLOW_assignExpr_in_expr5504);
            asex=assignExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = asex;
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end expr


    // $ANTLR start assignExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1210:1: assignExpr returns [Expression ex] : f= ternaryExpr ( ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss )=>kind= assignOp s= assignExpr )* ;
    public final Expression assignExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        int kind = 0;

        Expression s = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1210:35: (f= ternaryExpr ( ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss )=>kind= assignOp s= assignExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1211:3: f= ternaryExpr ( ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss )=>kind= assignOp s= assignExpr )*
            {
            pushFollow(FOLLOW_ternaryExpr_in_assignExpr5523);
            f=ternaryExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1211:27: ( ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss )=>kind= assignOp s= assignExpr )*
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case Assign:
                    {
                    int LA77_2 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case MulAss:
                    {
                    int LA77_3 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case DivAss:
                    {
                    int LA77_4 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case ModAss:
                    {
                    int LA77_5 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case AddAss:
                    {
                    int LA77_6 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case SubAss:
                    {
                    int LA77_7 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case LShiftAss:
                    {
                    int LA77_8 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case RShiftAss:
                    {
                    int LA77_9 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case BAndAss:
                    {
                    int LA77_10 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case BNotAss:
                    {
                    int LA77_11 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;
                case PipeAss:
                    {
                    int LA77_12 = input.LA(2);

                    if ( (synpred45()) ) {
                        alt77=1;
                    }


                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1211:28: ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss )=>kind= assignOp s= assignExpr
            	    {
            	    pushFollow(FOLLOW_assignOp_in_assignExpr5616);
            	    kind=assignOp();
            	    _fsp--;
            	    if (failed) return ex;
            	    pushFollow(FOLLOW_assignExpr_in_assignExpr5620);
            	    s=assignExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	          BinaryExpression binary = new BinaryExpression();
            	          if (ex!=null) {
            	            binary.setFirst(ex);
            	            binary.setStart(ex.sourceStart());
            	          }
            	          if (s!=null) {
            	            binary.setSecond(s);
            	            binary.setEnd(s.sourceEnd());
            	          }
            	          binary.setKind(kind);
            	          ex = binary;
            	        
            	    }

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end assignExpr


    // $ANTLR start assignOp
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1229:1: assignOp returns [int kind] : ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss );
    public final int assignOp() throws RecognitionException {
        int kind = 0;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1229:28: ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss )
            int alt78=11;
            switch ( input.LA(1) ) {
            case Assign:
                {
                alt78=1;
                }
                break;
            case MulAss:
                {
                alt78=2;
                }
                break;
            case DivAss:
                {
                alt78=3;
                }
                break;
            case ModAss:
                {
                alt78=4;
                }
                break;
            case AddAss:
                {
                alt78=5;
                }
                break;
            case SubAss:
                {
                alt78=6;
                }
                break;
            case LShiftAss:
                {
                alt78=7;
                }
                break;
            case RShiftAss:
                {
                alt78=8;
                }
                break;
            case BAndAss:
                {
                alt78=9;
                }
                break;
            case BNotAss:
                {
                alt78=10;
                }
                break;
            case PipeAss:
                {
                alt78=11;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return kind;}
                NoViableAltException nvae =
                    new NoViableAltException("1229:1: assignOp returns [int kind] : ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss );", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1230:5: Assign
                    {
                    match(input,Assign,FOLLOW_Assign_in_assignOp5670); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_ASSIGN;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1231:5: MulAss
                    {
                    match(input,MulAss,FOLLOW_MulAss_in_assignOp5678); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_MULT_ASSIGN;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1232:5: DivAss
                    {
                    match(input,DivAss,FOLLOW_DivAss_in_assignOp5687); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_DIV_ASSIGN;
                    }

                    }
                    break;
                case 4 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1233:5: ModAss
                    {
                    match(input,ModAss,FOLLOW_ModAss_in_assignOp5696); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_MOD_ASSIGN;
                    }

                    }
                    break;
                case 5 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1234:5: AddAss
                    {
                    match(input,AddAss,FOLLOW_AddAss_in_assignOp5705); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_PLUS_ASSIGN;
                    }

                    }
                    break;
                case 6 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1235:5: SubAss
                    {
                    match(input,SubAss,FOLLOW_SubAss_in_assignOp5714); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_MINUS_ASSIGN;
                    }

                    }
                    break;
                case 7 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1236:5: LShiftAss
                    {
                    match(input,LShiftAss,FOLLOW_LShiftAss_in_assignOp5723); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_SL_ASSIGN;
                    }

                    }
                    break;
                case 8 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1237:5: RShiftAss
                    {
                    match(input,RShiftAss,FOLLOW_RShiftAss_in_assignOp5732); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_SR_ASSIGN;
                    }

                    }
                    break;
                case 9 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1238:5: BAndAss
                    {
                    match(input,BAndAss,FOLLOW_BAndAss_in_assignOp5742); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_BAND_ASSIGN;
                    }

                    }
                    break;
                case 10 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1239:5: BNotAss
                    {
                    match(input,BNotAss,FOLLOW_BNotAss_in_assignOp5751); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_BNOT_ASSIGN;
                    }

                    }
                    break;
                case 11 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1240:5: PipeAss
                    {
                    match(input,PipeAss,FOLLOW_PipeAss_in_assignOp5760); if (failed) return kind;
                    if ( backtracking==0 ) {
                      kind = FanExpressionConstants.E_BOR_ASSIGN;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return kind;
    }
    // $ANTLR end assignOp


    // $ANTLR start ternaryExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1242:1: ternaryExpr returns [Expression ex] : first= condOrExpr ( ( Qu )=> Qu second= condOrExpr Colon third= condOrExpr )? ;
    public final Expression ternaryExpr() throws RecognitionException {
        Expression ex = null;

        Expression first = null;

        Expression second = null;

        Expression third = null;


        TernaryExpression ternary = null;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1242:76: (first= condOrExpr ( ( Qu )=> Qu second= condOrExpr Colon third= condOrExpr )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1243:3: first= condOrExpr ( ( Qu )=> Qu second= condOrExpr Colon third= condOrExpr )?
            {
            pushFollow(FOLLOW_condOrExpr_in_ternaryExpr5786);
            first=condOrExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = first;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1244:3: ( ( Qu )=> Qu second= condOrExpr Colon third= condOrExpr )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==Qu) && (synpred46())) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1244:4: ( Qu )=> Qu second= condOrExpr Colon third= condOrExpr
                    {
                    match(input,Qu,FOLLOW_Qu_in_ternaryExpr5797); if (failed) return ex;
                    if ( backtracking==0 ) {

                          ternary = new TernaryExpression();
                          ternary.setKind(FanExpressionConstants.E_CONDITIONAL);
                          if (first!=null) {
                            ternary.setFirst(first);
                            ternary.setStart(first.sourceStart());
                          }
                        
                    }
                    pushFollow(FOLLOW_condOrExpr_in_ternaryExpr5807);
                    second=condOrExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                          if (second!=null) {
                             ternary.setSecond(second);
                          }
                        
                    }
                    match(input,Colon,FOLLOW_Colon_in_ternaryExpr5814); if (failed) return ex;
                    pushFollow(FOLLOW_condOrExpr_in_ternaryExpr5822);
                    third=condOrExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                          if (third!=null) {
                      	    ternary.setThird(third);
                      	    ternary.setStart(third.sourceStart());
                          }
                        
                    }

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end ternaryExpr


    // $ANTLR start condOrExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1266:1: condOrExpr returns [Expression ex] : f= condAndExpr ( Or s= condAndExpr )* ;
    public final Expression condOrExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1266:37: (f= condAndExpr ( Or s= condAndExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1267:3: f= condAndExpr ( Or s= condAndExpr )*
            {
            pushFollow(FOLLOW_condAndExpr_in_condOrExpr5851);
            f=condAndExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1268:3: ( Or s= condAndExpr )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==Or) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1268:4: Or s= condAndExpr
            	    {
            	    match(input,Or,FOLLOW_Or_in_condOrExpr5859); if (failed) return ex;
            	    pushFollow(FOLLOW_condAndExpr_in_condOrExpr5863);
            	    s=condAndExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	          BinaryExpression binary = new BinaryExpression();
            	          if (ex!=null) {
            	            binary.setFirst(ex);
            	            binary.setStart(ex.sourceStart());
            	          }
            	          if (s!=null) {
            	            binary.setSecond(s);
            	            binary.setEnd(s.sourceEnd());
            	          }
            	          binary.setKind(FanExpressionConstants.E_BOR);
            	          ex = binary;
            	        
            	    }

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end condOrExpr


    // $ANTLR start condAndExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1284:1: condAndExpr returns [Expression ex] : f= equalityExpr ( And s= equalityExpr )* ;
    public final Expression condAndExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1284:38: (f= equalityExpr ( And s= equalityExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1285:3: f= equalityExpr ( And s= equalityExpr )*
            {
            pushFollow(FOLLOW_equalityExpr_in_condAndExpr5897);
            f=equalityExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1286:3: ( And s= equalityExpr )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==And) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1286:4: And s= equalityExpr
            	    {
            	    match(input,And,FOLLOW_And_in_condAndExpr5905); if (failed) return ex;
            	    pushFollow(FOLLOW_equalityExpr_in_condAndExpr5909);
            	    s=equalityExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	          BinaryExpression binary = new BinaryExpression();
            	          if (ex!=null) {
            	            binary.setFirst(ex);
            	            binary.setStart(ex.sourceStart());
            	          }
            	          if (s!=null) {
            	            binary.setSecond(s);
            	            binary.setEnd(s.sourceEnd());
            	          }
            	          binary.setKind(FanExpressionConstants.E_BAND);
            	          ex = binary;    
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end condAndExpr


    // $ANTLR start equalityExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1302:1: equalityExpr returns [Expression ex] : f= relationalExpr ( ( Eq | NEq | SEq | NSEq )=> ( Eq | NEq | SEq | NSEq ) s= relationalExpr )* ;
    public final Expression equalityExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        int kind = 0;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1302:59: (f= relationalExpr ( ( Eq | NEq | SEq | NSEq )=> ( Eq | NEq | SEq | NSEq ) s= relationalExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1303:3: f= relationalExpr ( ( Eq | NEq | SEq | NSEq )=> ( Eq | NEq | SEq | NSEq ) s= relationalExpr )*
            {
            pushFollow(FOLLOW_relationalExpr_in_equalityExpr5944);
            f=relationalExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1304:1: ( ( Eq | NEq | SEq | NSEq )=> ( Eq | NEq | SEq | NSEq ) s= relationalExpr )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==Eq) && (synpred47())) {
                    alt83=1;
                }
                else if ( (LA83_0==NEq) && (synpred47())) {
                    alt83=1;
                }
                else if ( (LA83_0==SEq) && (synpred47())) {
                    alt83=1;
                }
                else if ( (LA83_0==NSEq) && (synpred47())) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1304:2: ( Eq | NEq | SEq | NSEq )=> ( Eq | NEq | SEq | NSEq ) s= relationalExpr
            	    {
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1305:3: ( Eq | NEq | SEq | NSEq )
            	    int alt82=4;
            	    switch ( input.LA(1) ) {
            	    case Eq:
            	        {
            	        alt82=1;
            	        }
            	        break;
            	    case NEq:
            	        {
            	        alt82=2;
            	        }
            	        break;
            	    case SEq:
            	        {
            	        alt82=3;
            	        }
            	        break;
            	    case NSEq:
            	        {
            	        alt82=4;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return ex;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("1305:3: ( Eq | NEq | SEq | NSEq )", 82, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt82) {
            	        case 1 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1305:5: Eq
            	            {
            	            match(input,Eq,FOLLOW_Eq_in_equalityExpr5970); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_EQUAL;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1306:5: NEq
            	            {
            	            match(input,NEq,FOLLOW_NEq_in_equalityExpr5979); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_NOT_EQUAL;
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1307:5: SEq
            	            {
            	            match(input,SEq,FOLLOW_SEq_in_equalityExpr5988); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_SAME;
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1308:5: NSEq
            	            {
            	            match(input,NSEq,FOLLOW_NSEq_in_equalityExpr5997); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_NOT_SAME;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relationalExpr_in_equalityExpr6010);
            	    s=relationalExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	          BinaryExpression binary = new BinaryExpression();
            	          if (ex!=null) {
            	            binary.setFirst(ex);
            	            binary.setStart(ex.sourceStart());
            	          }
            	          if (s!=null) {
            	            binary.setSecond(s);
            	            binary.setEnd(s.sourceEnd());
            	          }
            	          binary.setKind(kind);
            	          ex = binary;
            	          
            	    }

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end equalityExpr


    // $ANTLR start relationalExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1327:1: relationalExpr returns [Expression ex] : f= elvisExpr ( ( 'isnot' | 'is' | 'as' ) t= ctype | ( ( LEG | LE | LT | GE | GT ) s= elvisExpr )* ) ;
    public final Expression relationalExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        FanTypeRef t = null;

        Expression s = null;


        int kind = 0;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1327:60: (f= elvisExpr ( ( 'isnot' | 'is' | 'as' ) t= ctype | ( ( LEG | LE | LT | GE | GT ) s= elvisExpr )* ) )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1328:3: f= elvisExpr ( ( 'isnot' | 'is' | 'as' ) t= ctype | ( ( LEG | LE | LT | GE | GT ) s= elvisExpr )* )
            {
            pushFollow(FOLLOW_elvisExpr_in_relationalExpr6044);
            f=elvisExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1329:3: ( ( 'isnot' | 'is' | 'as' ) t= ctype | ( ( LEG | LE | LT | GE | GT ) s= elvisExpr )* )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==As||(LA87_0>=130 && LA87_0<=131)) ) {
                alt87=1;
            }
            else if ( (LA87_0==EOF||(LA87_0>=Abstract && LA87_0<=ReadOnly)||(LA87_0>=Class && LA87_0<=True)||(LA87_0>=AtId && LA87_0<=Comma)||(LA87_0>=Colon && LA87_0<=Semi)||(LA87_0>=Assign && LA87_0<=PipeAss)||(LA87_0>=Qu && LA87_0<=NEq)||(LA87_0>=LEG && LA87_0<=GT)||(LA87_0>=Pipe && LA87_0<=Sub)||(LA87_0>=Not && LA87_0<=Inv)||LA87_0==Pound) ) {
                alt87=2;
            }
            else {
                if (backtracking>0) {failed=true; return ex;}
                NoViableAltException nvae =
                    new NoViableAltException("1329:3: ( ( 'isnot' | 'is' | 'as' ) t= ctype | ( ( LEG | LE | LT | GE | GT ) s= elvisExpr )* )", 87, 0, input);

                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1329:7: ( 'isnot' | 'is' | 'as' ) t= ctype
                    {
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1329:7: ( 'isnot' | 'is' | 'as' )
                    int alt84=3;
                    switch ( input.LA(1) ) {
                    case 130:
                        {
                        alt84=1;
                        }
                        break;
                    case 131:
                        {
                        alt84=2;
                        }
                        break;
                    case As:
                        {
                        alt84=3;
                        }
                        break;
                    default:
                        if (backtracking>0) {failed=true; return ex;}
                        NoViableAltException nvae =
                            new NoViableAltException("1329:7: ( 'isnot' | 'is' | 'as' )", 84, 0, input);

                        throw nvae;
                    }

                    switch (alt84) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1329:9: 'isnot'
                            {
                            match(input,130,FOLLOW_130_in_relationalExpr6056); if (failed) return ex;
                            if ( backtracking==0 ) {
                              kind = FanExpressionConstants.E_ISNOT;
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1330:9: 'is'
                            {
                            match(input,131,FOLLOW_131_in_relationalExpr6068); if (failed) return ex;
                            if ( backtracking==0 ) {
                              kind = FanExpressionConstants.E_IS;
                            }

                            }
                            break;
                        case 3 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1331:9: 'as'
                            {
                            match(input,As,FOLLOW_As_in_relationalExpr6080); if (failed) return ex;
                            if ( backtracking==0 ) {
                              kind = FanExpressionConstants.E_AS;
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_ctype_in_relationalExpr6096);
                    t=ctype();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                      		    BinaryExpression binary = new BinaryExpression();
                      		    if (ex!=null) {
                      		      binary.setFirst(ex);
                      		      binary.setStart(ex.sourceStart());
                      		    }
                      		    if (s!=null) {
                      		      binary.setSecond(t);
                      		      binary.setEnd(t.sourceEnd());
                      		    }
                      		    binary.setKind(kind);
                      		    ex = binary;
                      		    
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1346:7: ( ( LEG | LE | LT | GE | GT ) s= elvisExpr )*
                    {
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1346:7: ( ( LEG | LE | LT | GE | GT ) s= elvisExpr )*
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( ((LA86_0>=LEG && LA86_0<=GT)) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1347:7: ( LEG | LE | LT | GE | GT ) s= elvisExpr
                    	    {
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1347:7: ( LEG | LE | LT | GE | GT )
                    	    int alt85=5;
                    	    switch ( input.LA(1) ) {
                    	    case LEG:
                    	        {
                    	        alt85=1;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt85=2;
                    	        }
                    	        break;
                    	    case LT:
                    	        {
                    	        alt85=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt85=4;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt85=5;
                    	        }
                    	        break;
                    	    default:
                    	        if (backtracking>0) {failed=true; return ex;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("1347:7: ( LEG | LE | LT | GE | GT )", 85, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt85) {
                    	        case 1 :
                    	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1347:9: LEG
                    	            {
                    	            match(input,LEG,FOLLOW_LEG_in_relationalExpr6123); if (failed) return ex;
                    	            if ( backtracking==0 ) {
                    	              kind = FanExpressionConstants.E_COMPARE;
                    	            }

                    	            }
                    	            break;
                    	        case 2 :
                    	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1348:9: LE
                    	            {
                    	            match(input,LE,FOLLOW_LE_in_relationalExpr6134); if (failed) return ex;
                    	            if ( backtracking==0 ) {
                    	              kind = FanExpressionConstants.E_LE;
                    	            }

                    	            }
                    	            break;
                    	        case 3 :
                    	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1349:9: LT
                    	            {
                    	            match(input,LT,FOLLOW_LT_in_relationalExpr6145); if (failed) return ex;
                    	            if ( backtracking==0 ) {
                    	              kind = FanExpressionConstants.E_LT;
                    	            }

                    	            }
                    	            break;
                    	        case 4 :
                    	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1350:9: GE
                    	            {
                    	            match(input,GE,FOLLOW_GE_in_relationalExpr6156); if (failed) return ex;
                    	            if ( backtracking==0 ) {
                    	              kind = FanExpressionConstants.E_GE;
                    	            }

                    	            }
                    	            break;
                    	        case 5 :
                    	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1351:9: GT
                    	            {
                    	            match(input,GT,FOLLOW_GT_in_relationalExpr6167); if (failed) return ex;
                    	            if ( backtracking==0 ) {
                    	              kind = FanExpressionConstants.E_GT;
                    	            }

                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_elvisExpr_in_relationalExpr6180);
                    	    s=elvisExpr();
                    	    _fsp--;
                    	    if (failed) return ex;
                    	    if ( backtracking==0 ) {

                    	              BinaryExpression binary = new BinaryExpression();
                    	              if (ex!=null) {
                    	                binary.setFirst(ex);
                    	                binary.setStart(ex.sourceStart());
                    	              }
                    	              if (s!=null) {
                    	                binary.setSecond(s);
                    	                binary.setEnd(s.sourceEnd());
                    	              }
                    	              binary.setKind(kind);
                    	              ex = binary;
                    	              
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop86;
                        }
                    } while (true);


                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end relationalExpr


    // $ANTLR start elvisExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1370:1: elvisExpr returns [Expression ex] : f= rangeExpr ( Elvis s= rangeExpr )? ;
    public final Expression elvisExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1370:33: (f= rangeExpr ( Elvis s= rangeExpr )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1371:3: f= rangeExpr ( Elvis s= rangeExpr )?
            {
            pushFollow(FOLLOW_rangeExpr_in_elvisExpr6219);
            f=rangeExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1372:3: ( Elvis s= rangeExpr )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==Elvis) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1372:4: Elvis s= rangeExpr
                    {
                    match(input,Elvis,FOLLOW_Elvis_in_elvisExpr6226); if (failed) return ex;
                    pushFollow(FOLLOW_rangeExpr_in_elvisExpr6230);
                    s=rangeExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                              BinaryExpression binary = new BinaryExpression();
                              if (ex!=null) {
                                binary.setFirst(ex);
                                binary.setStart(ex.sourceStart());
                              }
                              if (s!=null) {
                                binary.setSecond(s);
                                binary.setEnd(s.sourceEnd());
                              }
                              binary.setKind(FanExpressionConstants.E_ELVIS);
                              ex = binary;
                              
                    }

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end elvisExpr


    // $ANTLR start rangeExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1388:1: rangeExpr returns [Expression ex] : f= bitOrExpr ( ( RangeExclOld | RangeExcl | Range ) s= bitOrExpr )* ;
    public final Expression rangeExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        int kind = 0;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1388:55: (f= bitOrExpr ( ( RangeExclOld | RangeExcl | Range ) s= bitOrExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1389:3: f= bitOrExpr ( ( RangeExclOld | RangeExcl | Range ) s= bitOrExpr )*
            {
            pushFollow(FOLLOW_bitOrExpr_in_rangeExpr6266);
            f=bitOrExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1390:3: ( ( RangeExclOld | RangeExcl | Range ) s= bitOrExpr )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( ((LA90_0>=RangeExclOld && LA90_0<=Range)) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1390:4: ( RangeExclOld | RangeExcl | Range ) s= bitOrExpr
            	    {
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1390:4: ( RangeExclOld | RangeExcl | Range )
            	    int alt89=3;
            	    switch ( input.LA(1) ) {
            	    case RangeExclOld:
            	        {
            	        alt89=1;
            	        }
            	        break;
            	    case RangeExcl:
            	        {
            	        alt89=2;
            	        }
            	        break;
            	    case Range:
            	        {
            	        alt89=3;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return ex;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("1390:4: ( RangeExclOld | RangeExcl | Range )", 89, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt89) {
            	        case 1 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1390:7: RangeExclOld
            	            {
            	            match(input,RangeExclOld,FOLLOW_RangeExclOld_in_rangeExpr6276); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_RANGE_EXCL;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1391:7: RangeExcl
            	            {
            	            match(input,RangeExcl,FOLLOW_RangeExcl_in_rangeExpr6286); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_RANGE;
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1392:7: Range
            	            {
            	            match(input,Range,FOLLOW_Range_in_rangeExpr6295); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_RANGE;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bitOrExpr_in_rangeExpr6309);
            	    s=bitOrExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	              BinaryExpression binary = new BinaryExpression();
            	              if (ex!=null) {
            	                binary.setFirst(ex);
            	                binary.setStart(ex.sourceStart());
            	              }
            	              if (s!=null) {
            	                binary.setSecond(s);
            	                binary.setEnd(s.sourceEnd());
            	              }
            	              binary.setKind(kind);
            	              ex = binary;
            	            
            	    }

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end rangeExpr


    // $ANTLR start bitOrExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1410:1: bitOrExpr returns [Expression ex] : f= bitAndExpr ( ( BNot | Pipe )=> ( BNot | Pipe ) s= bitAndExpr )* ;
    public final Expression bitOrExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        int kind = 0;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1410:56: (f= bitAndExpr ( ( BNot | Pipe )=> ( BNot | Pipe ) s= bitAndExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1411:3: f= bitAndExpr ( ( BNot | Pipe )=> ( BNot | Pipe ) s= bitAndExpr )*
            {
            pushFollow(FOLLOW_bitAndExpr_in_bitOrExpr6346);
            f=bitAndExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1412:3: ( ( BNot | Pipe )=> ( BNot | Pipe ) s= bitAndExpr )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==Pipe) ) {
                    int LA92_2 = input.LA(2);

                    if ( (LA92_2==Id) ) {
                        int LA92_4 = input.LA(3);

                        if ( (LA92_4==DoubleColon) ) {
                            int LA92_27 = input.LA(4);

                            if ( (LA92_27==Id) ) {
                                int LA92_129 = input.LA(5);

                                if ( (LA92_129==Qu) ) {
                                    int LA92_31 = input.LA(6);

                                    if ( (LA92_31==LB) ) {
                                        int LA92_130 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_31==Colon) ) {
                                        int LA92_131 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_31==Qu) ) {
                                        int LA92_132 = input.LA(7);

                                        if ( (LA92_132==Id) ) {
                                            int LA92_133 = input.LA(8);

                                            if ( (LA92_133==DoubleColon) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Define) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==LP) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Qu) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==LB) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Colon) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Id) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Comma) ) {
                                                int LA92_233 = input.LA(9);

                                                if ( (synpred48()) ) {
                                                    alt92=1;
                                                }


                                            }
                                            else if ( (LA92_133==Arrow) ) {
                                                int LA92_234 = input.LA(9);

                                                if ( (synpred48()) ) {
                                                    alt92=1;
                                                }


                                            }
                                            else if ( (LA92_133==Pipe) ) {
                                                int LA92_235 = input.LA(9);

                                                if ( (synpred48()) ) {
                                                    alt92=1;
                                                }


                                            }
                                            else if ( (LA92_133==LC) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Dot) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==QuDot) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==QuArrow) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Incr) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Decr) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Mul) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Div) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Mod) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Add) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Sub) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==LShift) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==RShift) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==BAnd) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==BNot) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==RangeExclOld) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==RangeExcl) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Range) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Elvis) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==130) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==131) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==As) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==LEG) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==LE) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==LT) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==GE) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==GT) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Eq) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==NEq) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==SEq) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==NSEq) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==And) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Or) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Assign) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==MulAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==DivAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==ModAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==AddAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==SubAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==LShiftAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==RShiftAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==BAndAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==BNotAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==PipeAss) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==EOF) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Semi) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==RC) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Break) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Continue) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==For) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==If) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Return) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Switch) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Throw) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==While) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Try) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Inv) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Not) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Number) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==String) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Uri) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Null) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Super) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==This) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==It) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==True) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==False) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Dsl) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Pound) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==AtId) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Default) && (synpred48())) {
                                                alt92=1;
                                            }
                                            else if ( (LA92_133==Case) && (synpred48())) {
                                                alt92=1;
                                            }


                                        }
                                        else if ( (LA92_132==Comma) ) {
                                            int LA92_222 = input.LA(8);

                                            if ( (synpred48()) ) {
                                                alt92=1;
                                            }


                                        }
                                        else if ( (LA92_132==Arrow) ) {
                                            int LA92_223 = input.LA(8);

                                            if ( (synpred48()) ) {
                                                alt92=1;
                                            }


                                        }
                                        else if ( (LA92_132==Pipe) ) {
                                            int LA92_224 = input.LA(8);

                                            if ( (synpred48()) ) {
                                                alt92=1;
                                            }


                                        }
                                        else if ( (LA92_132==Dot) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==QuDot) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==QuArrow) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==LB) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==LP) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Incr) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Decr) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Mul) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Div) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Mod) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Add) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Sub) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==LShift) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==RShift) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==BAnd) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==RangeExclOld) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==RangeExcl) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Range) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Elvis) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==130) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==131) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==As) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==LEG) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==LE) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==LT) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==GE) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==GT) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Eq) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==NEq) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==SEq) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==NSEq) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==And) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Or) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Qu) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Assign) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==MulAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==DivAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==ModAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==AddAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==SubAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==LShiftAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==RShiftAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==BAndAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==BNotAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==PipeAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Abstract) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Const) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Final) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Internal) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Native) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==New) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Once) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Override) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Private) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Protected) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Public) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==ReadOnly) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Static) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Virtual) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Class) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Mixin) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Enum) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==AtId) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==LC) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==EOF) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Semi) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==RC) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==RP) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Break) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Continue) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==For) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==If) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Return) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Switch) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Throw) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==While) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Try) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Inv) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Not) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Number) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==String) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Uri) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Null) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Super) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==This) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==It) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==True) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==False) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Dsl) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Pound) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Else) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Catch) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Finally) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Default) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Case) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==Colon) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==RB) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_132==BNot) && (synpred48())) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_31==Id) ) {
                                        int LA92_133 = input.LA(7);

                                        if ( (LA92_133==DoubleColon) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Define) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==LP) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Qu) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==LB) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Colon) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Id) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Comma) ) {
                                            int LA92_233 = input.LA(8);

                                            if ( (synpred48()) ) {
                                                alt92=1;
                                            }


                                        }
                                        else if ( (LA92_133==Arrow) ) {
                                            int LA92_234 = input.LA(8);

                                            if ( (synpred48()) ) {
                                                alt92=1;
                                            }


                                        }
                                        else if ( (LA92_133==Pipe) ) {
                                            int LA92_235 = input.LA(8);

                                            if ( (synpred48()) ) {
                                                alt92=1;
                                            }


                                        }
                                        else if ( (LA92_133==LC) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Dot) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==QuDot) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==QuArrow) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Incr) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Decr) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Mul) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Div) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Mod) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Add) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Sub) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==LShift) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==RShift) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==BAnd) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==BNot) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==RangeExclOld) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==RangeExcl) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Range) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Elvis) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==130) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==131) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==As) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==LEG) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==LE) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==LT) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==GE) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==GT) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Eq) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==NEq) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==SEq) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==NSEq) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==And) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Or) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Assign) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==MulAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==DivAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==ModAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==AddAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==SubAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==LShiftAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==RShiftAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==BAndAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==BNotAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==PipeAss) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==EOF) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Semi) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==RC) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Break) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Continue) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==For) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==If) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Return) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Switch) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Throw) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==While) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Try) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Inv) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Not) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Number) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==String) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Uri) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Null) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Super) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==This) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==It) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==True) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==False) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Dsl) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Pound) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==AtId) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Default) && (synpred48())) {
                                            alt92=1;
                                        }
                                        else if ( (LA92_133==Case) && (synpred48())) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_31==Comma) ) {
                                        int LA92_134 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_31==Arrow) ) {
                                        int LA92_135 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_31==Pipe) ) {
                                        int LA92_136 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_31==Dot) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==QuDot) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==QuArrow) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==LP) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Incr) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Decr) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Mul) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Div) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Mod) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Add) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Sub) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==LShift) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==RShift) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==BAnd) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==RangeExclOld) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==RangeExcl) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Range) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Elvis) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==130) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==131) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==As) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==LEG) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==LE) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==LT) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==GE) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==GT) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Eq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==NEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==SEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==NSEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==And) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Or) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Assign) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==MulAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==DivAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==ModAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==AddAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==SubAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==LShiftAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==RShiftAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==BAndAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==BNotAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==PipeAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Abstract) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Const) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Final) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Internal) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Native) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==New) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Once) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Override) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Private) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Protected) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Public) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==ReadOnly) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Static) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Virtual) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Class) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Mixin) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Enum) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==AtId) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==LC) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==EOF) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Semi) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==RC) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==RP) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Break) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Continue) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==For) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==If) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Return) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Switch) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Throw) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==While) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Try) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Inv) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Not) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Number) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==String) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Uri) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Null) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Super) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==This) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==It) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==True) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==False) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Dsl) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Pound) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Else) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Catch) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Finally) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Default) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==Case) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==RB) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_31==BNot) && (synpred48())) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_129==LB) ) {
                                    int LA92_217 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_129==Colon) ) {
                                    int LA92_218 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_129==Id) ) {
                                    int LA92_34 = input.LA(6);

                                    if ( (LA92_34==Define) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==DoubleColon) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==LP) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Qu) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==LB) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Colon) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Id) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Comma) ) {
                                        int LA92_165 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_34==Arrow) ) {
                                        int LA92_166 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_34==Pipe) ) {
                                        int LA92_167 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_34==LC) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Dot) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==QuDot) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==QuArrow) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Incr) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Decr) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Mul) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Div) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Mod) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Add) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Sub) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==LShift) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==RShift) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==BAnd) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==BNot) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==RangeExclOld) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==RangeExcl) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Range) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Elvis) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==130) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==131) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==As) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==LEG) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==LE) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==LT) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==GE) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==GT) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Eq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==NEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==SEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==NSEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==And) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Or) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Assign) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==MulAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==DivAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==ModAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==AddAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==SubAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==LShiftAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==RShiftAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==BAndAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==BNotAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==PipeAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==EOF) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Semi) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==RC) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Default) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Case) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Break) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Continue) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==For) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==If) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Return) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Switch) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Throw) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==While) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Try) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Inv) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Not) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Number) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==String) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Uri) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Null) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Super) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==This) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==It) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==True) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==False) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Dsl) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==Pound) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_34==AtId) && (synpred48())) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_129==Comma) ) {
                                    int LA92_219 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_129==Arrow) ) {
                                    int LA92_220 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_129==Pipe) ) {
                                    int LA92_221 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_129==LC) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Pound) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Dot) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==QuDot) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==QuArrow) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==LP) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Incr) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Decr) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Mul) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Div) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Mod) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Add) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Sub) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==LShift) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==RShift) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==BAnd) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==RangeExclOld) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==RangeExcl) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Range) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Elvis) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==130) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==131) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==As) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==LEG) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==LE) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==LT) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==GE) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==GT) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Eq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==NEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==SEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==NSEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==And) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Or) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Assign) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==MulAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==DivAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==ModAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==AddAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==SubAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==LShiftAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==RShiftAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==BAndAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==BNotAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==PipeAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Abstract) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Const) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Final) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Internal) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Native) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==New) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Once) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Override) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Private) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Protected) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Public) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==ReadOnly) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Static) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Virtual) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Class) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Mixin) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Enum) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==AtId) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==EOF) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Semi) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==RC) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==RP) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Break) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Continue) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==For) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==If) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Return) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Switch) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Throw) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==While) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Try) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Inv) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Not) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Number) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==String) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Uri) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Null) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Super) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==This) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==It) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==True) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==False) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Dsl) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Else) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Catch) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Finally) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Default) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==Case) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==RB) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_129==BNot) && (synpred48())) {
                                    alt92=1;
                                }


                            }


                        }
                        else if ( (LA92_4==Comma) ) {
                            int LA92_28 = input.LA(4);

                            if ( (synpred48()) ) {
                                alt92=1;
                            }


                        }
                        else if ( (LA92_4==Arrow) ) {
                            int LA92_29 = input.LA(4);

                            if ( (synpred48()) ) {
                                alt92=1;
                            }


                        }
                        else if ( (LA92_4==Pipe) ) {
                            int LA92_30 = input.LA(4);

                            if ( (synpred48()) ) {
                                alt92=1;
                            }


                        }
                        else if ( (LA92_4==Qu) ) {
                            int LA92_31 = input.LA(4);

                            if ( (LA92_31==LB) ) {
                                int LA92_130 = input.LA(5);

                                if ( (synpred48()) ) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_31==Colon) ) {
                                int LA92_131 = input.LA(5);

                                if ( (synpred48()) ) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_31==Qu) ) {
                                int LA92_132 = input.LA(5);

                                if ( (LA92_132==Id) ) {
                                    int LA92_133 = input.LA(6);

                                    if ( (LA92_133==DoubleColon) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Define) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==LP) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Qu) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==LB) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Colon) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Id) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Comma) ) {
                                        int LA92_233 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_133==Arrow) ) {
                                        int LA92_234 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_133==Pipe) ) {
                                        int LA92_235 = input.LA(7);

                                        if ( (synpred48()) ) {
                                            alt92=1;
                                        }


                                    }
                                    else if ( (LA92_133==LC) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Dot) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==QuDot) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==QuArrow) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Incr) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Decr) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Mul) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Div) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Mod) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Add) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Sub) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==LShift) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==RShift) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==BAnd) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==BNot) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==RangeExclOld) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==RangeExcl) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Range) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Elvis) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==130) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==131) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==As) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==LEG) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==LE) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==LT) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==GE) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==GT) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Eq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==NEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==SEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==NSEq) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==And) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Or) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Assign) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==MulAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==DivAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==ModAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==AddAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==SubAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==LShiftAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==RShiftAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==BAndAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==BNotAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==PipeAss) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==EOF) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Semi) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==RC) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Break) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Continue) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==For) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==If) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Return) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Switch) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Throw) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==While) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Try) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Inv) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Not) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Number) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==String) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Uri) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Null) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Super) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==This) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==It) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==True) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==False) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Dsl) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Pound) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==AtId) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Default) && (synpred48())) {
                                        alt92=1;
                                    }
                                    else if ( (LA92_133==Case) && (synpred48())) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_132==Comma) ) {
                                    int LA92_222 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_132==Arrow) ) {
                                    int LA92_223 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_132==Pipe) ) {
                                    int LA92_224 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_132==Dot) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==QuDot) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==QuArrow) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==LB) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==LP) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Incr) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Decr) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Mul) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Div) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Mod) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Add) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Sub) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==LShift) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==RShift) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==BAnd) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==RangeExclOld) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==RangeExcl) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Range) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Elvis) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==130) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==131) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==As) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==LEG) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==LE) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==LT) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==GE) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==GT) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Eq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==NEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==SEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==NSEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==And) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Or) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Qu) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Assign) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==MulAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==DivAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==ModAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==AddAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==SubAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==LShiftAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==RShiftAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==BAndAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==BNotAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==PipeAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Abstract) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Const) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Final) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Internal) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Native) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==New) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Once) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Override) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Private) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Protected) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Public) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==ReadOnly) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Static) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Virtual) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Class) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Mixin) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Enum) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==AtId) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==LC) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==EOF) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Semi) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==RC) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==RP) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Break) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Continue) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==For) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==If) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Return) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Switch) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Throw) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==While) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Try) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Inv) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Not) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Number) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==String) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Uri) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Null) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Super) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==This) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==It) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==True) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==False) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Dsl) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Pound) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Else) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Catch) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Finally) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Default) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Case) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==Colon) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==RB) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_132==BNot) && (synpred48())) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_31==Id) ) {
                                int LA92_133 = input.LA(5);

                                if ( (LA92_133==DoubleColon) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Define) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==LP) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Qu) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==LB) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Colon) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Id) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Comma) ) {
                                    int LA92_233 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_133==Arrow) ) {
                                    int LA92_234 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_133==Pipe) ) {
                                    int LA92_235 = input.LA(6);

                                    if ( (synpred48()) ) {
                                        alt92=1;
                                    }


                                }
                                else if ( (LA92_133==LC) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Dot) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==QuDot) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==QuArrow) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Incr) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Decr) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Mul) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Div) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Mod) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Add) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Sub) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==LShift) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==RShift) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==BAnd) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==BNot) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==RangeExclOld) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==RangeExcl) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Range) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Elvis) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==130) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==131) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==As) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==LEG) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==LE) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==LT) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==GE) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==GT) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Eq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==NEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==SEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==NSEq) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==And) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Or) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Assign) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==MulAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==DivAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==ModAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==AddAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==SubAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==LShiftAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==RShiftAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==BAndAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==BNotAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==PipeAss) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==EOF) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Semi) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==RC) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Break) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Continue) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==For) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==If) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Return) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Switch) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Throw) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==While) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Try) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Inv) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Not) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Number) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==String) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Uri) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Null) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Super) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==This) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==It) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==True) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==False) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Dsl) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Pound) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==AtId) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Default) && (synpred48())) {
                                    alt92=1;
                                }
                                else if ( (LA92_133==Case) && (synpred48())) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_31==Comma) ) {
                                int LA92_134 = input.LA(5);

                                if ( (synpred48()) ) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_31==Arrow) ) {
                                int LA92_135 = input.LA(5);

                                if ( (synpred48()) ) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_31==Pipe) ) {
                                int LA92_136 = input.LA(5);

                                if ( (synpred48()) ) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_31==Dot) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==QuDot) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==QuArrow) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==LP) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Incr) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Decr) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Mul) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Div) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Mod) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Add) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Sub) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==LShift) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==RShift) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==BAnd) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==RangeExclOld) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==RangeExcl) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Range) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Elvis) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==130) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==131) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==As) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==LEG) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==LE) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==LT) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==GE) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==GT) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Eq) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==NEq) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==SEq) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==NSEq) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==And) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Or) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Assign) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==MulAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==DivAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==ModAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==AddAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==SubAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==LShiftAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==RShiftAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==BAndAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==BNotAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==PipeAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Abstract) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Const) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Final) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Internal) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Native) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==New) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Once) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Override) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Private) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Protected) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Public) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==ReadOnly) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Static) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Virtual) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Class) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Mixin) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Enum) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==AtId) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==LC) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==EOF) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Semi) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==RC) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==RP) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Break) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Continue) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==For) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==If) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Return) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Switch) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Throw) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==While) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Try) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Inv) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Not) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Number) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==String) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Uri) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Null) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Super) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==This) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==It) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==True) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==False) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Dsl) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Pound) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Else) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Catch) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Finally) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Default) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==Case) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==RB) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_31==BNot) && (synpred48())) {
                                alt92=1;
                            }


                        }
                        else if ( (LA92_4==LB) ) {
                            int LA92_32 = input.LA(4);

                            if ( (synpred48()) ) {
                                alt92=1;
                            }


                        }
                        else if ( (LA92_4==Colon) ) {
                            int LA92_33 = input.LA(4);

                            if ( (synpred48()) ) {
                                alt92=1;
                            }


                        }
                        else if ( (LA92_4==Id) ) {
                            int LA92_34 = input.LA(4);

                            if ( (LA92_34==Define) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==DoubleColon) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==LP) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Qu) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==LB) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Colon) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Id) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Comma) ) {
                                int LA92_165 = input.LA(5);

                                if ( (synpred48()) ) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_34==Arrow) ) {
                                int LA92_166 = input.LA(5);

                                if ( (synpred48()) ) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_34==Pipe) ) {
                                int LA92_167 = input.LA(5);

                                if ( (synpred48()) ) {
                                    alt92=1;
                                }


                            }
                            else if ( (LA92_34==LC) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Dot) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==QuDot) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==QuArrow) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Incr) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Decr) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Mul) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Div) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Mod) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Add) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Sub) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==LShift) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==RShift) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==BAnd) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==BNot) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==RangeExclOld) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==RangeExcl) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Range) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Elvis) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==130) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==131) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==As) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==LEG) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==LE) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==LT) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==GE) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==GT) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Eq) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==NEq) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==SEq) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==NSEq) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==And) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Or) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Assign) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==MulAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==DivAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==ModAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==AddAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==SubAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==LShiftAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==RShiftAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==BAndAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==BNotAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==PipeAss) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==EOF) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Semi) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==RC) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Default) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Case) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Break) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Continue) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==For) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==If) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Return) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Switch) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Throw) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==While) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Try) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Inv) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Not) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Number) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==String) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Uri) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Null) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Super) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==This) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==It) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==True) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==False) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Dsl) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==Pound) && (synpred48())) {
                                alt92=1;
                            }
                            else if ( (LA92_34==AtId) && (synpred48())) {
                                alt92=1;
                            }


                        }
                        else if ( (LA92_4==LC) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Dot) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==QuDot) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==QuArrow) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==LP) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Incr) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Decr) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Mul) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Div) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Mod) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Add) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Sub) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==LShift) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==RShift) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==BAnd) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==RangeExclOld) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==RangeExcl) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Range) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Elvis) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==130) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==131) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==As) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==LEG) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==LE) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==LT) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==GE) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==GT) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Eq) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==NEq) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==SEq) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==NSEq) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==And) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Or) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Assign) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==MulAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==DivAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==ModAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==AddAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==SubAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==LShiftAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==RShiftAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==BAndAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==BNotAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==PipeAss) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Abstract) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Const) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Final) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Internal) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Native) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==New) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Once) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Override) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Private) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Protected) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Public) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==ReadOnly) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Static) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Virtual) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Class) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Mixin) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Enum) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==AtId) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==EOF) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Semi) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==RC) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==RP) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Break) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Continue) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==For) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==If) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Return) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Switch) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Throw) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==While) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Try) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Inv) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Not) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Number) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==String) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Uri) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Null) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Super) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==This) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==It) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==True) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==False) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Dsl) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Pound) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Else) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Catch) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Finally) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Default) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==Case) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==RB) && (synpred48())) {
                            alt92=1;
                        }
                        else if ( (LA92_4==BNot) && (synpred48())) {
                            alt92=1;
                        }


                    }
                    else if ( (LA92_2==LB) ) {
                        int LA92_5 = input.LA(3);

                        if ( (synpred48()) ) {
                            alt92=1;
                        }


                    }
                    else if ( (LA92_2==Pipe) ) {
                        int LA92_6 = input.LA(3);

                        if ( (synpred48()) ) {
                            alt92=1;
                        }


                    }
                    else if ( (LA92_2==Add) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Sub) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Incr) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Decr) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Inv) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Not) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==BAnd) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==LP) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Number) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==String) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Uri) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Null) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Super) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==This) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==It) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==True) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==False) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Dsl) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==Pound) && (synpred48())) {
                        alt92=1;
                    }
                    else if ( (LA92_2==AtId) && (synpred48())) {
                        alt92=1;
                    }


                }
                else if ( (LA92_0==BNot) && (synpred48())) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1412:4: ( BNot | Pipe )=> ( BNot | Pipe ) s= bitAndExpr
            	    {
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1412:19: ( BNot | Pipe )
            	    int alt91=2;
            	    int LA91_0 = input.LA(1);

            	    if ( (LA91_0==BNot) ) {
            	        alt91=1;
            	    }
            	    else if ( (LA91_0==Pipe) ) {
            	        alt91=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return ex;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("1412:19: ( BNot | Pipe )", 91, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt91) {
            	        case 1 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1413:7: BNot
            	            {
            	            match(input,BNot,FOLLOW_BNot_in_bitOrExpr6369); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_BNOT;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1414:7: Pipe
            	            {
            	            match(input,Pipe,FOLLOW_Pipe_in_bitOrExpr6379); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_BOR;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bitAndExpr_in_bitOrExpr6391);
            	    s=bitAndExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	              BinaryExpression binary = new BinaryExpression();
            	              if (ex!=null) {
            	                binary.setFirst(ex);
            	                binary.setStart(ex.sourceStart());
            	              }
            	              if (s!=null) {
            	                binary.setSecond(s);
            	                binary.setEnd(s.sourceEnd());
            	              }
            	              binary.setKind(kind);
            	              ex = binary;
            	            
            	    }

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end bitOrExpr


    // $ANTLR start bitAndExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1431:1: bitAndExpr returns [Expression ex] : f= shiftExpr ( ( BAnd )=> BAnd s= shiftExpr )* ;
    public final Expression bitAndExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1431:35: (f= shiftExpr ( ( BAnd )=> BAnd s= shiftExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1432:3: f= shiftExpr ( ( BAnd )=> BAnd s= shiftExpr )*
            {
            pushFollow(FOLLOW_shiftExpr_in_bitAndExpr6420);
            f=shiftExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1433:3: ( ( BAnd )=> BAnd s= shiftExpr )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==BAnd) ) {
                    switch ( input.LA(2) ) {
                    case Add:
                        {
                        switch ( input.LA(3) ) {
                        case Add:
                            {
                            int LA93_26 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Sub:
                            {
                            int LA93_27 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Incr:
                            {
                            int LA93_28 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Decr:
                            {
                            int LA93_29 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Inv:
                            {
                            int LA93_30 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Not:
                            {
                            int LA93_31 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case BAnd:
                            {
                            int LA93_32 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case LP:
                            {
                            int LA93_33 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Number:
                            {
                            int LA93_34 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case String:
                            {
                            int LA93_35 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Uri:
                            {
                            int LA93_36 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Null:
                            {
                            int LA93_37 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Super:
                            {
                            int LA93_38 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case This:
                            {
                            int LA93_39 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case It:
                            {
                            int LA93_40 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case True:
                            {
                            int LA93_41 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case False:
                            {
                            int LA93_42 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Dsl:
                            {
                            int LA93_43 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Pound:
                            {
                            int LA93_44 = input.LA(4);

                            if ( (LA93_44==Id) ) {
                                int LA93_134 = input.LA(5);

                                if ( (synpred49()) ) {
                                    alt93=1;
                                }


                            }


                            }
                            break;
                        case Id:
                            {
                            int LA93_45 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case LB:
                            {
                            int LA93_46 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Pipe:
                            {
                            int LA93_47 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case AtId:
                            {
                            int LA93_48 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;

                        }

                        }
                        break;
                    case Sub:
                        {
                        switch ( input.LA(3) ) {
                        case Add:
                            {
                            int LA93_49 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Sub:
                            {
                            int LA93_50 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Incr:
                            {
                            int LA93_51 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Decr:
                            {
                            int LA93_52 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Inv:
                            {
                            int LA93_53 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Not:
                            {
                            int LA93_54 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case BAnd:
                            {
                            int LA93_55 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case LP:
                            {
                            int LA93_56 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Number:
                            {
                            int LA93_57 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case String:
                            {
                            int LA93_58 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Uri:
                            {
                            int LA93_59 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Null:
                            {
                            int LA93_60 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Super:
                            {
                            int LA93_61 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case This:
                            {
                            int LA93_62 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case It:
                            {
                            int LA93_63 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case True:
                            {
                            int LA93_64 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case False:
                            {
                            int LA93_65 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Dsl:
                            {
                            int LA93_66 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Pound:
                            {
                            int LA93_67 = input.LA(4);

                            if ( (LA93_67==Id) ) {
                                int LA93_146 = input.LA(5);

                                if ( (synpred49()) ) {
                                    alt93=1;
                                }


                            }


                            }
                            break;
                        case Id:
                            {
                            int LA93_68 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case LB:
                            {
                            int LA93_69 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Pipe:
                            {
                            int LA93_70 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case AtId:
                            {
                            int LA93_71 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;

                        }

                        }
                        break;
                    case Incr:
                        {
                        switch ( input.LA(3) ) {
                        case Add:
                            {
                            int LA93_72 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Sub:
                            {
                            int LA93_73 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Incr:
                            {
                            int LA93_74 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Decr:
                            {
                            int LA93_75 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Inv:
                            {
                            int LA93_76 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Not:
                            {
                            int LA93_77 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case BAnd:
                            {
                            int LA93_78 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case LP:
                            {
                            int LA93_79 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Number:
                            {
                            int LA93_80 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case String:
                            {
                            int LA93_81 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Uri:
                            {
                            int LA93_82 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Null:
                            {
                            int LA93_83 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Super:
                            {
                            int LA93_84 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case This:
                            {
                            int LA93_85 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case It:
                            {
                            int LA93_86 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case True:
                            {
                            int LA93_87 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case False:
                            {
                            int LA93_88 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Dsl:
                            {
                            int LA93_89 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Pound:
                            {
                            int LA93_90 = input.LA(4);

                            if ( (LA93_90==Id) ) {
                                int LA93_157 = input.LA(5);

                                if ( (synpred49()) ) {
                                    alt93=1;
                                }


                            }


                            }
                            break;
                        case Id:
                            {
                            int LA93_91 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case LB:
                            {
                            int LA93_92 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Pipe:
                            {
                            int LA93_93 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case AtId:
                            {
                            int LA93_94 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;

                        }

                        }
                        break;
                    case Decr:
                        {
                        switch ( input.LA(3) ) {
                        case Add:
                            {
                            int LA93_95 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Sub:
                            {
                            int LA93_96 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Incr:
                            {
                            int LA93_97 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Decr:
                            {
                            int LA93_98 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Inv:
                            {
                            int LA93_99 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Not:
                            {
                            int LA93_100 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case BAnd:
                            {
                            int LA93_101 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case LP:
                            {
                            int LA93_102 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Number:
                            {
                            int LA93_103 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case String:
                            {
                            int LA93_104 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Uri:
                            {
                            int LA93_105 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Null:
                            {
                            int LA93_106 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Super:
                            {
                            int LA93_107 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case This:
                            {
                            int LA93_108 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case It:
                            {
                            int LA93_109 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case True:
                            {
                            int LA93_110 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case False:
                            {
                            int LA93_111 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Dsl:
                            {
                            int LA93_112 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Pound:
                            {
                            int LA93_113 = input.LA(4);

                            if ( (LA93_113==Id) ) {
                                int LA93_168 = input.LA(5);

                                if ( (synpred49()) ) {
                                    alt93=1;
                                }


                            }


                            }
                            break;
                        case Id:
                            {
                            int LA93_114 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case LB:
                            {
                            int LA93_115 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case Pipe:
                            {
                            int LA93_116 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;
                        case AtId:
                            {
                            int LA93_117 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                            }
                            break;

                        }

                        }
                        break;
                    case Inv:
                        {
                        int LA93_7 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case Not:
                        {
                        int LA93_8 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case BAnd:
                        {
                        int LA93_9 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case LP:
                        {
                        int LA93_10 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case Number:
                        {
                        int LA93_11 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case String:
                        {
                        int LA93_12 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case Uri:
                        {
                        int LA93_13 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case Null:
                        {
                        int LA93_14 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case Super:
                        {
                        int LA93_15 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case This:
                        {
                        int LA93_16 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case It:
                        {
                        int LA93_17 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case True:
                        {
                        int LA93_18 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case False:
                        {
                        int LA93_19 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case Dsl:
                        {
                        int LA93_20 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case Pound:
                        {
                        int LA93_21 = input.LA(3);

                        if ( (LA93_21==Id) ) {
                            int LA93_123 = input.LA(4);

                            if ( (synpred49()) ) {
                                alt93=1;
                            }


                        }


                        }
                        break;
                    case Id:
                        {
                        int LA93_22 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case LB:
                        {
                        int LA93_23 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case Pipe:
                        {
                        int LA93_24 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;
                    case AtId:
                        {
                        int LA93_25 = input.LA(3);

                        if ( (synpred49()) ) {
                            alt93=1;
                        }


                        }
                        break;

                    }

                }


                switch (alt93) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1433:4: ( BAnd )=> BAnd s= shiftExpr
            	    {
            	    match(input,BAnd,FOLLOW_BAnd_in_bitAndExpr6432); if (failed) return ex;
            	    pushFollow(FOLLOW_shiftExpr_in_bitAndExpr6441);
            	    s=shiftExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	              BinaryExpression binary = new BinaryExpression();
            	              if (ex!=null) {
            	                binary.setFirst(ex);
            	                binary.setStart(ex.sourceStart());
            	              }
            	              if (s!=null) {
            	                binary.setSecond(s);
            	                binary.setEnd(s.sourceEnd());
            	              }
            	              binary.setKind(FanExpressionConstants.E_BAND);
            	              ex = binary;
            	            
            	    }

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end bitAndExpr


    // $ANTLR start shiftExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1449:1: shiftExpr returns [Expression ex] : f= addExpr ( ( LShift | RShift ) s= addExpr )* ;
    public final Expression shiftExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        int kind = 0;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1449:55: (f= addExpr ( ( LShift | RShift ) s= addExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1450:3: f= addExpr ( ( LShift | RShift ) s= addExpr )*
            {
            pushFollow(FOLLOW_addExpr_in_shiftExpr6473);
            f=addExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1450:24: ( ( LShift | RShift ) s= addExpr )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( ((LA95_0>=LShift && LA95_0<=RShift)) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1451:3: ( LShift | RShift ) s= addExpr
            	    {
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1451:3: ( LShift | RShift )
            	    int alt94=2;
            	    int LA94_0 = input.LA(1);

            	    if ( (LA94_0==LShift) ) {
            	        alt94=1;
            	    }
            	    else if ( (LA94_0==RShift) ) {
            	        alt94=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return ex;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("1451:3: ( LShift | RShift )", 94, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt94) {
            	        case 1 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1451:5: LShift
            	            {
            	            match(input,LShift,FOLLOW_LShift_in_shiftExpr6484); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_LSHIFT;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1452:5: RShift
            	            {
            	            match(input,RShift,FOLLOW_RShift_in_shiftExpr6492); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_RSHIFT;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_addExpr_in_shiftExpr6506);
            	    s=addExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	              BinaryExpression binary = new BinaryExpression();
            	              if (ex!=null) {
            	                binary.setFirst(ex);
            	                binary.setStart(ex.sourceStart());
            	              }
            	              if (s!=null) {
            	                binary.setSecond(s);
            	                binary.setEnd(s.sourceEnd());
            	              }
            	              binary.setKind(kind);
            	              ex = binary;
            	            
            	    }

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end shiftExpr


    // $ANTLR start addExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1470:1: addExpr returns [Expression ex] : f= multExpr ( ( Add | Sub )=> ( Add | Sub ) s= multExpr )* ;
    public final Expression addExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        int kind = 0;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1470:53: (f= multExpr ( ( Add | Sub )=> ( Add | Sub ) s= multExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1471:3: f= multExpr ( ( Add | Sub )=> ( Add | Sub ) s= multExpr )*
            {
            pushFollow(FOLLOW_multExpr_in_addExpr6541);
            f=multExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1471:25: ( ( Add | Sub )=> ( Add | Sub ) s= multExpr )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==Add) ) {
                    int LA97_71 = input.LA(2);

                    if ( (synpred50()) ) {
                        alt97=1;
                    }


                }
                else if ( (LA97_0==Sub) ) {
                    int LA97_72 = input.LA(2);

                    if ( (synpred50()) ) {
                        alt97=1;
                    }


                }


                switch (alt97) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1472:3: ( Add | Sub )=> ( Add | Sub ) s= multExpr
            	    {
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1472:16: ( Add | Sub )
            	    int alt96=2;
            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==Add) ) {
            	        alt96=1;
            	    }
            	    else if ( (LA96_0==Sub) ) {
            	        alt96=2;
            	    }
            	    else {
            	        if (backtracking>0) {failed=true; return ex;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("1472:16: ( Add | Sub )", 96, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt96) {
            	        case 1 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1473:7: Add
            	            {
            	            match(input,Add,FOLLOW_Add_in_addExpr6566); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_PLUS;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1474:7: Sub
            	            {
            	            match(input,Sub,FOLLOW_Sub_in_addExpr6576); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_MINUS;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multExpr_in_addExpr6585);
            	    s=multExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	              BinaryExpression binary = new BinaryExpression();
            	              if (ex!=null) {
            	                binary.setFirst(ex);
            	                binary.setStart(ex.sourceStart());
            	              }
            	              if (s!=null) {
            	                binary.setSecond(s);
            	                binary.setEnd(s.sourceEnd());
            	              }
            	              binary.setKind(kind);
            	              ex = binary;
            	            
            	    }

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end addExpr


    // $ANTLR start multExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1491:1: multExpr returns [Expression ex] : f= unaryExpr ( ( Mul | Div | Mod ) s= unaryExpr )* ;
    public final Expression multExpr() throws RecognitionException {
        Expression ex = null;

        Expression f = null;

        Expression s = null;


        int kind = 0;
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1491:54: (f= unaryExpr ( ( Mul | Div | Mod ) s= unaryExpr )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1492:3: f= unaryExpr ( ( Mul | Div | Mod ) s= unaryExpr )*
            {
            pushFollow(FOLLOW_unaryExpr_in_multExpr6619);
            f=unaryExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex = f;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1493:3: ( ( Mul | Div | Mod ) s= unaryExpr )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( ((LA99_0>=Mul && LA99_0<=Mod)) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1493:4: ( Mul | Div | Mod ) s= unaryExpr
            	    {
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1493:4: ( Mul | Div | Mod )
            	    int alt98=3;
            	    switch ( input.LA(1) ) {
            	    case Mul:
            	        {
            	        alt98=1;
            	        }
            	        break;
            	    case Div:
            	        {
            	        alt98=2;
            	        }
            	        break;
            	    case Mod:
            	        {
            	        alt98=3;
            	        }
            	        break;
            	    default:
            	        if (backtracking>0) {failed=true; return ex;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("1493:4: ( Mul | Div | Mod )", 98, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt98) {
            	        case 1 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1494:7: Mul
            	            {
            	            match(input,Mul,FOLLOW_Mul_in_multExpr6635); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_MULT;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1495:7: Div
            	            {
            	            match(input,Div,FOLLOW_Div_in_multExpr6645); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_DIV;
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1496:7: Mod
            	            {
            	            match(input,Mod,FOLLOW_Mod_in_multExpr6655); if (failed) return ex;
            	            if ( backtracking==0 ) {
            	              kind = FanExpressionConstants.E_MOD;
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpr_in_multExpr6669);
            	    s=unaryExpr();
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {

            	              BinaryExpression binary = new BinaryExpression();
            	              if (ex!=null) {
            	                binary.setFirst(ex);
            	                binary.setStart(ex.sourceStart());
            	              }
            	              if (s!=null) {
            	                binary.setSecond(s);
            	                binary.setEnd(s.sourceEnd());
            	              }
            	              binary.setKind(kind);
            	              ex = binary;
            	            
            	    }

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end multExpr


    // $ANTLR start unaryExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1513:1: unaryExpr returns [Expression ex] : (a= Add u1= unaryExpr | s= Sub u2= unaryExpr | i= Incr u3= unaryExpr | d= Decr u4= unaryExpr | u4= unaryExprNotPlusMinus );
    public final Expression unaryExpr() throws RecognitionException {
        Expression ex = null;

        Token a=null;
        Token s=null;
        Token i=null;
        Token d=null;
        Expression u1 = null;

        Expression u2 = null;

        Expression u3 = null;

        Expression u4 = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1514:5: (a= Add u1= unaryExpr | s= Sub u2= unaryExpr | i= Incr u3= unaryExpr | d= Decr u4= unaryExpr | u4= unaryExprNotPlusMinus )
            int alt100=5;
            switch ( input.LA(1) ) {
            case Add:
                {
                alt100=1;
                }
                break;
            case Sub:
                {
                alt100=2;
                }
                break;
            case Incr:
                {
                alt100=3;
                }
                break;
            case Decr:
                {
                alt100=4;
                }
                break;
            case This:
            case Super:
            case It:
            case Null:
            case False:
            case True:
            case AtId:
            case Id:
            case Number:
            case String:
            case Uri:
            case Dsl:
            case LB:
            case LP:
            case Pipe:
            case BAnd:
            case Not:
            case Inv:
            case Pound:
                {
                alt100=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return ex;}
                NoViableAltException nvae =
                    new NoViableAltException("1513:1: unaryExpr returns [Expression ex] : (a= Add u1= unaryExpr | s= Sub u2= unaryExpr | i= Incr u3= unaryExpr | d= Decr u4= unaryExpr | u4= unaryExprNotPlusMinus );", 100, 0, input);

                throw nvae;
            }

            switch (alt100) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1514:9: a= Add u1= unaryExpr
                    {
                    a=(Token)input.LT(1);
                    match(input,Add,FOLLOW_Add_in_unaryExpr6700); if (failed) return ex;
                    pushFollow(FOLLOW_unaryExpr_in_unaryExpr6706);
                    u1=unaryExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                                UnaryExpression uu1 = new UnaryExpression(); 
                                uu1.setStart(convert(a).sourceStart());
                      	        if (u1!=null) {
                      	          uu1.setOperand(u1);
                      	          uu1.setEnd(u1.sourceEnd());
                      	        }
                                uu1.setKind(FanExpressionConstants.E_PLUS);
                                ex= uu1;
                              
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1524:9: s= Sub u2= unaryExpr
                    {
                    s=(Token)input.LT(1);
                    match(input,Sub,FOLLOW_Sub_in_unaryExpr6720); if (failed) return ex;
                    pushFollow(FOLLOW_unaryExpr_in_unaryExpr6726);
                    u2=unaryExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                                UnaryExpression uu2 = new UnaryExpression();
                                if (s != null) 
                                  uu2.setStart(convert(s).sourceStart());
                                if (u2!=null) {
                                  uu2.setOperand(u2);
                                  uu2.setEnd(u2.sourceEnd());
                                }
                                uu2.setKind(FanExpressionConstants.E_MINUS);
                                ex= uu2;
                              
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1535:9: i= Incr u3= unaryExpr
                    {
                    i=(Token)input.LT(1);
                    match(input,Incr,FOLLOW_Incr_in_unaryExpr6740); if (failed) return ex;
                    pushFollow(FOLLOW_unaryExpr_in_unaryExpr6746);
                    u3=unaryExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                                UnaryExpression uu3 = new UnaryExpression();
                                if (i != null) 
                                  uu3.setStart(convert(i).sourceStart());
                                if (u3!=null) {
                                  uu3.setOperand(u3);
                                  uu3.setEnd(u3.sourceEnd());
                                }
                                uu3.setKind(FanExpressionConstants.E_INC);
                                ex= uu3;
                              
                    }

                    }
                    break;
                case 4 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1546:9: d= Decr u4= unaryExpr
                    {
                    d=(Token)input.LT(1);
                    match(input,Decr,FOLLOW_Decr_in_unaryExpr6760); if (failed) return ex;
                    pushFollow(FOLLOW_unaryExpr_in_unaryExpr6766);
                    u4=unaryExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                                UnaryExpression uu4 = new UnaryExpression();
                                if (d != null) 
                                  uu4.setStart(convert(d).sourceStart());
                                if (u4!=null) {
                                  uu4.setOperand(u4);
                                  uu4.setEnd(u4.sourceEnd());
                                }
                                uu4.setKind(FanExpressionConstants.E_DEC);
                                ex= uu4;
                              
                    }

                    }
                    break;
                case 5 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1557:9: u4= unaryExprNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExprNotPlusMinus_in_unaryExpr6782);
                    u4=unaryExprNotPlusMinus();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex = u4;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end unaryExpr


    // $ANTLR start unaryExprNotPlusMinus
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1560:1: unaryExprNotPlusMinus returns [Expression ex] options {backtrack=true; } : (i= Inv u1= unaryExpr | n= Not u2= unaryExpr | b= BAnd u3= unaryExpr | u4= castExpr | u5= termExpr ( ( Incr )=>ii= Incr | ( Decr )=>dd= Decr )? );
    public final Expression unaryExprNotPlusMinus() throws RecognitionException {
        Expression ex = null;

        Token i=null;
        Token n=null;
        Token b=null;
        Token ii=null;
        Token dd=null;
        Expression u1 = null;

        Expression u2 = null;

        Expression u3 = null;

        Expression u4 = null;

        Expression u5 = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1561:5: (i= Inv u1= unaryExpr | n= Not u2= unaryExpr | b= BAnd u3= unaryExpr | u4= castExpr | u5= termExpr ( ( Incr )=>ii= Incr | ( Decr )=>dd= Decr )? )
            int alt102=5;
            switch ( input.LA(1) ) {
            case Inv:
                {
                alt102=1;
                }
                break;
            case Not:
                {
                alt102=2;
                }
                break;
            case BAnd:
                {
                alt102=3;
                }
                break;
            case LP:
                {
                int LA102_4 = input.LA(2);

                if ( (synpred54()) ) {
                    alt102=4;
                }
                else if ( (true) ) {
                    alt102=5;
                }
                else {
                    if (backtracking>0) {failed=true; return ex;}
                    NoViableAltException nvae =
                        new NoViableAltException("1560:1: unaryExprNotPlusMinus returns [Expression ex] options {backtrack=true; } : (i= Inv u1= unaryExpr | n= Not u2= unaryExpr | b= BAnd u3= unaryExpr | u4= castExpr | u5= termExpr ( ( Incr )=>ii= Incr | ( Decr )=>dd= Decr )? );", 102, 4, input);

                    throw nvae;
                }
                }
                break;
            case This:
            case Super:
            case It:
            case Null:
            case False:
            case True:
            case AtId:
            case Id:
            case Number:
            case String:
            case Uri:
            case Dsl:
            case LB:
            case Pipe:
            case Pound:
                {
                alt102=5;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return ex;}
                NoViableAltException nvae =
                    new NoViableAltException("1560:1: unaryExprNotPlusMinus returns [Expression ex] options {backtrack=true; } : (i= Inv u1= unaryExpr | n= Not u2= unaryExpr | b= BAnd u3= unaryExpr | u4= castExpr | u5= termExpr ( ( Incr )=>ii= Incr | ( Decr )=>dd= Decr )? );", 102, 0, input);

                throw nvae;
            }

            switch (alt102) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1561:9: i= Inv u1= unaryExpr
                    {
                    i=(Token)input.LT(1);
                    match(input,Inv,FOLLOW_Inv_in_unaryExprNotPlusMinus6817); if (failed) return ex;
                    pushFollow(FOLLOW_unaryExpr_in_unaryExprNotPlusMinus6821);
                    u1=unaryExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                                UnaryExpression uu1 = new UnaryExpression();
                                if (i != null) 
                                  uu1.setStart(convert(i).sourceStart());
                                if (u1!=null) {
                                  uu1.setOperand(u1);
                                  uu1.setEnd(u1.sourceEnd());
                                }
                                uu1.setKind(FanExpressionConstants.E_TILDE);
                                ex= uu1;
                              
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1572:9: n= Not u2= unaryExpr
                    {
                    n=(Token)input.LT(1);
                    match(input,Not,FOLLOW_Not_in_unaryExprNotPlusMinus6834); if (failed) return ex;
                    pushFollow(FOLLOW_unaryExpr_in_unaryExprNotPlusMinus6838);
                    u2=unaryExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                                UnaryExpression uu2 = new UnaryExpression();
                                if (n != null) 
                                  uu2.setStart(convert(n).sourceStart());
                                if (u2!=null) {
                                  uu2.setOperand(u2);
                                  uu2.setEnd(u2.sourceEnd());
                                }
                                uu2.setKind(FanExpressionConstants.E_LNOT);
                                ex= uu2;
                              
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1583:9: b= BAnd u3= unaryExpr
                    {
                    b=(Token)input.LT(1);
                    match(input,BAnd,FOLLOW_BAnd_in_unaryExprNotPlusMinus6852); if (failed) return ex;
                    pushFollow(FOLLOW_unaryExpr_in_unaryExprNotPlusMinus6856);
                    u3=unaryExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {

                                UnaryExpression uu3 = new UnaryExpression();
                                if (b != null) 
                                  uu3.setStart(convert(b).sourceStart());
                                if (u3!=null) {
                                  uu3.setOperand(u3);
                                  uu3.setEnd(u3.sourceEnd());
                                }
                                uu3.setKind(FanExpressionConstants.E_BAND);
                                ex= uu3;
                              
                    }

                    }
                    break;
                case 4 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1594:9: u4= castExpr
                    {
                    pushFollow(FOLLOW_castExpr_in_unaryExprNotPlusMinus6870);
                    u4=castExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex = u4;
                    }

                    }
                    break;
                case 5 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1595:9: u5= termExpr ( ( Incr )=>ii= Incr | ( Decr )=>dd= Decr )?
                    {
                    pushFollow(FOLLOW_termExpr_in_unaryExprNotPlusMinus6884);
                    u5=termExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex = u5;
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1595:32: ( ( Incr )=>ii= Incr | ( Decr )=>dd= Decr )?
                    int alt101=3;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==Incr) ) {
                        int LA101_1 = input.LA(2);

                        if ( (synpred55()) ) {
                            alt101=1;
                        }
                    }
                    else if ( (LA101_0==Decr) ) {
                        int LA101_2 = input.LA(2);

                        if ( (synpred56()) ) {
                            alt101=2;
                        }
                    }
                    switch (alt101) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1595:33: ( Incr )=>ii= Incr
                            {
                            ii=(Token)input.LT(1);
                            match(input,Incr,FOLLOW_Incr_in_unaryExprNotPlusMinus6895); if (failed) return ex;
                            if ( backtracking==0 ) {

                              	          UnaryExpression uu5 = new UnaryExpression();
                              	          if (ii != null) 
                              	            uu5.setEnd(convert(ii).sourceEnd());
                              	          if (u5!=null) {
                              	            uu5.setOperand(u5);
                              	            uu5.setStart(u5.sourceStart());
                              	          }
                              	          uu5.setKind(FanExpressionConstants.E_INC);
                              	          ex= uu5;
                              	        
                            }

                            }
                            break;
                        case 2 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1606:10: ( Decr )=>dd= Decr
                            {
                            dd=(Token)input.LT(1);
                            match(input,Decr,FOLLOW_Decr_in_unaryExprNotPlusMinus6913); if (failed) return ex;
                            if ( backtracking==0 ) {

                                        UnaryExpression uu6 = new UnaryExpression();
                                        if (dd != null) 
                                          uu6.setEnd(convert(dd).sourceEnd());
                                        if (u5!=null) {
                                          uu6.setOperand(u5);
                                          uu6.setStart(u5.sourceStart());
                                        }
                                        uu6.setKind(FanExpressionConstants.E_DEC);
                                        ex= uu6;
                                      
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end unaryExprNotPlusMinus


    // $ANTLR start castExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1620:1: castExpr returns [Expression ex] : (l= LP c= ctype r= RP ) u1= unaryExpr ;
    public final Expression castExpr() throws RecognitionException {
        Expression ex = null;

        Token l=null;
        Token r=null;
        FanTypeRef c = null;

        Expression u1 = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1621:5: ( (l= LP c= ctype r= RP ) u1= unaryExpr )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1621:8: (l= LP c= ctype r= RP ) u1= unaryExpr
            {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1621:8: (l= LP c= ctype r= RP )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1621:9: l= LP c= ctype r= RP
            {
            l=(Token)input.LT(1);
            match(input,LP,FOLLOW_LP_in_castExpr6944); if (failed) return ex;
            pushFollow(FOLLOW_ctype_in_castExpr6948);
            c=ctype();
            _fsp--;
            if (failed) return ex;
            r=(Token)input.LT(1);
            match(input,RP,FOLLOW_RP_in_castExpr6952); if (failed) return ex;

            }

            pushFollow(FOLLOW_unaryExpr_in_castExpr6957);
            u1=unaryExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {

                        UnaryExpression uu1 = new UnaryExpression();
                        if (l != null)  
                          uu1.setStart(convert(l).sourceStart());
                        if (r != null)
                          uu1.setEnd(convert(r).sourceEnd());
                        if (c!=null) {
                          uu1.setOperand(c);
                        }
                        uu1.setKind(FanExpressionConstants.E_CAST);
                        ex= uu1;
                      
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end castExpr


    // $ANTLR start termExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1635:1: termExpr returns [Expression ex] : base= termBaseExpr ( ( Dot | Arrow | QuDot | QuArrow | LP | LC | LB )=>next= termChainExpr[base] )* ;
    public final Expression termExpr() throws RecognitionException {
        Expression ex = null;

        Expression base = null;

        Expression next = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1635:33: (base= termBaseExpr ( ( Dot | Arrow | QuDot | QuArrow | LP | LC | LB )=>next= termChainExpr[base] )* )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1636:3: base= termBaseExpr ( ( Dot | Arrow | QuDot | QuArrow | LP | LC | LB )=>next= termChainExpr[base] )*
            {
            pushFollow(FOLLOW_termBaseExpr_in_termExpr6981);
            base=termBaseExpr();
            _fsp--;
            if (failed) return ex;
            if ( backtracking==0 ) {
              ex=base;
            }
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1637:3: ( ( Dot | Arrow | QuDot | QuArrow | LP | LC | LB )=>next= termChainExpr[base] )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==LB) ) {
                    switch ( input.LA(2) ) {
                    case Id:
                        {
                        int LA103_8 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case LB:
                        {
                        int LA103_9 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Pipe:
                        {
                        int LA103_10 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Comma:
                        {
                        int LA103_11 = input.LA(3);

                        if ( (LA103_11==RB) ) {
                            int LA103_57 = input.LA(4);

                            if ( (synpred57()) ) {
                                alt103=1;
                            }


                        }


                        }
                        break;
                    case Colon:
                        {
                        int LA103_12 = input.LA(3);

                        if ( (LA103_12==RB) ) {
                            int LA103_57 = input.LA(4);

                            if ( (synpred57()) ) {
                                alt103=1;
                            }


                        }


                        }
                        break;
                    case Add:
                        {
                        int LA103_13 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Sub:
                        {
                        int LA103_14 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Incr:
                        {
                        int LA103_15 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Decr:
                        {
                        int LA103_16 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Inv:
                        {
                        int LA103_17 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Not:
                        {
                        int LA103_18 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case BAnd:
                        {
                        int LA103_19 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case LP:
                        {
                        int LA103_20 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Number:
                        {
                        int LA103_21 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case String:
                        {
                        int LA103_22 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Uri:
                        {
                        int LA103_23 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Null:
                        {
                        int LA103_24 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Super:
                        {
                        int LA103_25 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case This:
                        {
                        int LA103_26 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case It:
                        {
                        int LA103_27 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case True:
                        {
                        int LA103_28 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case False:
                        {
                        int LA103_29 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Dsl:
                        {
                        int LA103_30 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;
                    case Pound:
                        {
                        int LA103_31 = input.LA(3);

                        if ( (LA103_31==Id) ) {
                            int LA103_58 = input.LA(4);

                            if ( (synpred57()) ) {
                                alt103=1;
                            }


                        }


                        }
                        break;
                    case AtId:
                        {
                        int LA103_32 = input.LA(3);

                        if ( (synpred57()) ) {
                            alt103=1;
                        }


                        }
                        break;

                    }

                }
                else if ( (LA103_0==LP) ) {
                    int LA103_3 = input.LA(2);

                    if ( (LA103_3==Id) ) {
                        int LA103_33 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==LB) ) {
                        int LA103_34 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Pipe) ) {
                        int LA103_35 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Add) ) {
                        int LA103_36 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Sub) ) {
                        int LA103_37 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Incr) ) {
                        int LA103_38 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Decr) ) {
                        int LA103_39 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Inv) ) {
                        int LA103_40 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Not) ) {
                        int LA103_41 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==BAnd) ) {
                        int LA103_42 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==LP) ) {
                        int LA103_43 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Number) ) {
                        int LA103_44 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==String) ) {
                        int LA103_45 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Uri) ) {
                        int LA103_46 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Null) ) {
                        int LA103_47 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Super) ) {
                        int LA103_48 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==This) ) {
                        int LA103_49 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==It) ) {
                        int LA103_50 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==True) ) {
                        int LA103_51 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==False) ) {
                        int LA103_52 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Dsl) ) {
                        int LA103_53 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==Pound) ) {
                        int LA103_54 = input.LA(3);

                        if ( (LA103_54==Id) ) {
                            int LA103_59 = input.LA(4);

                            if ( ((synpred57()&&noNewLineBefore())) ) {
                                alt103=1;
                            }


                        }


                    }
                    else if ( (LA103_3==AtId) ) {
                        int LA103_55 = input.LA(3);

                        if ( ((synpred57()&&noNewLineBefore())) ) {
                            alt103=1;
                        }


                    }
                    else if ( (LA103_3==RP) && ((synpred57()&&noNewLineBefore()))) {
                        alt103=1;
                    }


                }
                else if ( (LA103_0==Dot) && (synpred57())) {
                    alt103=1;
                }
                else if ( (LA103_0==Arrow) && (synpred57())) {
                    alt103=1;
                }
                else if ( (LA103_0==QuDot) && (synpred57())) {
                    alt103=1;
                }
                else if ( (LA103_0==QuArrow) && (synpred57())) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1637:4: ( Dot | Arrow | QuDot | QuArrow | LP | LC | LB )=>next= termChainExpr[base]
            	    {
            	    pushFollow(FOLLOW_termChainExpr_in_termExpr7011);
            	    next=termChainExpr(base);
            	    _fsp--;
            	    if (failed) return ex;
            	    if ( backtracking==0 ) {
            	      ex=base=next;
            	    }

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end termExpr


    // $ANTLR start termBaseExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1642:1: termBaseExpr returns [Expression ex] : (nl= numberLiteral | sl= stringLiteral | ul= uriLiteral | nu= nullLiteral | sr= superRef | tr= thisRef | ir= itRef | bl= boolLiteral | ds= dslLiteral | ( Pound )=>slit= slotWithoutTypeLit | ( ctype Pound )=>sot= slotOrTypeLiteral | ( simpleType LC )=>stCall= callExprWithoutArgs | ( idNotType )=>ie= idExpr[null] | cl= closure | ( ctype )=>r= ctype | ( LB )=>lm= listOrMap | ( LP )=>pe= parenExpr );
    public final Expression termBaseExpr() throws RecognitionException {
        Expression ex = null;

        Literal nl = null;

        StrLiteral sl = null;

        UriLiteral ul = null;

        NullLiteral nu = null;

        SuperReference sr = null;

        ThisReference tr = null;

        ItReference ir = null;

        BoolLiteral bl = null;

        DslLiteral ds = null;

        SlotLiteral slit = null;

        Literal sot = null;

        Expression stCall = null;

        Expression ie = null;

        Closure cl = null;

        FanTypeRef r = null;

        Expression lm = null;

        UnaryExpression pe = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1642:38: (nl= numberLiteral | sl= stringLiteral | ul= uriLiteral | nu= nullLiteral | sr= superRef | tr= thisRef | ir= itRef | bl= boolLiteral | ds= dslLiteral | ( Pound )=>slit= slotWithoutTypeLit | ( ctype Pound )=>sot= slotOrTypeLiteral | ( simpleType LC )=>stCall= callExprWithoutArgs | ( idNotType )=>ie= idExpr[null] | cl= closure | ( ctype )=>r= ctype | ( LB )=>lm= listOrMap | ( LP )=>pe= parenExpr )
            int alt104=17;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1643:3: nl= numberLiteral
                    {
                    pushFollow(FOLLOW_numberLiteral_in_termBaseExpr7038);
                    nl=numberLiteral();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=nl;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1644:5: sl= stringLiteral
                    {
                    pushFollow(FOLLOW_stringLiteral_in_termBaseExpr7048);
                    sl=stringLiteral();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=sl;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1645:5: ul= uriLiteral
                    {
                    pushFollow(FOLLOW_uriLiteral_in_termBaseExpr7058);
                    ul=uriLiteral();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ul;
                    }

                    }
                    break;
                case 4 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1646:5: nu= nullLiteral
                    {
                    pushFollow(FOLLOW_nullLiteral_in_termBaseExpr7068);
                    nu=nullLiteral();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=nu;
                    }

                    }
                    break;
                case 5 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1647:5: sr= superRef
                    {
                    pushFollow(FOLLOW_superRef_in_termBaseExpr7078);
                    sr=superRef();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=sr;
                    }

                    }
                    break;
                case 6 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1648:5: tr= thisRef
                    {
                    pushFollow(FOLLOW_thisRef_in_termBaseExpr7088);
                    tr=thisRef();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=tr;
                    }

                    }
                    break;
                case 7 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1649:5: ir= itRef
                    {
                    pushFollow(FOLLOW_itRef_in_termBaseExpr7098);
                    ir=itRef();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ir;
                    }

                    }
                    break;
                case 8 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1650:5: bl= boolLiteral
                    {
                    pushFollow(FOLLOW_boolLiteral_in_termBaseExpr7108);
                    bl=boolLiteral();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=bl;
                    }

                    }
                    break;
                case 9 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1651:5: ds= dslLiteral
                    {
                    pushFollow(FOLLOW_dslLiteral_in_termBaseExpr7118);
                    ds=dslLiteral();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ds;
                    }

                    }
                    break;
                case 10 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1652:5: ( Pound )=>slit= slotWithoutTypeLit
                    {
                    pushFollow(FOLLOW_slotWithoutTypeLit_in_termBaseExpr7132);
                    slit=slotWithoutTypeLit();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=slit;
                    }

                    }
                    break;
                case 11 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1653:5: ( ctype Pound )=>sot= slotOrTypeLiteral
                    {
                    pushFollow(FOLLOW_slotOrTypeLiteral_in_termBaseExpr7148);
                    sot=slotOrTypeLiteral();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=sot;
                    }

                    }
                    break;
                case 12 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1654:5: ( simpleType LC )=>stCall= callExprWithoutArgs
                    {
                    pushFollow(FOLLOW_callExprWithoutArgs_in_termBaseExpr7164);
                    stCall=callExprWithoutArgs();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=stCall;
                    }

                    }
                    break;
                case 13 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1655:5: ( idNotType )=>ie= idExpr[null]
                    {
                    pushFollow(FOLLOW_idExpr_in_termBaseExpr7178);
                    ie=idExpr(null);
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ie;
                    }

                    }
                    break;
                case 14 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1656:5: cl= closure
                    {
                    pushFollow(FOLLOW_closure_in_termBaseExpr7189);
                    cl=closure();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=cl;
                    }

                    }
                    break;
                case 15 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1657:5: ( ctype )=>r= ctype
                    {
                    pushFollow(FOLLOW_ctype_in_termBaseExpr7204);
                    r=ctype();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                       ex=r; 
                    }

                    }
                    break;
                case 16 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1658:5: ( LB )=>lm= listOrMap
                    {
                    pushFollow(FOLLOW_listOrMap_in_termBaseExpr7219);
                    lm=listOrMap();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=lm;
                    }

                    }
                    break;
                case 17 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1659:5: ( LP )=>pe= parenExpr
                    {
                    pushFollow(FOLLOW_parenExpr_in_termBaseExpr7234);
                    pe=parenExpr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=pe;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end termBaseExpr


    // $ANTLR start idNotType
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1662:1: idNotType : ( AtId | Id ) ( ( ( LB )=> LB ~ ( Comma | Colon ) ) | ~ ( Colon | DoubleColon ) ) ;
    public final void idNotType() throws RecognitionException {
        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1662:10: ( ( AtId | Id ) ( ( ( LB )=> LB ~ ( Comma | Colon ) ) | ~ ( Colon | DoubleColon ) ) )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1663:5: ( AtId | Id ) ( ( ( LB )=> LB ~ ( Comma | Colon ) ) | ~ ( Colon | DoubleColon ) )
            {
            if ( (input.LA(1)>=AtId && input.LA(1)<=Id) ) {
                input.consume();
                errorRecovery=false;failed=false;
            }
            else {
                if (backtracking>0) {failed=true; return ;}
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_idNotType7248);    throw mse;
            }

            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1664:5: ( ( ( LB )=> LB ~ ( Comma | Colon ) ) | ~ ( Colon | DoubleColon ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==LB) ) {
                int LA105_1 = input.LA(2);

                if ( ((LA105_1>=Abstract && LA105_1<=RC)||(LA105_1>=DoubleColon && LA105_1<=Define)||(LA105_1>=Semi && LA105_1<=131)) && (synpred65())) {
                    alt105=1;
                }
                else if ( (LA105_1==EOF) ) {
                    alt105=2;
                }
                else {
                    if (backtracking>0) {failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("1664:5: ( ( ( LB )=> LB ~ ( Comma | Colon ) ) | ~ ( Colon | DoubleColon ) )", 105, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA105_0>=Abstract && LA105_0<=Dsl)||(LA105_0>=RB && LA105_0<=Comma)||LA105_0==Define||(LA105_0>=Semi && LA105_0<=131)) ) {
                alt105=2;
            }
            else {
                if (backtracking>0) {failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("1664:5: ( ( ( LB )=> LB ~ ( Comma | Colon ) ) | ~ ( Colon | DoubleColon ) )", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1665:7: ( ( LB )=> LB ~ ( Comma | Colon ) )
                    {
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1665:7: ( ( LB )=> LB ~ ( Comma | Colon ) )
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1665:8: ( LB )=> LB ~ ( Comma | Colon )
                    {
                    match(input,LB,FOLLOW_LB_in_idNotType7273); if (failed) return ;
                    if ( (input.LA(1)>=Abstract && input.LA(1)<=RC)||(input.LA(1)>=DoubleColon && input.LA(1)<=Define)||(input.LA(1)>=Semi && input.LA(1)<=131) ) {
                        input.consume();
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return ;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_idNotType7275);    throw mse;
                    }


                    }


                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1666:7: ~ ( Colon | DoubleColon )
                    {
                    if ( (input.LA(1)>=Abstract && input.LA(1)<=Comma)||input.LA(1)==Define||(input.LA(1)>=Semi && input.LA(1)<=131) ) {
                        input.consume();
                        errorRecovery=false;failed=false;
                    }
                    else {
                        if (backtracking>0) {failed=true; return ;}
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_idNotType7289);    throw mse;
                    }


                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end idNotType


    // $ANTLR start callExprWithoutArgs
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1670:1: callExprWithoutArgs returns [Expression ex] : st= simpleType cl= itBlock ;
    public final Expression callExprWithoutArgs() throws RecognitionException {
        Expression ex = null;

        SimpleTypeRef st = null;

        Closure cl = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1671:3: (st= simpleType cl= itBlock )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1672:3: st= simpleType cl= itBlock
            {
            pushFollow(FOLLOW_simpleType_in_callExprWithoutArgs7319);
            st=simpleType();
            _fsp--;
            if (failed) return ex;
            pushFollow(FOLLOW_itBlock_in_callExprWithoutArgs7325);
            cl=itBlock();
            _fsp--;
            if (failed) return ex;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0 && st != null && cl != null) {
                ex = factory.handleIdAccess(st,st.getType(),cl);
              }

        }
        return ex;
    }
    // $ANTLR end callExprWithoutArgs


    // $ANTLR start slotWithoutTypeLit
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1681:1: slotWithoutTypeLit returns [SlotLiteral literal] : Pound slot= Id ;
    public final SlotLiteral slotWithoutTypeLit() throws RecognitionException {
        SlotLiteral literal = null;

        Token slot=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1681:49: ( Pound slot= Id )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1682:3: Pound slot= Id
            {
            match(input,Pound,FOLLOW_Pound_in_slotWithoutTypeLit7343); if (failed) return literal;
            slot=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_slotWithoutTypeLit7349); if (failed) return literal;
            if ( backtracking==0 ) {
              literal = factory.makeSlotLiteral(slot, null);
            }

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return literal;
    }
    // $ANTLR end slotWithoutTypeLit


    // $ANTLR start slotOrTypeLiteral
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1686:1: slotOrTypeLiteral returns [Literal literal] : r= ctype p= Pound (slot= Id )? ;
    public final Literal slotOrTypeLiteral() throws RecognitionException {
        Literal literal = null;

        Token p=null;
        Token slot=null;
        FanTypeRef r = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1686:44: (r= ctype p= Pound (slot= Id )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1687:5: r= ctype p= Pound (slot= Id )?
            {
            pushFollow(FOLLOW_ctype_in_slotOrTypeLiteral7369);
            r=ctype();
            _fsp--;
            if (failed) return literal;
            p=(Token)input.LT(1);
            match(input,Pound,FOLLOW_Pound_in_slotOrTypeLiteral7377); if (failed) return literal;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1689:5: (slot= Id )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==Id) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1689:6: slot= Id
                    {
                    slot=(Token)input.LT(1);
                    match(input,Id,FOLLOW_Id_in_slotOrTypeLiteral7386); if (failed) return literal;

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0 && r != null) {
                if (slot != null)
                  literal = factory.makeSlotLiteral(slot, r);
                else
                  literal = factory.makeTypeLiteral(r);
              }

        }
        return literal;
    }
    // $ANTLR end slotOrTypeLiteral


    // $ANTLR start parenExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1700:1: parenExpr returns [UnaryExpression expr] : lp= LP ex= expr rp= RP ;
    public final UnaryExpression parenExpr() throws RecognitionException {
        UnaryExpression expr = null;

        Token lp=null;
        Token rp=null;
        Expression ex = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1701:3: (lp= LP ex= expr rp= RP )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1702:3: lp= LP ex= expr rp= RP
            {
            lp=(Token)input.LT(1);
            match(input,LP,FOLLOW_LP_in_parenExpr7411); if (failed) return expr;
            pushFollow(FOLLOW_expr_in_parenExpr7417);
            ex=expr();
            _fsp--;
            if (failed) return expr;
            rp=(Token)input.LT(1);
            match(input,RP,FOLLOW_RP_in_parenExpr7423); if (failed) return expr;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) expr = factory.makeParenExpr(lp,ex,rp);

        }
        return expr;
    }
    // $ANTLR end parenExpr


    // $ANTLR start itRef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1710:1: itRef returns [ItReference ref] : token= 'it' ;
    public final ItReference itRef() throws RecognitionException {
        ItReference ref = null;

        Token token=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1711:3: (token= 'it' )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1712:3: token= 'it'
            {
            token=(Token)input.LT(1);
            match(input,It,FOLLOW_It_in_itRef7448); if (failed) return ref;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) ref = factory.makeItRef(token);

        }
        return ref;
    }
    // $ANTLR end itRef


    // $ANTLR start thisRef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1718:1: thisRef returns [ThisReference ref] : token= 'this' ;
    public final ThisReference thisRef() throws RecognitionException {
        ThisReference ref = null;

        Token token=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1719:3: (token= 'this' )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1720:3: token= 'this'
            {
            token=(Token)input.LT(1);
            match(input,This,FOLLOW_This_in_thisRef7473); if (failed) return ref;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) ref = factory.makeThisRef(token);

        }
        return ref;
    }
    // $ANTLR end thisRef


    // $ANTLR start superRef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1726:1: superRef returns [SuperReference ref] : token= 'super' ;
    public final SuperReference superRef() throws RecognitionException {
        SuperReference ref = null;

        Token token=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1727:3: (token= 'super' )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1728:3: token= 'super'
            {
            token=(Token)input.LT(1);
            match(input,Super,FOLLOW_Super_in_superRef7498); if (failed) return ref;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) ref = factory.makeSuperRef(token);

        }
        return ref;
    }
    // $ANTLR end superRef


    // $ANTLR start stringLiteral
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1734:1: stringLiteral returns [StrLiteral literal] : token= String ;
    public final StrLiteral stringLiteral() throws RecognitionException {
        StrLiteral literal = null;

        Token token=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1735:3: (token= String )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1736:3: token= String
            {
            token=(Token)input.LT(1);
            match(input,String,FOLLOW_String_in_stringLiteral7523); if (failed) return literal;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) literal = factory.makeStrLiteral(token);

        }
        return literal;
    }
    // $ANTLR end stringLiteral


    // $ANTLR start nullLiteral
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1742:1: nullLiteral returns [NullLiteral literal] : token= 'null' ;
    public final NullLiteral nullLiteral() throws RecognitionException {
        NullLiteral literal = null;

        Token token=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1743:3: (token= 'null' )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1744:3: token= 'null'
            {
            token=(Token)input.LT(1);
            match(input,Null,FOLLOW_Null_in_nullLiteral7548); if (failed) return literal;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) literal = factory.makeNullLiteral(token);

        }
        return literal;
    }
    // $ANTLR end nullLiteral


    // $ANTLR start uriLiteral
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1750:1: uriLiteral returns [UriLiteral literal] : token= Uri ;
    public final UriLiteral uriLiteral() throws RecognitionException {
        UriLiteral literal = null;

        Token token=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1751:3: (token= Uri )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1752:3: token= Uri
            {
            token=(Token)input.LT(1);
            match(input,Uri,FOLLOW_Uri_in_uriLiteral7573); if (failed) return literal;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) literal = factory.makeUriLiteral(token);

        }
        return literal;
    }
    // $ANTLR end uriLiteral


    // $ANTLR start numberLiteral
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1758:1: numberLiteral returns [Literal literal] : token= Number ;
    public final Literal numberLiteral() throws RecognitionException {
        Literal literal = null;

        Token token=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1759:3: (token= Number )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1760:3: token= Number
            {
            token=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_numberLiteral7598); if (failed) return literal;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) literal = factory.makeNumberLiteral(token);

        }
        return literal;
    }
    // $ANTLR end numberLiteral


    // $ANTLR start dslLiteral
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1766:1: dslLiteral returns [DslLiteral literal] : token= Dsl ;
    public final DslLiteral dslLiteral() throws RecognitionException {
        DslLiteral literal = null;

        Token token=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1767:3: (token= Dsl )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1768:3: token= Dsl
            {
            token=(Token)input.LT(1);
            match(input,Dsl,FOLLOW_Dsl_in_dslLiteral7623); if (failed) return literal;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) literal = factory.makeDslLiteral(token);

        }
        return literal;
    }
    // $ANTLR end dslLiteral


    // $ANTLR start boolLiteral
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1774:1: boolLiteral returns [BoolLiteral literal] : (t= 'true' | f= 'false' );
    public final BoolLiteral boolLiteral() throws RecognitionException {
        BoolLiteral literal = null;

        Token t=null;
        Token f=null;


          Token token = null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1777:3: (t= 'true' | f= 'false' )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==True) ) {
                alt107=1;
            }
            else if ( (LA107_0==False) ) {
                alt107=2;
            }
            else {
                if (backtracking>0) {failed=true; return literal;}
                NoViableAltException nvae =
                    new NoViableAltException("1774:1: boolLiteral returns [BoolLiteral literal] : (t= 'true' | f= 'false' );", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1778:5: t= 'true'
                    {
                    t=(Token)input.LT(1);
                    match(input,True,FOLLOW_True_in_boolLiteral7653); if (failed) return literal;
                    if ( backtracking==0 ) {
                      token=t;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1779:5: f= 'false'
                    {
                    f=(Token)input.LT(1);
                    match(input,False,FOLLOW_False_in_boolLiteral7663); if (failed) return literal;
                    if ( backtracking==0 ) {
                      token=f;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) literal = factory.makeBoolLiteral(token);

        }
        return literal;
    }
    // $ANTLR end boolLiteral


    // $ANTLR start termChainExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1785:1: termChainExpr[Expression base] returns [Expression ex] : (d= Dot (ex2= superCallExpr[base] | ex2= idExprIndex[base] ) | a= Arrow ex3= idExprIndex[base] | qd= QuDot ex4= idExprIndex[base] | qa= QuArrow ex5= idExprIndex[base] | ( LB )=>lm= listOrMap | {...}? =>ex8= callArgs[base] );
    public final Expression termChainExpr(Expression base) throws RecognitionException {
        Expression ex = null;

        Token d=null;
        Token a=null;
        Token qd=null;
        Token qa=null;
        Expression ex2 = null;

        Expression ex3 = null;

        Expression ex4 = null;

        Expression ex5 = null;

        Expression lm = null;

        Expression ex8 = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1786:3: (d= Dot (ex2= superCallExpr[base] | ex2= idExprIndex[base] ) | a= Arrow ex3= idExprIndex[base] | qd= QuDot ex4= idExprIndex[base] | qa= QuArrow ex5= idExprIndex[base] | ( LB )=>lm= listOrMap | {...}? =>ex8= callArgs[base] )
            int alt109=6;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==Dot) ) {
                alt109=1;
            }
            else if ( (LA109_0==Arrow) ) {
                alt109=2;
            }
            else if ( (LA109_0==QuDot) ) {
                alt109=3;
            }
            else if ( (LA109_0==QuArrow) ) {
                alt109=4;
            }
            else if ( (LA109_0==LB) && (synpred66())) {
                alt109=5;
            }
            else if ( (LA109_0==LP) && (noNewLineBefore())) {
                alt109=6;
            }
            else {
                if (backtracking>0) {failed=true; return ex;}
                NoViableAltException nvae =
                    new NoViableAltException("1785:1: termChainExpr[Expression base] returns [Expression ex] : (d= Dot (ex2= superCallExpr[base] | ex2= idExprIndex[base] ) | a= Arrow ex3= idExprIndex[base] | qd= QuDot ex4= idExprIndex[base] | qa= QuArrow ex5= idExprIndex[base] | ( LB )=>lm= listOrMap | {...}? =>ex8= callArgs[base] );", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1787:5: d= Dot (ex2= superCallExpr[base] | ex2= idExprIndex[base] )
                    {
                    d=(Token)input.LT(1);
                    match(input,Dot,FOLLOW_Dot_in_termChainExpr7696); if (failed) return ex;
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1787:11: (ex2= superCallExpr[base] | ex2= idExprIndex[base] )
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==Super) ) {
                        alt108=1;
                    }
                    else if ( ((LA108_0>=AtId && LA108_0<=Id)) ) {
                        alt108=2;
                    }
                    else {
                        if (backtracking>0) {failed=true; return ex;}
                        NoViableAltException nvae =
                            new NoViableAltException("1787:11: (ex2= superCallExpr[base] | ex2= idExprIndex[base] )", 108, 0, input);

                        throw nvae;
                    }
                    switch (alt108) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1787:12: ex2= superCallExpr[base]
                            {
                            pushFollow(FOLLOW_superCallExpr_in_termChainExpr7701);
                            ex2=superCallExpr(base);
                            _fsp--;
                            if (failed) return ex;

                            }
                            break;
                        case 2 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1787:36: ex2= idExprIndex[base]
                            {
                            pushFollow(FOLLOW_idExprIndex_in_termChainExpr7706);
                            ex2=idExprIndex(base);
                            _fsp--;
                            if (failed) return ex;
                            if ( backtracking==0 ) {
                              ex=ex2;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1788:5: a= Arrow ex3= idExprIndex[base]
                    {
                    a=(Token)input.LT(1);
                    match(input,Arrow,FOLLOW_Arrow_in_termChainExpr7718); if (failed) return ex;
                    pushFollow(FOLLOW_idExprIndex_in_termChainExpr7722);
                    ex3=idExprIndex(base);
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ex3;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1789:5: qd= QuDot ex4= idExprIndex[base]
                    {
                    qd=(Token)input.LT(1);
                    match(input,QuDot,FOLLOW_QuDot_in_termChainExpr7733); if (failed) return ex;
                    pushFollow(FOLLOW_idExprIndex_in_termChainExpr7737);
                    ex4=idExprIndex(base);
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ex4;
                    }

                    }
                    break;
                case 4 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1790:5: qa= QuArrow ex5= idExprIndex[base]
                    {
                    qa=(Token)input.LT(1);
                    match(input,QuArrow,FOLLOW_QuArrow_in_termChainExpr7748); if (failed) return ex;
                    pushFollow(FOLLOW_idExprIndex_in_termChainExpr7752);
                    ex5=idExprIndex(base);
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ex5;
                    }

                    }
                    break;
                case 5 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1791:5: ( LB )=>lm= listOrMap
                    {
                    pushFollow(FOLLOW_listOrMap_in_termChainExpr7767);
                    lm=listOrMap();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=factory.makeTypedMapOrList(base,lm);
                    }

                    }
                    break;
                case 6 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1792:5: {...}? =>ex8= callArgs[base]
                    {
                    if ( !(noNewLineBefore()) ) {
                        if (backtracking>0) {failed=true; return ex;}
                        throw new FailedPredicateException(input, "termChainExpr", "noNewLineBefore()");
                    }
                    pushFollow(FOLLOW_callArgs_in_termChainExpr7780);
                    ex8=callArgs(base);
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ex8;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end termChainExpr


    // $ANTLR start superCallExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1795:1: superCallExpr[Expression base] returns [Expression ex] : sr= superRef ;
    public final Expression superCallExpr(Expression base) throws RecognitionException {
        Expression ex = null;

        SuperReference sr = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1796:3: (sr= superRef )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1797:3: sr= superRef
            {
            pushFollow(FOLLOW_superRef_in_superCallExpr7803);
            sr=superRef();
            _fsp--;
            if (failed) return ex;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking == 0 && sr != null) {
                ex = factory.handleSuperAccess(base, sr);
              }

        }
        return ex;
    }
    // $ANTLR end superCallExpr


    // $ANTLR start idExpr
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1805:1: idExpr[Expression base] returns [Expression ex] : (fs= fieldStorage[base] | ia= idAccess[base] );
    public final Expression idExpr(Expression base) throws RecognitionException {
        Expression ex = null;

        FieldStorage fs = null;

        Expression ia = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1806:3: (fs= fieldStorage[base] | ia= idAccess[base] )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==AtId) ) {
                alt110=1;
            }
            else if ( (LA110_0==Id) ) {
                alt110=2;
            }
            else {
                if (backtracking>0) {failed=true; return ex;}
                NoViableAltException nvae =
                    new NoViableAltException("1805:1: idExpr[Expression base] returns [Expression ex] : (fs= fieldStorage[base] | ia= idAccess[base] );", 110, 0, input);

                throw nvae;
            }
            switch (alt110) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1807:5: fs= fieldStorage[base]
                    {
                    pushFollow(FOLLOW_fieldStorage_in_idExpr7829);
                    fs=fieldStorage(base);
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=fs;
                    }

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1808:5: ia= idAccess[base]
                    {
                    pushFollow(FOLLOW_idAccess_in_idExpr7840);
                    ia=idAccess(base);
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex=ia;
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end idExpr


    // $ANTLR start simpleRef
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1811:1: simpleRef returns [SimpleReference ex] : name= Id ;
    public final SimpleReference simpleRef() throws RecognitionException {
        SimpleReference ex = null;

        Token name=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1812:3: (name= Id )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1813:3: name= Id
            {
            name=(Token)input.LT(1);
            match(input,Id,FOLLOW_Id_in_simpleRef7865); if (failed) return ex;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) ex = factory.makeSimpleReference(name);

        }
        return ex;
    }
    // $ANTLR end simpleRef


    // $ANTLR start idAccess
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1819:1: idAccess[Expression base] returns [Expression ex] : name= simpleRef ( ( closure )=>cl= closure )? ;
    public final Expression idAccess(Expression base) throws RecognitionException {
        Expression ex = null;

        SimpleReference name = null;

        Closure cl = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1820:3: (name= simpleRef ( ( closure )=>cl= closure )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1821:3: name= simpleRef ( ( closure )=>cl= closure )?
            {
            pushFollow(FOLLOW_simpleRef_in_idAccess7891);
            name=simpleRef();
            _fsp--;
            if (failed) return ex;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1822:3: ( ( closure )=>cl= closure )?
            int alt111=2;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1823:5: ( closure )=>cl= closure
                    {
                    pushFollow(FOLLOW_closure_in_idAccess7907);
                    cl=closure();
                    _fsp--;
                    if (failed) return ex;

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) ex = factory.handleIdAccess(base,name,cl);

        }
        return ex;
    }
    // $ANTLR end idAccess


    // $ANTLR start idExprIndex
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1830:1: idExprIndex[Expression base] returns [Expression expr] : (ex= fieldStorage[base] | ex= idAccess[base] ( ( LB )=> (lb= LB index= expr rb= RB ) )? );
    public final Expression idExprIndex(Expression base) throws RecognitionException {
        Expression expr = null;

        Token lb=null;
        Token rb=null;
        Expression ex = null;

        Expression index = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1831:3: (ex= fieldStorage[base] | ex= idAccess[base] ( ( LB )=> (lb= LB index= expr rb= RB ) )? )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==AtId) ) {
                alt113=1;
            }
            else if ( (LA113_0==Id) ) {
                alt113=2;
            }
            else {
                if (backtracking>0) {failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("1830:1: idExprIndex[Expression base] returns [Expression expr] : (ex= fieldStorage[base] | ex= idAccess[base] ( ( LB )=> (lb= LB index= expr rb= RB ) )? );", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1832:5: ex= fieldStorage[base]
                    {
                    pushFollow(FOLLOW_fieldStorage_in_idExprIndex7941);
                    ex=fieldStorage(base);
                    _fsp--;
                    if (failed) return expr;

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1833:5: ex= idAccess[base] ( ( LB )=> (lb= LB index= expr rb= RB ) )?
                    {
                    pushFollow(FOLLOW_idAccess_in_idExprIndex7950);
                    ex=idAccess(base);
                    _fsp--;
                    if (failed) return expr;
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1834:3: ( ( LB )=> (lb= LB index= expr rb= RB ) )?
                    int alt112=2;
                    alt112 = dfa112.predict(input);
                    switch (alt112) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1835:5: ( LB )=> (lb= LB index= expr rb= RB )
                            {
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1835:11: (lb= LB index= expr rb= RB )
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1836:5: lb= LB index= expr rb= RB
                            {
                            lb=(Token)input.LT(1);
                            match(input,LB,FOLLOW_LB_in_idExprIndex7973); if (failed) return expr;
                            pushFollow(FOLLOW_expr_in_idExprIndex7981);
                            index=expr();
                            _fsp--;
                            if (failed) return expr;
                            rb=(Token)input.LT(1);
                            match(input,RB,FOLLOW_RB_in_idExprIndex7989); if (failed) return expr;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) {
                if (index != null && ex != null)
                  expr = factory.makeIndexExpr(ex,lb,index,rb);
                else
                  expr = ex;
              }

        }
        return expr;
    }
    // $ANTLR end idExprIndex


    // $ANTLR start fieldStorage
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1851:1: fieldStorage[Expression base] returns [FieldStorage fs] : name= AtId ;
    public final FieldStorage fieldStorage(Expression base) throws RecognitionException {
        FieldStorage fs = null;

        Token name=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1852:3: (name= AtId )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1853:3: name= AtId
            {
            name=(Token)input.LT(1);
            match(input,AtId,FOLLOW_AtId_in_fieldStorage8025); if (failed) return fs;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) fs = factory.makeFieldStorage(base,name);

        }
        return fs;
    }
    // $ANTLR end fieldStorage


    // $ANTLR start itBlock
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1859:1: itBlock returns [Closure closure = new Closure()] : b= block ;
    public final Closure itBlock() throws RecognitionException {
        Closure closure =  new Closure();

        Block b = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1859:50: (b= block )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1860:3: b= block
            {
            pushFollow(FOLLOW_block_in_itBlock8047);
            b=block();
            _fsp--;
            if (failed) return closure;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0 && b != null) {
                int end = b.sourceEnd();
                closure.setStart(b.sourceStart());
                closure.setEnd(end);
                closure.setBody(b);
              }

        }
        return closure;
    }
    // $ANTLR end itBlock


    // $ANTLR start callArgs
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1871:1: callArgs[Expression base] returns [Expression ex] : lp= LP (f= expr ( Comma n= expr )* )? rp= RP ( ( funcType )=>cl= closure | ( LC )=>cl= itBlock )? ;
    public final Expression callArgs(Expression base) throws RecognitionException {
        Expression ex = null;

        Token lp=null;
        Token rp=null;
        Expression f = null;

        Expression n = null;

        Closure cl = null;



          List<Expression> args = new ArrayList<Expression>();

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1875:1: (lp= LP (f= expr ( Comma n= expr )* )? rp= RP ( ( funcType )=>cl= closure | ( LC )=>cl= itBlock )? )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1876:3: lp= LP (f= expr ( Comma n= expr )* )? rp= RP ( ( funcType )=>cl= closure | ( LC )=>cl= itBlock )?
            {
            lp=(Token)input.LT(1);
            match(input,LP,FOLLOW_LP_in_callArgs8074); if (failed) return ex;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1877:3: (f= expr ( Comma n= expr )* )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=This && LA115_0<=Null)||(LA115_0>=False && LA115_0<=True)||(LA115_0>=AtId && LA115_0<=LB)||LA115_0==LP||(LA115_0>=Pipe && LA115_0<=Sub)||(LA115_0>=Not && LA115_0<=Inv)||LA115_0==Pound) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1877:5: f= expr ( Comma n= expr )*
                    {
                    pushFollow(FOLLOW_expr_in_callArgs8083);
                    f=expr();
                    _fsp--;
                    if (failed) return ex;
                    if ( backtracking==0 ) {
                      args.add(f);
                    }
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1878:5: ( Comma n= expr )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==Comma) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1878:7: Comma n= expr
                    	    {
                    	    match(input,Comma,FOLLOW_Comma_in_callArgs8093); if (failed) return ex;
                    	    pushFollow(FOLLOW_expr_in_callArgs8104);
                    	    n=expr();
                    	    _fsp--;
                    	    if (failed) return ex;
                    	    if ( backtracking==0 ) {
                    	      args.add(n);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    }
                    break;

            }

            rp=(Token)input.LT(1);
            match(input,RP,FOLLOW_RP_in_callArgs8125); if (failed) return ex;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1883:3: ( ( funcType )=>cl= closure | ( LC )=>cl= itBlock )?
            int alt116=3;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1883:7: ( funcType )=>cl= closure
                    {
                    pushFollow(FOLLOW_closure_in_callArgs8139);
                    cl=closure();
                    _fsp--;
                    if (failed) return ex;

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1884:7: ( LC )=>cl= itBlock
                    {
                    pushFollow(FOLLOW_itBlock_in_callArgs8153);
                    cl=itBlock();
                    _fsp--;
                    if (failed) return ex;

                    }
                    break;

            }


            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) {
                CallArgumentsList list = factory.makeCallArgs(lp, args, rp);
                ex = factory.handleCallArgs(base,list,cl);
              }

        }
        return ex;
    }
    // $ANTLR end callArgs


    // $ANTLR start closure
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1894:1: closure returns [Closure closure] : ft= funcType b= block ;
    public final Closure closure() throws RecognitionException {
        Closure closure = null;

        FuncTypeRef ft = null;

        Block b = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1895:1: (ft= funcType b= block )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1896:3: ft= funcType b= block
            {
            pushFollow(FOLLOW_funcType_in_closure8180);
            ft=funcType();
            _fsp--;
            if (failed) return closure;
            pushFollow(FOLLOW_block_in_closure8186);
            b=block();
            _fsp--;
            if (failed) return closure;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {

              if (backtracking==0) closure = factory.makeClosure(ft,b);

        }
        return closure;
    }
    // $ANTLR end closure


    // $ANTLR start listOrMap
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1903:1: listOrMap returns [Expression ex=new ListLiteral()] : start= LB ( Comma | Colon | first= expr ( ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* ) | ( ( Comma )=> ( Comma (next= expr )? )+ ) )? ) end= RB ;
    public final Expression listOrMap() throws RecognitionException {
        Expression ex = new ListLiteral();

        Token start=null;
        Token end=null;
        Expression first = null;

        Expression second = null;

        Expression nextFirst = null;

        Expression nextSecond = null;

        Expression next = null;


        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1903:52: (start= LB ( Comma | Colon | first= expr ( ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* ) | ( ( Comma )=> ( Comma (next= expr )? )+ ) )? ) end= RB )
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1904:3: start= LB ( Comma | Colon | first= expr ( ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* ) | ( ( Comma )=> ( Comma (next= expr )? )+ ) )? ) end= RB
            {
            start=(Token)input.LT(1);
            match(input,LB,FOLLOW_LB_in_listOrMap8210); if (failed) return ex;
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1905:3: ( Comma | Colon | first= expr ( ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* ) | ( ( Comma )=> ( Comma (next= expr )? )+ ) )? )
            int alt122=3;
            switch ( input.LA(1) ) {
            case Comma:
                {
                alt122=1;
                }
                break;
            case Colon:
                {
                alt122=2;
                }
                break;
            case This:
            case Super:
            case It:
            case Null:
            case False:
            case True:
            case AtId:
            case Id:
            case Number:
            case String:
            case Uri:
            case Dsl:
            case LB:
            case LP:
            case Pipe:
            case BAnd:
            case Incr:
            case Decr:
            case Add:
            case Sub:
            case Not:
            case Inv:
            case Pound:
                {
                alt122=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return ex;}
                NoViableAltException nvae =
                    new NoViableAltException("1905:3: ( Comma | Colon | first= expr ( ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* ) | ( ( Comma )=> ( Comma (next= expr )? )+ ) )? )", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1906:7: Comma
                    {
                    match(input,Comma,FOLLOW_Comma_in_listOrMap8222); if (failed) return ex;

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1907:7: Colon
                    {
                    match(input,Colon,FOLLOW_Colon_in_listOrMap8230); if (failed) return ex;
                    if ( backtracking==0 ) {
                      ex = new MapLiteral();
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1908:7: first= expr ( ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* ) | ( ( Comma )=> ( Comma (next= expr )? )+ ) )?
                    {
                    pushFollow(FOLLOW_expr_in_listOrMap8244);
                    first=expr();
                    _fsp--;
                    if (failed) return ex;
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1908:20: ( ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* ) | ( ( Comma )=> ( Comma (next= expr )? )+ ) )?
                    int alt121=3;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==Colon) && (synpred71())) {
                        alt121=1;
                    }
                    else if ( (LA121_0==Comma) && (synpred72())) {
                        alt121=2;
                    }
                    switch (alt121) {
                        case 1 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1909:7: ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* )
                            {
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1909:7: ( ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )* )
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1909:8: ( Colon )=> Colon second= expr ( Comma (nextFirst= expr Colon nextSecond= expr )? )*
                            {
                            if ( backtracking==0 ) {
                              ex = new MapLiteral();
                            }
                            match(input,Colon,FOLLOW_Colon_in_listOrMap8270); if (failed) return ex;
                            pushFollow(FOLLOW_expr_in_listOrMap8276);
                            second=expr();
                            _fsp--;
                            if (failed) return ex;
                            if ( backtracking==0 ) {
                              ((MapLiteral)ex).accept(first, second);
                            }
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1911:7: ( Comma (nextFirst= expr Colon nextSecond= expr )? )*
                            loop118:
                            do {
                                int alt118=2;
                                int LA118_0 = input.LA(1);

                                if ( (LA118_0==Comma) ) {
                                    alt118=1;
                                }


                                switch (alt118) {
                            	case 1 :
                            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1911:8: Comma (nextFirst= expr Colon nextSecond= expr )?
                            	    {
                            	    match(input,Comma,FOLLOW_Comma_in_listOrMap8287); if (failed) return ex;
                            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1911:14: (nextFirst= expr Colon nextSecond= expr )?
                            	    int alt117=2;
                            	    int LA117_0 = input.LA(1);

                            	    if ( ((LA117_0>=This && LA117_0<=Null)||(LA117_0>=False && LA117_0<=True)||(LA117_0>=AtId && LA117_0<=LB)||LA117_0==LP||(LA117_0>=Pipe && LA117_0<=Sub)||(LA117_0>=Not && LA117_0<=Inv)||LA117_0==Pound) ) {
                            	        alt117=1;
                            	    }
                            	    switch (alt117) {
                            	        case 1 :
                            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1911:15: nextFirst= expr Colon nextSecond= expr
                            	            {
                            	            pushFollow(FOLLOW_expr_in_listOrMap8294);
                            	            nextFirst=expr();
                            	            _fsp--;
                            	            if (failed) return ex;
                            	            match(input,Colon,FOLLOW_Colon_in_listOrMap8296); if (failed) return ex;
                            	            pushFollow(FOLLOW_expr_in_listOrMap8302);
                            	            nextSecond=expr();
                            	            _fsp--;
                            	            if (failed) return ex;
                            	            if ( backtracking==0 ) {
                            	              ((MapLiteral)ex).accept(nextFirst, nextSecond);
                            	            }

                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop118;
                                }
                            } while (true);


                            }


                            }
                            break;
                        case 2 :
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1913:9: ( ( Comma )=> ( Comma (next= expr )? )+ )
                            {
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1913:9: ( ( Comma )=> ( Comma (next= expr )? )+ )
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1913:10: ( Comma )=> ( Comma (next= expr )? )+
                            {
                            if ( backtracking==0 ) {
                              ((ListLiteral)ex).accept(first);
                            }
                            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1914:11: ( Comma (next= expr )? )+
                            int cnt120=0;
                            loop120:
                            do {
                                int alt120=2;
                                int LA120_0 = input.LA(1);

                                if ( (LA120_0==Comma) ) {
                                    alt120=1;
                                }


                                switch (alt120) {
                            	case 1 :
                            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1914:12: Comma (next= expr )?
                            	    {
                            	    match(input,Comma,FOLLOW_Comma_in_listOrMap8346); if (failed) return ex;
                            	    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1914:18: (next= expr )?
                            	    int alt119=2;
                            	    int LA119_0 = input.LA(1);

                            	    if ( ((LA119_0>=This && LA119_0<=Null)||(LA119_0>=False && LA119_0<=True)||(LA119_0>=AtId && LA119_0<=LB)||LA119_0==LP||(LA119_0>=Pipe && LA119_0<=Sub)||(LA119_0>=Not && LA119_0<=Inv)||LA119_0==Pound) ) {
                            	        alt119=1;
                            	    }
                            	    switch (alt119) {
                            	        case 1 :
                            	            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1914:19: next= expr
                            	            {
                            	            pushFollow(FOLLOW_expr_in_listOrMap8351);
                            	            next=expr();
                            	            _fsp--;
                            	            if (failed) return ex;
                            	            if ( backtracking==0 ) {
                            	              ((ListLiteral)ex).accept(next);
                            	            }

                            	            }
                            	            break;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt120 >= 1 ) break loop120;
                            	    if (backtracking>0) {failed=true; return ex;}
                                        EarlyExitException eee =
                                            new EarlyExitException(120, input);
                                        throw eee;
                                }
                                cnt120++;
                            } while (true);


                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            end=(Token)input.LT(1);
            match(input,RB,FOLLOW_RB_in_listOrMap8379); if (failed) return ex;

            }

        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return ex;
    }
    // $ANTLR end listOrMap


    // $ANTLR start eos
    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1922:1: eos returns [Token eosToken = null] : ( EOF | semi= Semi | {...}?);
    public final Token eos() throws RecognitionException {
        Token eosToken =  null;

        Token semi=null;

        try {
            // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1923:3: ( EOF | semi= Semi | {...}?)
            int alt123=3;
            switch ( input.LA(1) ) {
            case EOF:
                {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==EOF) ) {
                    int LA123_4 = input.LA(3);

                    if ( (LA123_4==EOF) ) {
                        alt123=1;
                    }
                    else {
                        if (backtracking>0) {failed=true; return eosToken;}
                        NoViableAltException nvae =
                            new NoViableAltException("1922:1: eos returns [Token eosToken = null] : ( EOF | semi= Semi | {...}?);", 123, 4, input);

                        throw nvae;
                    }
                }
                else if ( ((LA123_1>=Abstract && LA123_1<=Using)||(LA123_1>=Class && LA123_1<=True)||(LA123_1>=AtId && LA123_1<=LB)||LA123_1==LP||LA123_1==RC||(LA123_1>=Pipe && LA123_1<=Sub)||(LA123_1>=Not && LA123_1<=Inv)||LA123_1==Pound) ) {
                    alt123=1;
                }
                else {
                    if (backtracking>0) {failed=true; return eosToken;}
                    NoViableAltException nvae =
                        new NoViableAltException("1922:1: eos returns [Token eosToken = null] : ( EOF | semi= Semi | {...}?);", 123, 1, input);

                    throw nvae;
                }
                }
                break;
            case Semi:
                {
                alt123=2;
                }
                break;
            case Abstract:
            case Native:
            case Once:
            case Override:
            case Static:
            case Virtual:
            case Const:
            case Final:
            case ReadOnly:
            case Using:
            case Class:
            case Enum:
            case Mixin:
            case Public:
            case Protected:
            case Private:
            case Internal:
            case New:
            case This:
            case Super:
            case It:
            case Null:
            case Break:
            case Continue:
            case For:
            case If:
            case Else:
            case Return:
            case Throw:
            case While:
            case Try:
            case Catch:
            case Finally:
            case Switch:
            case Case:
            case Default:
            case False:
            case True:
            case AtId:
            case Id:
            case Number:
            case String:
            case Uri:
            case Dsl:
            case LB:
            case LP:
            case RC:
            case Pipe:
            case BAnd:
            case Incr:
            case Decr:
            case Add:
            case Sub:
            case Not:
            case Inv:
            case Pound:
                {
                alt123=3;
                }
                break;
            default:
                if (backtracking>0) {failed=true; return eosToken;}
                NoViableAltException nvae =
                    new NoViableAltException("1922:1: eos returns [Token eosToken = null] : ( EOF | semi= Semi | {...}?);", 123, 0, input);

                throw nvae;
            }

            switch (alt123) {
                case 1 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1924:5: EOF
                    {
                    match(input,EOF,FOLLOW_EOF_in_eos8400); if (failed) return eosToken;

                    }
                    break;
                case 2 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1925:5: semi= Semi
                    {
                    semi=(Token)input.LT(1);
                    match(input,Semi,FOLLOW_Semi_in_eos8410); if (failed) return eosToken;
                    if ( backtracking==0 ) {
                      eosToken = semi;
                    }

                    }
                    break;
                case 3 :
                    // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1926:5: {...}?
                    {
                    if ( !(lookupNL()) ) {
                        if (backtracking>0) {failed=true; return eosToken;}
                        throw new FailedPredicateException(input, "eos", "lookupNL()");
                    }

                    }
                    break;

            }
        }

        catch (RecognitionException re) {
          handleRecognitionException(re);
        }
        catch (Throwable th) {
          handleThrowable(th);
        }
        finally {
        }
        return eosToken;
    }
    // $ANTLR end eos

    // $ANTLR start synpred1
    public final void synpred1_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:451:4: ( AtId )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:451:5: AtId
        {
        match(input,AtId,FOLLOW_AtId_in_synpred11936); if (failed) return ;

        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred3
    public final void synpred3_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:626:18: ( LP )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:626:19: LP
        {
        match(input,LP,FOLLOW_LP_in_synpred32777); if (failed) return ;

        }
    }
    // $ANTLR end synpred3

    // $ANTLR start synpred4
    public final void synpred4_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:643:3: ( 'static' LC )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:643:4: 'static' LC
        {
        match(input,Static,FOLLOW_Static_in_synpred42822); if (failed) return ;
        match(input,LC,FOLLOW_LC_in_synpred42824); if (failed) return ;

        }
    }
    // $ANTLR end synpred4

    // $ANTLR start synpred5
    public final void synpred5_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:648:5: ( ctype )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:648:6: ctype
        {
        pushFollow(FOLLOW_ctype_in_synpred52862);
        ctype();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred5

    // $ANTLR start synpred6
    public final void synpred6_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:650:5: ( LP )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:650:6: LP
        {
        match(input,LP,FOLLOW_LP_in_synpred62886); if (failed) return ;

        }
    }
    // $ANTLR end synpred6

    // $ANTLR start synpred7
    public final void synpred7_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:651:6: ( Define )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:651:7: Define
        {
        match(input,Define,FOLLOW_Define_in_synpred72903); if (failed) return ;

        }
    }
    // $ANTLR end synpred7

    // $ANTLR start synpred8
    public final void synpred8_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:652:7: ( LC )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:652:8: LC
        {
        match(input,LC,FOLLOW_LC_in_synpred82919); if (failed) return ;

        }
    }
    // $ANTLR end synpred8

    // $ANTLR start synpred9
    public final void synpred9_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:663:7: ( Id )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:663:8: Id
        {
        match(input,Id,FOLLOW_Id_in_synpred92951); if (failed) return ;

        }
    }
    // $ANTLR end synpred9

    // $ANTLR start synpred10
    public final void synpred10_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:683:4: ( LC )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:683:5: LC
        {
        match(input,LC,FOLLOW_LC_in_synpred103001); if (failed) return ;

        }
    }
    // $ANTLR end synpred10

    // $ANTLR start synpred12
    public final void synpred12_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:8: ( get )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:702:9: get
        {
        pushFollow(FOLLOW_get_in_synpred123060);
        get();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred12

    // $ANTLR start synpred13
    public final void synpred13_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:747:4: ( Comma )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:747:5: Comma
        {
        match(input,Comma,FOLLOW_Comma_in_synpred133252); if (failed) return ;

        }
    }
    // $ANTLR end synpred13

    // $ANTLR start synpred14
    public final void synpred14_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:755:6: ( ctype )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:755:7: ctype
        {
        pushFollow(FOLLOW_ctype_in_synpred143305);
        ctype();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred14

    // $ANTLR start synpred15
    public final void synpred15_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:756:5: ( Id )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:756:6: Id
        {
        match(input,Id,FOLLOW_Id_in_synpred153326); if (failed) return ;

        }
    }
    // $ANTLR end synpred15

    // $ANTLR start synpred16
    public final void synpred16_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:778:2: ( LC )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:778:3: LC
        {
        match(input,LC,FOLLOW_LC_in_synpred163373); if (failed) return ;

        }
    }
    // $ANTLR end synpred16

    // $ANTLR start synpred17
    public final void synpred17_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:799:4: ( Comma )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:799:5: Comma
        {
        match(input,Comma,FOLLOW_Comma_in_synpred173464); if (failed) return ;

        }
    }
    // $ANTLR end synpred17

    // $ANTLR start synpred18
    public final void synpred18_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:875:5: ( LC )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:875:6: LC
        {
        match(input,LC,FOLLOW_LC_in_synpred183751); if (failed) return ;

        }
    }
    // $ANTLR end synpred18

    // $ANTLR start synpred19
    public final void synpred19_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:893:5: ( 'break' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:893:6: 'break'
        {
        match(input,Break,FOLLOW_Break_in_synpred193834); if (failed) return ;

        }
    }
    // $ANTLR end synpred19

    // $ANTLR start synpred20
    public final void synpred20_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:895:5: ( 'continue' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:895:6: 'continue'
        {
        match(input,Continue,FOLLOW_Continue_in_synpred203857); if (failed) return ;

        }
    }
    // $ANTLR end synpred20

    // $ANTLR start synpred21
    public final void synpred21_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:897:5: ( 'for' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:897:6: 'for'
        {
        match(input,For,FOLLOW_For_in_synpred213877); if (failed) return ;

        }
    }
    // $ANTLR end synpred21

    // $ANTLR start synpred22
    public final void synpred22_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:899:5: ( 'if' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:899:6: 'if'
        {
        match(input,If,FOLLOW_If_in_synpred223902); if (failed) return ;

        }
    }
    // $ANTLR end synpred22

    // $ANTLR start synpred23
    public final void synpred23_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:901:5: ( 'return' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:901:6: 'return'
        {
        match(input,Return,FOLLOW_Return_in_synpred233928); if (failed) return ;

        }
    }
    // $ANTLR end synpred23

    // $ANTLR start synpred24
    public final void synpred24_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:903:5: ( 'switch' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:903:6: 'switch'
        {
        match(input,Switch,FOLLOW_Switch_in_synpred243950); if (failed) return ;

        }
    }
    // $ANTLR end synpred24

    // $ANTLR start synpred25
    public final void synpred25_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:905:5: ( 'throw' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:905:6: 'throw'
        {
        match(input,Throw,FOLLOW_Throw_in_synpred253972); if (failed) return ;

        }
    }
    // $ANTLR end synpred25

    // $ANTLR start synpred26
    public final void synpred26_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:907:5: ( 'while' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:907:6: 'while'
        {
        match(input,While,FOLLOW_While_in_synpred263995); if (failed) return ;

        }
    }
    // $ANTLR end synpred26

    // $ANTLR start synpred27
    public final void synpred27_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:909:5: ( 'try' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:909:6: 'try'
        {
        match(input,Try,FOLLOW_Try_in_synpred274018); if (failed) return ;

        }
    }
    // $ANTLR end synpred27

    // $ANTLR start synpred28
    public final void synpred28_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:915:5: ( Id Define )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:915:6: Id Define
        {
        match(input,Id,FOLLOW_Id_in_synpred284077); if (failed) return ;
        match(input,Define,FOLLOW_Define_in_synpred284079); if (failed) return ;

        }
    }
    // $ANTLR end synpred28

    // $ANTLR start synpred29
    public final void synpred29_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:916:5: ( ctype Id Define )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:916:6: ctype Id Define
        {
        pushFollow(FOLLOW_ctype_in_synpred294092);
        ctype();
        _fsp--;
        if (failed) return ;
        match(input,Id,FOLLOW_Id_in_synpred294094); if (failed) return ;
        match(input,Define,FOLLOW_Define_in_synpred294096); if (failed) return ;

        }
    }
    // $ANTLR end synpred29

    // $ANTLR start synpred30
    public final void synpred30_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:935:5: ( localDef )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:935:5: localDef
        {
        pushFollow(FOLLOW_localDef_in_synpred304182);
        localDef();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred30

    // $ANTLR start synpred31
    public final void synpred31_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:936:5: ( inferredTypedLocalDef )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:936:5: inferredTypedLocalDef
        {
        pushFollow(FOLLOW_inferredTypedLocalDef_in_synpred314191);
        inferredTypedLocalDef();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred31

    // $ANTLR start synpred33
    public final void synpred33_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:982:3: ( Semi )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:982:4: Semi
        {
        match(input,Semi,FOLLOW_Semi_in_synpred334399); if (failed) return ;

        }
    }
    // $ANTLR end synpred33

    // $ANTLR start synpred34
    public final void synpred34_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1002:4: ( 'else' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1002:5: 'else'
        {
        match(input,Else,FOLLOW_Else_in_synpred344503); if (failed) return ;

        }
    }
    // $ANTLR end synpred34

    // $ANTLR start synpred35
    public final void synpred35_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1014:4: ( eos )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1014:5: eos
        {
        pushFollow(FOLLOW_eos_in_synpred354557);
        eos();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred35

    // $ANTLR start synpred36
    public final void synpred36_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1049:11: ( eos )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1049:12: eos
        {
        pushFollow(FOLLOW_eos_in_synpred364711);
        eos();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred36

    // $ANTLR start synpred37
    public final void synpred37_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1060:4: ( 'catch' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1060:5: 'catch'
        {
        match(input,Catch,FOLLOW_Catch_in_synpred374761); if (failed) return ;

        }
    }
    // $ANTLR end synpred37

    // $ANTLR start synpred38
    public final void synpred38_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1063:4: ( 'finally' )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1063:5: 'finally'
        {
        match(input,Finally,FOLLOW_Finally_in_synpred384784); if (failed) return ;

        }
    }
    // $ANTLR end synpred38

    // $ANTLR start synpred39
    public final void synpred39_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1073:4: ( LP )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1073:5: LP
        {
        match(input,LP,FOLLOW_LP_in_synpred394829); if (failed) return ;

        }
    }
    // $ANTLR end synpred39

    // $ANTLR start synpred40
    public final void synpred40_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1135:7: ( Id )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1135:8: Id
        {
        match(input,Id,FOLLOW_Id_in_synpred405094); if (failed) return ;

        }
    }
    // $ANTLR end synpred40

    // $ANTLR start synpred41
    public final void synpred41_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1136:7: ( LB )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1136:8: LB
        {
        match(input,LB,FOLLOW_LB_in_synpred415114); if (failed) return ;

        }
    }
    // $ANTLR end synpred41

    // $ANTLR start synpred42
    public final void synpred42_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1137:7: ( Pipe )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1137:8: Pipe
        {
        match(input,Pipe,FOLLOW_Pipe_in_synpred425138); if (failed) return ;

        }
    }
    // $ANTLR end synpred42

    // $ANTLR start synpred43
    public final void synpred43_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1141:5: ( LB )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1141:6: LB
        {
        match(input,LB,FOLLOW_LB_in_synpred435175); if (failed) return ;

        }
    }
    // $ANTLR end synpred43

    // $ANTLR start synpred44
    public final void synpred44_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1194:3: ( Id | Pipe | LB )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:
        {
        if ( input.LA(1)==Id||input.LA(1)==LB||input.LA(1)==Pipe ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred445430);    throw mse;
        }


        }
    }
    // $ANTLR end synpred44

    // $ANTLR start synpred45
    public final void synpred45_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1211:28: ( Assign | MulAss | DivAss | ModAss | AddAss | SubAss | LShiftAss | RShiftAss | BAndAss | BNotAss | PipeAss )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:
        {
        if ( (input.LA(1)>=Assign && input.LA(1)<=PipeAss) ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred455528);    throw mse;
        }


        }
    }
    // $ANTLR end synpred45

    // $ANTLR start synpred46
    public final void synpred46_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1244:4: ( Qu )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1244:5: Qu
        {
        match(input,Qu,FOLLOW_Qu_in_synpred465794); if (failed) return ;

        }
    }
    // $ANTLR end synpred46

    // $ANTLR start synpred47
    public final void synpred47_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1304:2: ( Eq | NEq | SEq | NSEq )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:
        {
        if ( (input.LA(1)>=SEq && input.LA(1)<=NEq) ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred475949);    throw mse;
        }


        }
    }
    // $ANTLR end synpred47

    // $ANTLR start synpred48
    public final void synpred48_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1412:4: ( BNot | Pipe )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:
        {
        if ( (input.LA(1)>=BNot && input.LA(1)<=Pipe) ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred486353);    throw mse;
        }


        }
    }
    // $ANTLR end synpred48

    // $ANTLR start synpred49
    public final void synpred49_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1433:4: ( BAnd )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1433:5: BAnd
        {
        match(input,BAnd,FOLLOW_BAnd_in_synpred496429); if (failed) return ;

        }
    }
    // $ANTLR end synpred49

    // $ANTLR start synpred50
    public final void synpred50_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1472:3: ( Add | Sub )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:
        {
        if ( (input.LA(1)>=Add && input.LA(1)<=Sub) ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred506550);    throw mse;
        }


        }
    }
    // $ANTLR end synpred50

    // $ANTLR start synpred54
    public final void synpred54_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1594:9: ( castExpr )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1594:9: castExpr
        {
        pushFollow(FOLLOW_castExpr_in_synpred546870);
        castExpr();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred54

    // $ANTLR start synpred55
    public final void synpred55_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1595:33: ( Incr )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1595:34: Incr
        {
        match(input,Incr,FOLLOW_Incr_in_synpred556890); if (failed) return ;

        }
    }
    // $ANTLR end synpred55

    // $ANTLR start synpred56
    public final void synpred56_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1606:10: ( Decr )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1606:11: Decr
        {
        match(input,Decr,FOLLOW_Decr_in_synpred566908); if (failed) return ;

        }
    }
    // $ANTLR end synpred56

    // $ANTLR start synpred57
    public final void synpred57_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1637:4: ( Dot | Arrow | QuDot | QuArrow | LP | LC | LB )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:
        {
        if ( input.LA(1)==Dot||input.LA(1)==LB||input.LA(1)==LP||input.LA(1)==LC||(input.LA(1)>=QuArrow && input.LA(1)<=Arrow)||input.LA(1)==QuDot ) {
            input.consume();
            errorRecovery=false;failed=false;
        }
        else {
            if (backtracking>0) {failed=true; return ;}
            MismatchedSetException mse =
                new MismatchedSetException(null,input);
            recoverFromMismatchedSet(input,mse,FOLLOW_set_in_synpred576988);    throw mse;
        }


        }
    }
    // $ANTLR end synpred57

    // $ANTLR start synpred58
    public final void synpred58_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1652:5: ( Pound )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1652:6: Pound
        {
        match(input,Pound,FOLLOW_Pound_in_synpred587127); if (failed) return ;

        }
    }
    // $ANTLR end synpred58

    // $ANTLR start synpred59
    public final void synpred59_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1653:5: ( ctype Pound )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1653:6: ctype Pound
        {
        pushFollow(FOLLOW_ctype_in_synpred597141);
        ctype();
        _fsp--;
        if (failed) return ;
        match(input,Pound,FOLLOW_Pound_in_synpred597143); if (failed) return ;

        }
    }
    // $ANTLR end synpred59

    // $ANTLR start synpred60
    public final void synpred60_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1654:5: ( simpleType LC )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1654:6: simpleType LC
        {
        pushFollow(FOLLOW_simpleType_in_synpred607157);
        simpleType();
        _fsp--;
        if (failed) return ;
        match(input,LC,FOLLOW_LC_in_synpred607159); if (failed) return ;

        }
    }
    // $ANTLR end synpred60

    // $ANTLR start synpred61
    public final void synpred61_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1655:5: ( idNotType )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1655:6: idNotType
        {
        pushFollow(FOLLOW_idNotType_in_synpred617173);
        idNotType();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred61

    // $ANTLR start synpred62
    public final void synpred62_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1657:5: ( ctype )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1657:6: ctype
        {
        pushFollow(FOLLOW_ctype_in_synpred627198);
        ctype();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred62

    // $ANTLR start synpred63
    public final void synpred63_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1658:5: ( LB )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1658:6: LB
        {
        match(input,LB,FOLLOW_LB_in_synpred637213); if (failed) return ;

        }
    }
    // $ANTLR end synpred63

    // $ANTLR start synpred64
    public final void synpred64_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1659:5: ( LP )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1659:6: LP
        {
        match(input,LP,FOLLOW_LP_in_synpred647228); if (failed) return ;

        }
    }
    // $ANTLR end synpred64

    // $ANTLR start synpred65
    public final void synpred65_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1665:8: ( LB )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1665:9: LB
        {
        match(input,LB,FOLLOW_LB_in_synpred657270); if (failed) return ;

        }
    }
    // $ANTLR end synpred65

    // $ANTLR start synpred66
    public final void synpred66_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1791:5: ( LB )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1791:6: LB
        {
        match(input,LB,FOLLOW_LB_in_synpred667762); if (failed) return ;

        }
    }
    // $ANTLR end synpred66

    // $ANTLR start synpred67
    public final void synpred67_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1823:5: ( closure )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1823:6: closure
        {
        pushFollow(FOLLOW_closure_in_synpred677902);
        closure();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred67

    // $ANTLR start synpred68
    public final void synpred68_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1835:5: ( LB )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1835:6: LB
        {
        match(input,LB,FOLLOW_LB_in_synpred687962); if (failed) return ;

        }
    }
    // $ANTLR end synpred68

    // $ANTLR start synpred69
    public final void synpred69_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1883:7: ( funcType )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1883:8: funcType
        {
        pushFollow(FOLLOW_funcType_in_synpred698134);
        funcType();
        _fsp--;
        if (failed) return ;

        }
    }
    // $ANTLR end synpred69

    // $ANTLR start synpred70
    public final void synpred70_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1884:7: ( LC )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1884:8: LC
        {
        match(input,LC,FOLLOW_LC_in_synpred708148); if (failed) return ;

        }
    }
    // $ANTLR end synpred70

    // $ANTLR start synpred71
    public final void synpred71_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1909:8: ( Colon )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1909:9: Colon
        {
        match(input,Colon,FOLLOW_Colon_in_synpred718256); if (failed) return ;

        }
    }
    // $ANTLR end synpred71

    // $ANTLR start synpred72
    public final void synpred72_fragment() throws RecognitionException {   
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1913:10: ( Comma )
        // C:\\Documents and Settings\\Anastasia.MAZAF\\FAN workspace\\com.xored.fanide.core\\src\\com\\xored\\fanide\\internal\\core\\parser\\Fan_v1_0_.g:1913:11: Comma
        {
        match(input,Comma,FOLLOW_Comma_in_synpred728329); if (failed) return ;

        }
    }
    // $ANTLR end synpred72

    public final boolean synpred44() {
        backtracking++;
        int start = input.mark();
        try {
            synpred44_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred43() {
        backtracking++;
        int start = input.mark();
        try {
            synpred43_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred46() {
        backtracking++;
        int start = input.mark();
        try {
            synpred46_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred45() {
        backtracking++;
        int start = input.mark();
        try {
            synpred45_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred48() {
        backtracking++;
        int start = input.mark();
        try {
            synpred48_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred47() {
        backtracking++;
        int start = input.mark();
        try {
            synpred47_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred49() {
        backtracking++;
        int start = input.mark();
        try {
            synpred49_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred40() {
        backtracking++;
        int start = input.mark();
        try {
            synpred40_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred42() {
        backtracking++;
        int start = input.mark();
        try {
            synpred42_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred41() {
        backtracking++;
        int start = input.mark();
        try {
            synpred41_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred70() {
        backtracking++;
        int start = input.mark();
        try {
            synpred70_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred35() {
        backtracking++;
        int start = input.mark();
        try {
            synpred35_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred71() {
        backtracking++;
        int start = input.mark();
        try {
            synpred71_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred34() {
        backtracking++;
        int start = input.mark();
        try {
            synpred34_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred33() {
        backtracking++;
        int start = input.mark();
        try {
            synpred33_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred39() {
        backtracking++;
        int start = input.mark();
        try {
            synpred39_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred38() {
        backtracking++;
        int start = input.mark();
        try {
            synpred38_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred72() {
        backtracking++;
        int start = input.mark();
        try {
            synpred72_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred37() {
        backtracking++;
        int start = input.mark();
        try {
            synpred37_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred36() {
        backtracking++;
        int start = input.mark();
        try {
            synpred36_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred31() {
        backtracking++;
        int start = input.mark();
        try {
            synpred31_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred30() {
        backtracking++;
        int start = input.mark();
        try {
            synpred30_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred69() {
        backtracking++;
        int start = input.mark();
        try {
            synpred69_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred66() {
        backtracking++;
        int start = input.mark();
        try {
            synpred66_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred65() {
        backtracking++;
        int start = input.mark();
        try {
            synpred65_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred68() {
        backtracking++;
        int start = input.mark();
        try {
            synpred68_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred67() {
        backtracking++;
        int start = input.mark();
        try {
            synpred67_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred29() {
        backtracking++;
        int start = input.mark();
        try {
            synpred29_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred62() {
        backtracking++;
        int start = input.mark();
        try {
            synpred62_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred61() {
        backtracking++;
        int start = input.mark();
        try {
            synpred61_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred64() {
        backtracking++;
        int start = input.mark();
        try {
            synpred64_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred63() {
        backtracking++;
        int start = input.mark();
        try {
            synpred63_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred60() {
        backtracking++;
        int start = input.mark();
        try {
            synpred60_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred20() {
        backtracking++;
        int start = input.mark();
        try {
            synpred20_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred27() {
        backtracking++;
        int start = input.mark();
        try {
            synpred27_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred28() {
        backtracking++;
        int start = input.mark();
        try {
            synpred28_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred25() {
        backtracking++;
        int start = input.mark();
        try {
            synpred25_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred26() {
        backtracking++;
        int start = input.mark();
        try {
            synpred26_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred23() {
        backtracking++;
        int start = input.mark();
        try {
            synpred23_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred24() {
        backtracking++;
        int start = input.mark();
        try {
            synpred24_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred21() {
        backtracking++;
        int start = input.mark();
        try {
            synpred21_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred22() {
        backtracking++;
        int start = input.mark();
        try {
            synpred22_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred59() {
        backtracking++;
        int start = input.mark();
        try {
            synpred59_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred58() {
        backtracking++;
        int start = input.mark();
        try {
            synpred58_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred57() {
        backtracking++;
        int start = input.mark();
        try {
            synpred57_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred19() {
        backtracking++;
        int start = input.mark();
        try {
            synpred19_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred18() {
        backtracking++;
        int start = input.mark();
        try {
            synpred18_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred56() {
        backtracking++;
        int start = input.mark();
        try {
            synpred56_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred55() {
        backtracking++;
        int start = input.mark();
        try {
            synpred55_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred54() {
        backtracking++;
        int start = input.mark();
        try {
            synpred54_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred5() {
        backtracking++;
        int start = input.mark();
        try {
            synpred5_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred6() {
        backtracking++;
        int start = input.mark();
        try {
            synpred6_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred7() {
        backtracking++;
        int start = input.mark();
        try {
            synpred7_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred8() {
        backtracking++;
        int start = input.mark();
        try {
            synpred8_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred50() {
        backtracking++;
        int start = input.mark();
        try {
            synpred50_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred1() {
        backtracking++;
        int start = input.mark();
        try {
            synpred1_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred3() {
        backtracking++;
        int start = input.mark();
        try {
            synpred3_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred4() {
        backtracking++;
        int start = input.mark();
        try {
            synpred4_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred9() {
        backtracking++;
        int start = input.mark();
        try {
            synpred9_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred14() {
        backtracking++;
        int start = input.mark();
        try {
            synpred14_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred15() {
        backtracking++;
        int start = input.mark();
        try {
            synpred15_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred16() {
        backtracking++;
        int start = input.mark();
        try {
            synpred16_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred17() {
        backtracking++;
        int start = input.mark();
        try {
            synpred17_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred10() {
        backtracking++;
        int start = input.mark();
        try {
            synpred10_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred12() {
        backtracking++;
        int start = input.mark();
        try {
            synpred12_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }
    public final boolean synpred13() {
        backtracking++;
        int start = input.mark();
        try {
            synpred13_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !failed;
        input.rewind(start);
        backtracking--;
        failed=false;
        return success;
    }


    protected DFA63 dfa63 = new DFA63(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA116 dfa116 = new DFA116(this);
    static final String DFA63_eotS =
        "\27\uffff";
    static final String DFA63_eofS =
        "\27\uffff";
    static final String DFA63_minS =
        "\2\27\1\uffff\1\16\1\27\1\0\1\70\2\0\1\70\1\uffff\1\16\2\0\1\16"+
        "\10\0";
    static final String DFA63_maxS =
        "\2\163\1\uffff\1\u0083\1\163\1\0\1\70\2\0\1\146\1\uffff\1\u0083"+
        "\2\0\1\u0083\10\0";
    static final String DFA63_acceptS =
        "\2\uffff\1\2\7\uffff\1\1\14\uffff";
    static final String DFA63_specialS =
        "\3\uffff\1\0\1\uffff\1\5\1\uffff\1\6\1\1\3\uffff\1\3\1\2\1\4\10"+
        "\uffff}>";
    static final String[] DFA63_transitionS = {
            "\10\2\1\uffff\4\2\2\uffff\1\2\2\uffff\2\2\14\uffff\7\2\1\uffff"+
            "\1\1\1\uffff\1\2\44\uffff\6\2\3\uffff\2\2\2\uffff\1\2",
            "\4\2\16\uffff\2\2\14\uffff\1\2\1\3\4\2\1\4\1\uffff\1\2\46"+
            "\uffff\1\5\5\2\3\uffff\2\2\2\uffff\1\2",
            "",
            "\1\2\34\uffff\4\2\11\uffff\1\12\4\uffff\1\10\1\uffff\3\2\2"+
            "\uffff\1\6\1\uffff\1\11\1\uffff\17\2\1\7\27\2\4\uffff\1\2\16"+
            "\uffff\2\2",
            "\4\2\16\uffff\2\2\14\uffff\1\2\1\13\4\2\1\14\1\uffff\1\2\3"+
            "\uffff\1\2\2\uffff\1\2\37\uffff\1\15\5\2\3\uffff\2\2\2\uffff"+
            "\1\2",
            "\1\uffff",
            "\1\16",
            "\1\uffff",
            "\1\uffff",
            "\1\17\4\uffff\1\20\50\uffff\1\21",
            "",
            "\1\2\34\uffff\4\2\16\uffff\1\24\1\26\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\22\1\uffff\1\25\1\uffff\17\2\1\23\27\2\4\uffff\1\2\16"+
            "\uffff\2\2",
            "\1\uffff",
            "\1\uffff",
            "\1\2\34\uffff\4\2\11\uffff\1\12\4\uffff\1\10\1\uffff\3\2\4"+
            "\uffff\1\11\1\uffff\17\2\1\7\27\2\4\uffff\1\2\16\uffff\2\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "1073:3: ( ( LP )=>lp= LP type= ctype id= Id rp= RP )?";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA63_3 = input.LA(1);

                         
                        int index63_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA63_3==DoubleColon) ) {s = 6;}

                        else if ( (LA63_3==Qu) ) {s = 7;}

                        else if ( (LA63_3==LB) ) {s = 8;}

                        else if ( (LA63_3==Colon) ) {s = 9;}

                        else if ( (LA63_3==As||(LA63_3>=RangeExclOld && LA63_3<=Dot)||(LA63_3>=LP && LA63_3<=LC)||(LA63_3>=QuArrow && LA63_3<=Elvis)||(LA63_3>=Or && LA63_3<=Mod)||LA63_3==Pound||(LA63_3>=130 && LA63_3<=131)) ) {s = 2;}

                        else if ( (LA63_3==Id) && (synpred39())) {s = 10;}

                         
                        input.seek(index63_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA63_8 = input.LA(1);

                         
                        int index63_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index63_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA63_13 = input.LA(1);

                         
                        int index63_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index63_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA63_12 = input.LA(1);

                         
                        int index63_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index63_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA63_14 = input.LA(1);

                         
                        int index63_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA63_14==Qu) ) {s = 7;}

                        else if ( (LA63_14==LB) ) {s = 8;}

                        else if ( (LA63_14==Colon) ) {s = 9;}

                        else if ( (LA63_14==As||(LA63_14>=RangeExclOld && LA63_14<=Dot)||(LA63_14>=LP && LA63_14<=LC)||(LA63_14>=QuArrow && LA63_14<=Elvis)||(LA63_14>=Or && LA63_14<=Mod)||LA63_14==Pound||(LA63_14>=130 && LA63_14<=131)) ) {s = 2;}

                        else if ( (LA63_14==Id) && (synpred39())) {s = 10;}

                         
                        input.seek(index63_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA63_5 = input.LA(1);

                         
                        int index63_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index63_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA63_7 = input.LA(1);

                         
                        int index63_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index63_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA69_eotS =
        "\26\uffff";
    static final String DFA69_eofS =
        "\1\2\25\uffff";
    static final String DFA69_minS =
        "\1\4\1\27\1\uffff\1\0\1\27\1\0\1\uffff\1\16\2\0\1\uffff\1\70\4"+
        "\0\2\uffff\1\16\3\uffff";
    static final String DFA69_maxS =
        "\1\u0083\1\163\1\uffff\1\0\1\163\1\0\1\uffff\1\u0083\2\0\1\uffff"+
        "\1\70\4\0\2\uffff\1\u0083\3\uffff";
    static final String DFA69_acceptS =
        "\2\uffff\1\2\3\uffff\1\1\3\uffff\1\1\5\uffff\2\1\1\uffff\3\1";
    static final String DFA69_specialS =
        "\3\uffff\1\4\1\uffff\1\5\2\uffff\1\6\1\3\2\uffff\1\7\1\2\1\1\1"+
        "\0\6\uffff}>";
    static final String[] DFA69_transitionS = {
            "\11\2\1\uffff\41\2\10\uffff\15\2\1\uffff\1\2\1\1\52\2\2\uffff"+
            "\1\2\16\uffff\2\2",
            "\10\2\1\uffff\4\2\2\uffff\5\2\14\uffff\1\2\1\3\4\2\1\4\1\uffff"+
            "\1\2\2\uffff\1\2\43\uffff\1\5\5\2\3\uffff\2\2\2\uffff\1\2",
            "",
            "\1\uffff",
            "\4\2\16\uffff\2\2\14\uffff\1\2\1\7\4\2\1\10\1\uffff\1\2\3"+
            "\uffff\1\2\2\uffff\1\2\37\uffff\1\11\5\2\3\uffff\2\2\2\uffff"+
            "\1\2",
            "\1\uffff",
            "",
            "\1\2\34\uffff\4\2\16\uffff\1\15\1\17\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\13\1\uffff\1\16\1\uffff\17\2\1\14\27\2\4\uffff\1\2\16"+
            "\uffff\2\2",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\2\34\uffff\4\2\16\uffff\1\15\1\17\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\16\1\uffff\17\2\1\14\27\2\4\uffff\1\2\16\uffff"+
            "\2\2",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "1147:3: ({...}? =>colon= Colon valueType= ctype )?";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA69_15 = input.LA(1);

                         
                        int index69_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (noWhitespaceBefore()) ) {s = 6;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA69_14 = input.LA(1);

                         
                        int index69_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (noWhitespaceBefore()) ) {s = 21;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA69_13 = input.LA(1);

                         
                        int index69_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (noWhitespaceBefore()) ) {s = 20;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA69_9 = input.LA(1);

                         
                        int index69_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (noWhitespaceBefore()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA69_3 = input.LA(1);

                         
                        int index69_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (noWhitespaceBefore()) ) {s = 6;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA69_5 = input.LA(1);

                         
                        int index69_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (noWhitespaceBefore()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA69_8 = input.LA(1);

                         
                        int index69_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (noWhitespaceBefore()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA69_12 = input.LA(1);

                         
                        int index69_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (noWhitespaceBefore()) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index69_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA104_eotS =
        "\160\uffff";
    static final String DFA104_eofS =
        "\160\uffff";
    static final String DFA104_minS =
        "\1\27\12\uffff\1\75\1\27\1\0\2\uffff\1\70\6\uffff\1\16\2\0\30\uffff"+
        "\1\75\1\70\3\0\60\uffff\1\75\3\uffff\1\16\4\uffff";
    static final String DFA104_maxS =
        "\1\163\12\uffff\2\163\1\0\2\uffff\1\70\6\uffff\1\u0083\2\0\30\uffff"+
        "\1\163\1\70\3\0\60\uffff\1\163\3\uffff\1\u0083\4\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\3\uffff\1\15"+
        "\1\21\1\uffff\4\13\1\14\1\17\3\uffff\26\20\1\16\1\17\5\uffff\60"+
        "\20\1\uffff\1\20\2\17\1\uffff\3\17\1\20";
    static final String DFA104_specialS =
        "\1\14\12\uffff\1\4\1\12\1\2\11\uffff\1\13\1\1\1\10\30\uffff\1\6"+
        "\1\uffff\1\5\1\3\1\11\60\uffff\1\7\3\uffff\1\0\4\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\6\1\5\1\7\1\4\16\uffff\2\10\14\uffff\1\16\1\13\1\1\1\2\1"+
            "\3\1\11\1\14\1\uffff\1\17\46\uffff\1\15\14\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\22\3\uffff\1\25\2\uffff\1\20\1\uffff\1\23\20\uffff\1\21"+
            "\33\uffff\1\24",
            "\1\51\1\50\1\52\1\47\16\uffff\1\54\1\53\14\uffff\1\57\1\27"+
            "\1\44\1\45\1\46\1\55\1\30\1\uffff\1\43\3\uffff\1\32\2\uffff"+
            "\1\33\37\uffff\1\31\1\42\1\36\1\37\1\34\1\35\3\uffff\1\41\1"+
            "\40\2\uffff\1\56",
            "\1\uffff",
            "",
            "",
            "\1\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\117\34\uffff\1\111\1\112\1\113\1\71\16\uffff\1\65\1\147"+
            "\1\75\1\uffff\1\150\1\uffff\1\146\1\63\1\uffff\1\66\1\uffff"+
            "\1\74\1\72\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1"+
            "\143\1\144\1\145\1\73\1\114\1\64\1\132\1\131\1\127\1\130\1\125"+
            "\1\126\1\105\1\106\1\120\1\121\1\123\1\122\1\124\1\110\1\70"+
            "\1\107\1\76\1\77\1\103\1\104\1\100\1\101\1\102\4\uffff\1\67"+
            "\16\uffff\1\115\1\116",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\22\3\uffff\1\25\4\uffff\1\23\20\uffff\1\21\33\uffff\1\24",
            "\1\153",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\22\10\uffff\1\23\20\uffff\1\21\33\uffff\1\24",
            "",
            "",
            "",
            "\1\117\34\uffff\1\111\1\112\1\113\1\71\16\uffff\1\65\1\147"+
            "\1\75\1\uffff\1\150\1\uffff\1\146\2\uffff\1\66\1\uffff\1\74"+
            "\1\72\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
            "\1\144\1\145\1\73\1\114\1\64\1\132\1\131\1\127\1\130\1\125\1"+
            "\126\1\105\1\106\1\120\1\121\1\123\1\122\1\124\1\110\1\157\1"+
            "\107\1\76\1\77\1\103\1\104\1\100\1\101\1\102\4\uffff\1\67\16"+
            "\uffff\1\115\1\116",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "1642:1: termBaseExpr returns [Expression ex] : (nl= numberLiteral | sl= stringLiteral | ul= uriLiteral | nu= nullLiteral | sr= superRef | tr= thisRef | ir= itRef | bl= boolLiteral | ds= dslLiteral | ( Pound )=>slit= slotWithoutTypeLit | ( ctype Pound )=>sot= slotOrTypeLiteral | ( simpleType LC )=>stCall= callExprWithoutArgs | ( idNotType )=>ie= idExpr[null] | cl= closure | ( ctype )=>r= ctype | ( LB )=>lm= listOrMap | ( LP )=>pe= parenExpr );";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_107 = input.LA(1);

                         
                        int index104_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA104_107==Qu) ) {s = 52;}

                        else if ( (LA104_107==LB) ) {s = 53;}

                        else if ( (LA104_107==Colon) ) {s = 54;}

                        else if ( (LA104_107==Pound) && (synpred63())) {s = 55;}

                        else if ( (LA104_107==RB) ) {s = 103;}

                        else if ( (LA104_107==Dot) && (synpred63())) {s = 57;}

                        else if ( (LA104_107==Arrow) && (synpred63())) {s = 58;}

                        else if ( (LA104_107==QuDot) && (synpred63())) {s = 59;}

                        else if ( (LA104_107==QuArrow) && (synpred63())) {s = 60;}

                        else if ( (LA104_107==LP) && (synpred63())) {s = 61;}

                        else if ( (LA104_107==Incr) && (synpred63())) {s = 62;}

                        else if ( (LA104_107==Decr) && (synpred63())) {s = 63;}

                        else if ( (LA104_107==Mul) && (synpred63())) {s = 64;}

                        else if ( (LA104_107==Div) && (synpred63())) {s = 65;}

                        else if ( (LA104_107==Mod) && (synpred63())) {s = 66;}

                        else if ( (LA104_107==Add) && (synpred63())) {s = 67;}

                        else if ( (LA104_107==Sub) && (synpred63())) {s = 68;}

                        else if ( (LA104_107==LShift) && (synpred63())) {s = 69;}

                        else if ( (LA104_107==RShift) && (synpred63())) {s = 70;}

                        else if ( (LA104_107==BAnd) && (synpred63())) {s = 71;}

                        else if ( (LA104_107==BNot) && (synpred63())) {s = 72;}

                        else if ( (LA104_107==Pipe) && (synpred63())) {s = 111;}

                        else if ( (LA104_107==RangeExclOld) && (synpred63())) {s = 73;}

                        else if ( (LA104_107==RangeExcl) && (synpred63())) {s = 74;}

                        else if ( (LA104_107==Range) && (synpred63())) {s = 75;}

                        else if ( (LA104_107==Elvis) && (synpred63())) {s = 76;}

                        else if ( (LA104_107==130) && (synpred63())) {s = 77;}

                        else if ( (LA104_107==131) && (synpred63())) {s = 78;}

                        else if ( (LA104_107==As) && (synpred63())) {s = 79;}

                        else if ( (LA104_107==LEG) && (synpred63())) {s = 80;}

                        else if ( (LA104_107==LE) && (synpred63())) {s = 81;}

                        else if ( (LA104_107==LT) && (synpred63())) {s = 82;}

                        else if ( (LA104_107==GE) && (synpred63())) {s = 83;}

                        else if ( (LA104_107==GT) && (synpred63())) {s = 84;}

                        else if ( (LA104_107==Eq) && (synpred63())) {s = 85;}

                        else if ( (LA104_107==NEq) && (synpred63())) {s = 86;}

                        else if ( (LA104_107==SEq) && (synpred63())) {s = 87;}

                        else if ( (LA104_107==NSEq) && (synpred63())) {s = 88;}

                        else if ( (LA104_107==And) && (synpred63())) {s = 89;}

                        else if ( (LA104_107==Or) && (synpred63())) {s = 90;}

                        else if ( (LA104_107==Assign) && (synpred63())) {s = 91;}

                        else if ( (LA104_107==MulAss) && (synpred63())) {s = 92;}

                        else if ( (LA104_107==DivAss) && (synpred63())) {s = 93;}

                        else if ( (LA104_107==ModAss) && (synpred63())) {s = 94;}

                        else if ( (LA104_107==AddAss) && (synpred63())) {s = 95;}

                        else if ( (LA104_107==SubAss) && (synpred63())) {s = 96;}

                        else if ( (LA104_107==LShiftAss) && (synpred63())) {s = 97;}

                        else if ( (LA104_107==RShiftAss) && (synpred63())) {s = 98;}

                        else if ( (LA104_107==BAndAss) && (synpred63())) {s = 99;}

                        else if ( (LA104_107==BNotAss) && (synpred63())) {s = 100;}

                        else if ( (LA104_107==PipeAss) && (synpred63())) {s = 101;}

                        else if ( (LA104_107==Comma) && (synpred63())) {s = 102;}

                        else if ( (LA104_107==LC) && (synpred63())) {s = 104;}

                         
                        input.seek(index104_107);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA104_24 = input.LA(1);

                         
                        int index104_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59()) ) {s = 20;}

                        else if ( (synpred62()) ) {s = 105;}

                        else if ( (synpred63()) ) {s = 104;}

                         
                        input.seek(index104_24);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA104_13 = input.LA(1);

                         
                        int index104_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59()) ) {s = 20;}

                        else if ( (true) ) {s = 48;}

                        else if ( (synpred62()) ) {s = 49;}

                         
                        input.seek(index104_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA104_53 = input.LA(1);

                         
                        int index104_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59()) ) {s = 20;}

                        else if ( (synpred62()) ) {s = 109;}

                        else if ( (synpred63()) ) {s = 104;}

                         
                        input.seek(index104_53);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA104_11 = input.LA(1);

                         
                        int index104_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA104_11==DoubleColon) ) {s = 16;}

                        else if ( (LA104_11==Qu) && (synpred59())) {s = 17;}

                        else if ( (LA104_11==LB) && (synpred59())) {s = 18;}

                        else if ( (LA104_11==Colon) && (synpred59())) {s = 19;}

                        else if ( (LA104_11==Pound) && (synpred59())) {s = 20;}

                        else if ( (LA104_11==LC) && (synpred60())) {s = 21;}

                        else if ( (synpred61()) ) {s = 14;}

                        else if ( (synpred62()) ) {s = 22;}

                         
                        input.seek(index104_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA104_52 = input.LA(1);

                         
                        int index104_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59()) ) {s = 20;}

                        else if ( (synpred62()) ) {s = 108;}

                        else if ( (synpred63()) ) {s = 104;}

                         
                        input.seek(index104_52);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA104_50 = input.LA(1);

                         
                        int index104_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA104_50==Qu) && (synpred59())) {s = 17;}

                        else if ( (LA104_50==LB) && (synpred59())) {s = 18;}

                        else if ( (LA104_50==Colon) && (synpred59())) {s = 19;}

                        else if ( (LA104_50==Pound) && (synpred59())) {s = 20;}

                        else if ( (LA104_50==LC) && (synpred60())) {s = 21;}

                         
                        input.seek(index104_50);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA104_103 = input.LA(1);

                         
                        int index104_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA104_103==Qu) && (synpred59())) {s = 17;}

                        else if ( (LA104_103==LB) && (synpred59())) {s = 18;}

                        else if ( (LA104_103==Colon) && (synpred59())) {s = 19;}

                        else if ( (LA104_103==Pound) && (synpred59())) {s = 20;}

                        else if ( (synpred62()) ) {s = 22;}

                        else if ( (synpred63()) ) {s = 104;}

                         
                        input.seek(index104_103);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA104_25 = input.LA(1);

                         
                        int index104_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59()) ) {s = 20;}

                        else if ( (synpred62()) ) {s = 106;}

                        else if ( (synpred63()) ) {s = 104;}

                         
                        input.seek(index104_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA104_54 = input.LA(1);

                         
                        int index104_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59()) ) {s = 20;}

                        else if ( (synpred62()) ) {s = 110;}

                        else if ( (synpred63()) ) {s = 104;}

                         
                        input.seek(index104_54);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA104_12 = input.LA(1);

                         
                        int index104_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA104_12==Id) ) {s = 23;}

                        else if ( (LA104_12==LB) ) {s = 24;}

                        else if ( (LA104_12==Pipe) ) {s = 25;}

                        else if ( (LA104_12==Comma) && (synpred63())) {s = 26;}

                        else if ( (LA104_12==Colon) && (synpred63())) {s = 27;}

                        else if ( (LA104_12==Add) && (synpred63())) {s = 28;}

                        else if ( (LA104_12==Sub) && (synpred63())) {s = 29;}

                        else if ( (LA104_12==Incr) && (synpred63())) {s = 30;}

                        else if ( (LA104_12==Decr) && (synpred63())) {s = 31;}

                        else if ( (LA104_12==Inv) && (synpred63())) {s = 32;}

                        else if ( (LA104_12==Not) && (synpred63())) {s = 33;}

                        else if ( (LA104_12==BAnd) && (synpred63())) {s = 34;}

                        else if ( (LA104_12==LP) && (synpred63())) {s = 35;}

                        else if ( (LA104_12==Number) && (synpred63())) {s = 36;}

                        else if ( (LA104_12==String) && (synpred63())) {s = 37;}

                        else if ( (LA104_12==Uri) && (synpred63())) {s = 38;}

                        else if ( (LA104_12==Null) && (synpred63())) {s = 39;}

                        else if ( (LA104_12==Super) && (synpred63())) {s = 40;}

                        else if ( (LA104_12==This) && (synpred63())) {s = 41;}

                        else if ( (LA104_12==It) && (synpred63())) {s = 42;}

                        else if ( (LA104_12==True) && (synpred63())) {s = 43;}

                        else if ( (LA104_12==False) && (synpred63())) {s = 44;}

                        else if ( (LA104_12==Dsl) && (synpred63())) {s = 45;}

                        else if ( (LA104_12==Pound) && (synpred63())) {s = 46;}

                        else if ( (LA104_12==AtId) && (synpred63())) {s = 47;}

                         
                        input.seek(index104_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA104_23 = input.LA(1);

                         
                        int index104_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA104_23==DoubleColon) ) {s = 51;}

                        else if ( (LA104_23==Qu) ) {s = 52;}

                        else if ( (LA104_23==LB) ) {s = 53;}

                        else if ( (LA104_23==Colon) ) {s = 54;}

                        else if ( (LA104_23==Pound) && (synpred63())) {s = 55;}

                        else if ( (LA104_23==Pipe) && (synpred63())) {s = 56;}

                        else if ( (LA104_23==Dot) && (synpred63())) {s = 57;}

                        else if ( (LA104_23==Arrow) && (synpred63())) {s = 58;}

                        else if ( (LA104_23==QuDot) && (synpred63())) {s = 59;}

                        else if ( (LA104_23==QuArrow) && (synpred63())) {s = 60;}

                        else if ( (LA104_23==LP) && (synpred63())) {s = 61;}

                        else if ( (LA104_23==Incr) && (synpred63())) {s = 62;}

                        else if ( (LA104_23==Decr) && (synpred63())) {s = 63;}

                        else if ( (LA104_23==Mul) && (synpred63())) {s = 64;}

                        else if ( (LA104_23==Div) && (synpred63())) {s = 65;}

                        else if ( (LA104_23==Mod) && (synpred63())) {s = 66;}

                        else if ( (LA104_23==Add) && (synpred63())) {s = 67;}

                        else if ( (LA104_23==Sub) && (synpred63())) {s = 68;}

                        else if ( (LA104_23==LShift) && (synpred63())) {s = 69;}

                        else if ( (LA104_23==RShift) && (synpred63())) {s = 70;}

                        else if ( (LA104_23==BAnd) && (synpred63())) {s = 71;}

                        else if ( (LA104_23==BNot) && (synpred63())) {s = 72;}

                        else if ( (LA104_23==RangeExclOld) && (synpred63())) {s = 73;}

                        else if ( (LA104_23==RangeExcl) && (synpred63())) {s = 74;}

                        else if ( (LA104_23==Range) && (synpred63())) {s = 75;}

                        else if ( (LA104_23==Elvis) && (synpred63())) {s = 76;}

                        else if ( (LA104_23==130) && (synpred63())) {s = 77;}

                        else if ( (LA104_23==131) && (synpred63())) {s = 78;}

                        else if ( (LA104_23==As) && (synpred63())) {s = 79;}

                        else if ( (LA104_23==LEG) && (synpred63())) {s = 80;}

                        else if ( (LA104_23==LE) && (synpred63())) {s = 81;}

                        else if ( (LA104_23==LT) && (synpred63())) {s = 82;}

                        else if ( (LA104_23==GE) && (synpred63())) {s = 83;}

                        else if ( (LA104_23==GT) && (synpred63())) {s = 84;}

                        else if ( (LA104_23==Eq) && (synpred63())) {s = 85;}

                        else if ( (LA104_23==NEq) && (synpred63())) {s = 86;}

                        else if ( (LA104_23==SEq) && (synpred63())) {s = 87;}

                        else if ( (LA104_23==NSEq) && (synpred63())) {s = 88;}

                        else if ( (LA104_23==And) && (synpred63())) {s = 89;}

                        else if ( (LA104_23==Or) && (synpred63())) {s = 90;}

                        else if ( (LA104_23==Assign) && (synpred63())) {s = 91;}

                        else if ( (LA104_23==MulAss) && (synpred63())) {s = 92;}

                        else if ( (LA104_23==DivAss) && (synpred63())) {s = 93;}

                        else if ( (LA104_23==ModAss) && (synpred63())) {s = 94;}

                        else if ( (LA104_23==AddAss) && (synpred63())) {s = 95;}

                        else if ( (LA104_23==SubAss) && (synpred63())) {s = 96;}

                        else if ( (LA104_23==LShiftAss) && (synpred63())) {s = 97;}

                        else if ( (LA104_23==RShiftAss) && (synpred63())) {s = 98;}

                        else if ( (LA104_23==BAndAss) && (synpred63())) {s = 99;}

                        else if ( (LA104_23==BNotAss) && (synpred63())) {s = 100;}

                        else if ( (LA104_23==PipeAss) && (synpred63())) {s = 101;}

                        else if ( (LA104_23==Comma) && (synpred63())) {s = 102;}

                        else if ( (LA104_23==RB) ) {s = 103;}

                        else if ( (LA104_23==LC) && (synpred63())) {s = 104;}

                         
                        input.seek(index104_23);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA104_0 = input.LA(1);

                         
                        int index104_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA104_0==Number) ) {s = 1;}

                        else if ( (LA104_0==String) ) {s = 2;}

                        else if ( (LA104_0==Uri) ) {s = 3;}

                        else if ( (LA104_0==Null) ) {s = 4;}

                        else if ( (LA104_0==Super) ) {s = 5;}

                        else if ( (LA104_0==This) ) {s = 6;}

                        else if ( (LA104_0==It) ) {s = 7;}

                        else if ( ((LA104_0>=False && LA104_0<=True)) ) {s = 8;}

                        else if ( (LA104_0==Dsl) ) {s = 9;}

                        else if ( (LA104_0==Pound) && (synpred58())) {s = 10;}

                        else if ( (LA104_0==Id) ) {s = 11;}

                        else if ( (LA104_0==LB) ) {s = 12;}

                        else if ( (LA104_0==Pipe) ) {s = 13;}

                        else if ( (LA104_0==AtId) && (synpred61())) {s = 14;}

                        else if ( (LA104_0==LP) && (synpred64())) {s = 15;}

                         
                        input.seek(index104_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\125\uffff";
    static final String DFA111_eofS =
        "\1\2\4\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff\1\2\13\uffff\1"+
        "\2\5\uffff\2\2\14\uffff\1\2\41\uffff";
    static final String DFA111_minS =
        "\1\4\1\27\1\uffff\1\146\1\70\1\4\1\27\1\0\1\16\1\75\2\0\1\70\3"+
        "\0\1\4\2\0\2\16\2\0\1\uffff\1\0\1\70\1\75\1\76\1\0\2\uffff\1\4\3"+
        "\uffff\2\0\1\4\1\16\3\0\2\uffff\3\0\1\70\3\0\1\4\3\uffff\1\75\1"+
        "\0\1\146\1\75\1\uffff\13\0\1\16\3\uffff\12\0";
    static final String DFA111_maxS =
        "\1\u0083\1\163\1\uffff\2\146\1\u0083\1\163\1\0\1\u0083\1\146\2"+
        "\0\1\70\3\0\1\u0083\2\0\2\u0083\2\0\1\uffff\1\0\1\70\1\146\1\76"+
        "\1\0\2\uffff\1\u0083\3\uffff\2\0\2\u0083\3\0\2\uffff\3\0\1\70\3"+
        "\0\1\u0083\3\uffff\1\146\1\0\2\146\1\uffff\13\0\1\u0083\3\uffff"+
        "\12\0";
    static final String DFA111_acceptS =
        "\2\uffff\1\2\24\uffff\1\1\5\uffff\2\1\1\uffff\3\1\7\uffff\2\1\10"+
        "\uffff\3\1\4\uffff\1\1\14\uffff\3\1\12\uffff";
    static final String DFA111_specialS =
        "\7\uffff\1\35\2\uffff\1\44\1\32\1\uffff\1\30\1\42\1\14\1\uffff"+
        "\1\7\1\17\2\uffff\1\13\1\0\1\uffff\1\10\3\uffff\1\4\6\uffff\1\33"+
        "\1\20\2\uffff\1\31\1\43\1\54\2\uffff\1\52\1\12\1\11\1\uffff\1\36"+
        "\1\46\1\50\5\uffff\1\3\3\uffff\1\6\1\16\1\27\1\41\1\23\1\26\1\40"+
        "\1\53\1\51\1\21\1\24\4\uffff\1\5\1\15\1\25\1\37\1\22\1\2\1\1\1\34"+
        "\1\45\1\47}>";
    static final String[] DFA111_transitionS = {
            "\11\2\1\uffff\41\2\10\uffff\15\2\2\uffff\40\2\1\1\12\2\2\uffff"+
            "\1\2\16\uffff\2\2",
            "\4\2\16\uffff\2\2\14\uffff\1\2\1\5\4\2\1\6\1\uffff\1\2\3\uffff"+
            "\1\3\5\uffff\1\4\34\uffff\1\7\5\2\3\uffff\2\2\2\uffff\1\2",
            "",
            "\1\10",
            "\1\11\4\uffff\1\12\50\uffff\1\13",
            "\11\2\1\uffff\41\2\10\uffff\1\2\1\23\4\2\1\21\5\2\1\15\1\14"+
            "\1\uffff\1\22\2\2\1\16\15\2\1\20\16\2\1\17\12\2\2\uffff\1\2"+
            "\16\uffff\2\2",
            "\4\2\16\uffff\2\2\14\uffff\1\2\1\24\4\2\1\25\1\uffff\1\2\3"+
            "\uffff\1\2\2\uffff\1\2\37\uffff\1\26\5\2\3\uffff\2\2\2\uffff"+
            "\1\2",
            "\1\uffff",
            "\1\2\10\uffff\10\2\1\uffff\4\2\2\uffff\11\2\10\uffff\7\2\1"+
            "\uffff\1\2\1\uffff\1\30\2\2\2\uffff\53\2\2\uffff\1\2\16\uffff"+
            "\2\2",
            "\1\33\6\uffff\1\31\1\uffff\1\34\20\uffff\1\32\16\uffff\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\37",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\11\2\1\uffff\41\2\10\uffff\1\2\1\46\4\2\1\43\5\2\1\47\2\uffff"+
            "\1\44\2\2\1\50\15\2\1\45\16\2\1\51\12\2\2\uffff\1\2\16\uffff"+
            "\2\2",
            "\1\uffff",
            "\1\uffff",
            "\1\2\10\uffff\10\2\1\uffff\4\2\2\uffff\11\2\10\uffff\7\2\1"+
            "\uffff\1\2\1\uffff\2\2\1\54\5\2\1\55\34\2\1\56\12\2\2\uffff"+
            "\1\2\16\uffff\2\2",
            "\1\2\34\uffff\4\2\16\uffff\1\61\1\63\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\1\57\1\uffff\1\62\1\uffff\17\2\1\60\27\2\4\uffff\1\2\16"+
            "\uffff\2\2",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\67",
            "\1\33\10\uffff\1\70\20\uffff\1\71\16\uffff\1\10",
            "\1\72",
            "\1\uffff",
            "",
            "",
            "\11\2\1\uffff\41\2\10\uffff\1\2\1\23\4\2\1\74\5\2\1\76\2\uffff"+
            "\1\75\2\2\1\77\15\2\1\20\16\2\1\100\12\2\2\uffff\1\2\16\uffff"+
            "\2\2",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\11\2\1\uffff\41\2\10\uffff\1\2\1\46\12\2\1\101\2\uffff\3"+
            "\2\1\102\34\2\1\103\12\2\2\uffff\1\2\16\uffff\2\2",
            "\1\2\10\uffff\10\2\1\uffff\4\2\2\uffff\11\2\10\uffff\7\2\1"+
            "\uffff\1\2\1\uffff\2\2\1\104\5\2\1\105\34\2\1\106\12\2\2\uffff"+
            "\1\2\16\uffff\2\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\107",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\11\2\1\uffff\41\2\10\uffff\1\2\1\23\4\2\1\113\5\2\1\115\2"+
            "\uffff\1\114\2\2\1\116\15\2\1\20\16\2\1\117\12\2\2\uffff\1\2"+
            "\16\uffff\2\2",
            "",
            "",
            "",
            "\1\33\10\uffff\1\120\20\uffff\1\32\16\uffff\1\10",
            "\1\uffff",
            "\1\10",
            "\1\33\10\uffff\1\121\20\uffff\1\71\16\uffff\1\10",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\2\34\uffff\4\2\16\uffff\1\123\1\63\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\124\1\uffff\17\2\1\122\27\2\4\uffff\1\2\16\uffff"+
            "\2\2",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "1822:3: ( ( closure )=>cl= closure )?";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_22 = input.LA(1);

                         
                        int index111_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 53;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_81 = input.LA(1);

                         
                        int index111_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_81);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_80 = input.LA(1);

                         
                        int index111_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_80);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_56 = input.LA(1);

                         
                        int index111_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_56);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA111_28 = input.LA(1);

                         
                        int index111_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 59;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_28);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA111_75 = input.LA(1);

                         
                        int index111_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_75);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA111_60 = input.LA(1);

                         
                        int index111_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_60);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA111_17 = input.LA(1);

                         
                        int index111_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA111_24 = input.LA(1);

                         
                        int index111_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 54;}

                        else if ( (lookupNL()) ) {s = 2;}

                         
                        input.seek(index111_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA111_46 = input.LA(1);

                         
                        int index111_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_46);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA111_45 = input.LA(1);

                         
                        int index111_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 33;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_45);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA111_21 = input.LA(1);

                         
                        int index111_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA111_15 = input.LA(1);

                         
                        int index111_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA111_76 = input.LA(1);

                         
                        int index111_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_76);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA111_61 = input.LA(1);

                         
                        int index111_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_61);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA111_18 = input.LA(1);

                         
                        int index111_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA111_36 = input.LA(1);

                         
                        int index111_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 43;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_36);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA111_69 = input.LA(1);

                         
                        int index111_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 33;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_69);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA111_79 = input.LA(1);

                         
                        int index111_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_79);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA111_64 = input.LA(1);

                         
                        int index111_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_64);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA111_70 = input.LA(1);

                         
                        int index111_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_70);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA111_77 = input.LA(1);

                         
                        int index111_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_77);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA111_65 = input.LA(1);

                         
                        int index111_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_65);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA111_62 = input.LA(1);

                         
                        int index111_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_62);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA111_13 = input.LA(1);

                         
                        int index111_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_13);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA111_39 = input.LA(1);

                         
                        int index111_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_39);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA111_11 = input.LA(1);

                         
                        int index111_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 30;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_11);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA111_35 = input.LA(1);

                         
                        int index111_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 42;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_35);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA111_82 = input.LA(1);

                         
                        int index111_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 72;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_82);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 23;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA111_48 = input.LA(1);

                         
                        int index111_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 72;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_48);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA111_78 = input.LA(1);

                         
                        int index111_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 33;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_78);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA111_66 = input.LA(1);

                         
                        int index111_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 33;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_66);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA111_63 = input.LA(1);

                         
                        int index111_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 33;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_63);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA111_14 = input.LA(1);

                         
                        int index111_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 33;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_14);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA111_40 = input.LA(1);

                         
                        int index111_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 33;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_40);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 29;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA111_83 = input.LA(1);

                         
                        int index111_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 73;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_83);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA111_49 = input.LA(1);

                         
                        int index111_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 73;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_49);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA111_84 = input.LA(1);

                         
                        int index111_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 74;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_84);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA111_50 = input.LA(1);

                         
                        int index111_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 74;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_50);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA111_68 = input.LA(1);

                         
                        int index111_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_68);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA111_44 = input.LA(1);

                         
                        int index111_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 32;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA111_67 = input.LA(1);

                         
                        int index111_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_67);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA111_41 = input.LA(1);

                         
                        int index111_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67()) ) {s = 34;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_41);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA112_eotS =
        "\u015a\uffff";
    static final String DFA112_eofS =
        "\1\2\u0159\uffff";
    static final String DFA112_minS =
        "\1\4\1\27\1\uffff\1\16\24\0\1\70\1\0\1\70\4\0\1\30\3\67\1\0\2\16"+
        "\16\0\3\70\30\0\16\uffff\2\0\4\uffff\11\0\1\uffff\114\0\15\uffff"+
        "\1\75\1\70\3\0\34\uffff\1\70\1\0\1\76\23\0\1\75\2\0\1\uffff\2\75"+
        "\1\uffff\1\70\1\75\1\76\1\70\1\75\2\uffff\50\0\1\75\1\76\2\75\26"+
        "\0\1\70\1\75\1\76\1\0\2\uffff\1\75\1\76\1\0\1\75\1\uffff\2\0";
    static final String DFA112_maxS =
        "\1\u0083\1\163\1\uffff\1\u0083\24\0\1\70\1\0\1\70\4\0\4\70\1\0"+
        "\2\u0083\16\0\3\146\30\0\16\uffff\2\0\4\uffff\11\0\1\uffff\114\0"+
        "\15\uffff\1\135\1\146\3\0\34\uffff\1\70\1\0\1\76\23\0\1\127\2\0"+
        "\1\uffff\2\135\1\uffff\1\70\1\127\1\76\1\146\1\135\2\uffff\50\0"+
        "\1\127\1\76\2\127\26\0\1\70\1\127\1\76\1\0\2\uffff\2\127\1\0\1\127"+
        "\1\uffff\2\0";
    static final String DFA112_acceptS =
        "\2\uffff\1\2\114\uffff\16\1\2\uffff\4\1\11\uffff\1\1\114\uffff"+
        "\15\1\5\uffff\34\1\31\uffff\1\1\2\uffff\1\1\5\uffff\2\1\106\uffff"+
        "\2\1\4\uffff\1\1\2\uffff";
    static final String DFA112_specialS =
        "\4\uffff\1\123\1\10\1\u009e\1\u0082\1\20\1\u00e9\1\151\1\u00d6"+
        "\1\47\1\u008e\1\u00e8\1\u008d\1\u00e7\1\u00c6\1\u00b0\1\u00a8\1"+
        "\u00a7\1\41\1\142\1\52\1\uffff\1\u00e6\1\uffff\1\u00e3\1\104\1\21"+
        "\1\u00d7\4\uffff\1\50\2\uffff\1\27\1\171\1\42\1\165\1\162\1\11\1"+
        "\0\1\146\1\63\1\170\1\u0083\1\177\1\174\1\u00d8\3\uffff\1\12\1\55"+
        "\1\66\1\60\1\u00b9\1\u00ef\1\u00ad\1\u0095\1\101\1\u00cb\1\u00e0"+
        "\1\u00c3\1\156\1\26\1\40\1\5\1\137\1\130\1\u00a4\1\120\1\u008a\1"+
        "\111\1\u00db\1\54\16\uffff\1\u00d5\1\u00ee\4\uffff\1\u00be\1\u009c"+
        "\1\15\1\53\1\51\1\u009f\1\u00ce\1\17\1\161\1\uffff\1\30\1\172\1"+
        "\43\1\166\1\163\1\u00b5\1\u00bc\1\147\1\64\1\u00d3\1\u0084\1\u0080"+
        "\1\175\1\u00d9\1\13\1\56\1\67\1\61\1\u00ba\1\u00f0\1\u00ae\1\u0096"+
        "\1\102\1\u00cc\1\u00e1\1\u008f\1\u00c4\1\157\1\31\1\44\1\6\1\140"+
        "\1\131\1\u00a5\1\121\1\u008b\1\112\1\u00b6\1\32\1\173\1\45\1\167"+
        "\1\164\1\u00b7\1\u00bd\1\150\1\65\1\u00d4\1\u0085\1\u0081\1\176"+
        "\1\u00da\1\14\1\57\1\70\1\62\1\u00bb\1\u00f1\1\u00af\1\u0097\1\103"+
        "\1\u00cd\1\u00e2\1\u0090\1\u00c5\1\160\1\33\1\46\1\7\1\141\1\132"+
        "\1\u00a6\1\122\1\u008c\1\113\1\u00b8\17\uffff\1\u009b\1\u009a\1"+
        "\u0099\35\uffff\1\145\1\uffff\1\u00d2\1\u00ed\1\u00ac\1\u0094\1"+
        "\100\1\u00ca\1\u00df\1\u00c2\1\155\1\25\1\37\1\4\1\136\1\127\1\u00a3"+
        "\1\117\1\u0089\1\110\1\u00b4\1\uffff\1\u00e5\1\u009d\13\uffff\1"+
        "\144\1\u00d1\1\u00ec\1\u00ab\1\u0093\1\77\1\u00c9\1\u00de\1\u00c1"+
        "\1\154\1\24\1\36\1\3\1\135\1\126\1\u00a2\1\116\1\u0088\1\107\1\u00b3"+
        "\1\u00d0\1\16\1\u00eb\1\u00aa\1\u0092\1\76\1\u00c8\1\u00dd\1\u00c0"+
        "\1\153\1\23\1\35\1\2\1\134\1\125\1\u00a1\1\115\1\u0087\1\106\1\u00b2"+
        "\4\uffff\1\u00e4\1\u0098\1\143\1\u00cf\1\u00ea\1\u00a9\1\u0091\1"+
        "\75\1\u00c7\1\u00dc\1\u00bf\1\152\1\22\1\34\1\1\1\133\1\124\1\u00a0"+
        "\1\114\1\u0086\1\105\1\u00b1\3\uffff\1\74\4\uffff\1\73\2\uffff\1"+
        "\72\1\71}>";
    static final String[] DFA112_transitionS = {
            "\11\2\1\uffff\41\2\10\uffff\6\2\1\1\6\2\2\uffff\53\2\2\uffff"+
            "\1\2\16\uffff\2\2",
            "\1\23\1\22\1\24\1\21\16\uffff\1\26\1\25\14\uffff\1\31\1\3"+
            "\1\16\1\17\1\20\1\27\1\4\1\uffff\1\15\3\uffff\1\2\2\uffff\1"+
            "\2\37\uffff\1\5\1\14\1\10\1\11\1\6\1\7\3\uffff\1\13\1\12\2\uffff"+
            "\1\30",
            "",
            "\1\66\34\uffff\1\60\1\61\1\62\1\37\16\uffff\1\34\1\36\1\43"+
            "\1\uffff\1\115\1\uffff\1\2\1\32\1\uffff\1\35\1\uffff\1\42\1"+
            "\40\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1"+
            "\113\1\114\1\41\1\63\1\33\1\101\1\100\1\76\1\77\1\74\1\75\1"+
            "\53\1\54\1\67\1\70\1\72\1\71\1\73\1\56\1\57\1\55\1\44\1\45\1"+
            "\51\1\52\1\46\1\47\1\50\4\uffff\1\116\16\uffff\1\64\1\65",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\135",
            "\1\uffff",
            "\1\136",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\143\36\uffff\1\144\1\145",
            "\1\146\1\147",
            "\1\150\1\151",
            "\1\152\1\153",
            "\1\uffff",
            "\1\66\34\uffff\1\167\1\170\1\171\20\uffff\1\u0092\4\uffff"+
            "\1\2\2\uffff\1\2\3\uffff\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b"+
            "\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\uffff\1\172"+
            "\1\u0086\1\u0085\1\u0084\1\u0082\1\u0083\1\u0080\1\u0081\1\162"+
            "\1\163\1\173\1\174\1\176\1\175\1\177\1\165\1\166\1\164\2\uffff"+
            "\1\160\1\161\1\155\1\156\1\157\23\uffff\1\64\1\65",
            "\1\66\34\uffff\1\u009d\1\u009e\1\u009f\20\uffff\1\u00b8\4"+
            "\uffff\1\2\2\uffff\1\2\3\uffff\1\u00ad\1\u00ae\1\u00af\1\u00b0"+
            "\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\uffff"+
            "\1\u00a0\1\u00ac\1\u00ab\1\u00aa\1\u00a8\1\u00a9\1\u00a6\1\u00a7"+
            "\1\u0098\1\u0099\1\u00a1\1\u00a2\1\u00a4\1\u00a3\1\u00a5\1\u009b"+
            "\1\u009c\1\u009a\2\uffff\1\u0096\1\u0097\1\u0093\1\u0094\1\u0095"+
            "\23\uffff\1\64\1\65",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00c6\4\uffff\1\u00c7\50\uffff\1\u00c8",
            "\1\u00c6\4\uffff\1\u00c7\50\uffff\1\u00c9",
            "\1\u00c6\4\uffff\1\u00c7\50\uffff\1\u00ca",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00e9\1\u00fc\4\uffff\1\2\1\u00e7\1\uffff\1\u00ea\3\uffff"+
            "\1\u00f1\1\u00f2\1\u00f3\1\u00f4\1\u00f5\1\u00f6\1\u00f7\1\u00f8"+
            "\1\u00f9\1\u00fa\1\u00fb\2\uffff\1\u00e8\1\u00f0\1\u00ef\1\u00ed"+
            "\1\u00ee\1\u00eb\1\u00ec",
            "\1\u00fd\4\uffff\1\u00fe\50\uffff\1\u00ff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0101",
            "\1\uffff",
            "\1\u0102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0106\1\u0108\5\uffff\1\u0104\1\uffff\1\u0107\20\uffff"+
            "\1\u0105",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\u00e9\1\u011e\4\uffff\1\2\2\uffff\1\u010c\3\uffff\1\u0113"+
            "\1\u0114\1\u0115\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a\1\u011b"+
            "\1\u011c\1\u011d\2\uffff\1\u010b\1\u0112\1\u0111\1\u010f\1\u0110"+
            "\1\u010d\1\u010e",
            "\1\u00e9\1\u0132\4\uffff\1\2\2\uffff\1\u011f\3\uffff\1\u0127"+
            "\1\u0128\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d\1\u012e\1\u012f"+
            "\1\u0130\1\u0131\2\uffff\1\u0120\1\u0126\1\u0125\1\u0123\1\u0124"+
            "\1\u0121\1\u0122",
            "",
            "\1\u0133",
            "\1\u0106\1\u0108\7\uffff\1\u0107\20\uffff\1\u0134",
            "\1\u0135",
            "\1\u0136\4\uffff\1\u0137\50\uffff\1\u0138",
            "\1\u00e9\1\u014c\4\uffff\1\2\2\uffff\1\u013a\3\uffff\1\u0141"+
            "\1\u0142\1\u0143\1\u0144\1\u0145\1\u0146\1\u0147\1\u0148\1\u0149"+
            "\1\u014a\1\u014b\2\uffff\1\u0139\1\u0140\1\u013f\1\u013d\1\u013e"+
            "\1\u013b\1\u013c",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0106\1\u0108\7\uffff\1\u0107\20\uffff\1\u0105",
            "\1\u0108",
            "\1\u0106\1\u0108\7\uffff\1\u0107\20\uffff\1\u0134",
            "\1\u014f\1\u0108\5\uffff\1\u014d\1\uffff\1\u0150\20\uffff"+
            "\1\u014e",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0153",
            "\1\u014f\1\u0108\7\uffff\1\u0155\20\uffff\1\u0154",
            "\1\u0156",
            "\1\uffff",
            "",
            "",
            "\1\u014f\1\u0108\7\uffff\1\u0158\20\uffff\1\u014e",
            "\1\u0108\30\uffff\1\u0134",
            "\1\uffff",
            "\1\u014f\1\u0108\7\uffff\1\u0159\20\uffff\1\u0154",
            "",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "1834:3: ( ( LB )=> (lb= LB index= expr rb= RB ) )?";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_44 = input.LA(1);

                         
                        int index112_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 190;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_44);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA112_325 = input.LA(1);

                         
                        int index112_325 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_325);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA112_299 = input.LA(1);

                         
                        int index112_299 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_299);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA112_279 = input.LA(1);

                         
                        int index112_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_279);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA112_245 = input.LA(1);

                         
                        int index112_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_245);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA112_70 = input.LA(1);

                         
                        int index112_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_70);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA112_139 = input.LA(1);

                         
                        int index112_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_139);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA112_177 = input.LA(1);

                         
                        int index112_177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_177);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA112_5 = input.LA(1);

                         
                        int index112_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 80;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA112_43 = input.LA(1);

                         
                        int index112_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 189;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_43);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA112_55 = input.LA(1);

                         
                        int index112_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 203;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_55);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA112_123 = input.LA(1);

                         
                        int index112_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 203;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_123);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA112_161 = input.LA(1);

                         
                        int index112_161 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 203;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_161);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA112_101 = input.LA(1);

                         
                        int index112_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 223;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_101);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA112_288 = input.LA(1);

                         
                        int index112_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 230;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_288);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA112_106 = input.LA(1);

                         
                        int index112_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 227;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_106);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 83;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_8);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA112_29 = input.LA(1);

                         
                        int index112_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 97;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_29);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA112_323 = input.LA(1);

                         
                        int index112_323 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_323);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA112_297 = input.LA(1);

                         
                        int index112_297 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_297);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA112_277 = input.LA(1);

                         
                        int index112_277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_277);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA112_243 = input.LA(1);

                         
                        int index112_243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_243);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA112_68 = input.LA(1);

                         
                        int index112_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_68);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA112_38 = input.LA(1);

                         
                        int index112_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 185;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_38);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA112_109 = input.LA(1);

                         
                        int index112_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 185;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_109);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA112_137 = input.LA(1);

                         
                        int index112_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_137);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA112_147 = input.LA(1);

                         
                        int index112_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 185;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_147);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA112_175 = input.LA(1);

                         
                        int index112_175 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_175);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA112_324 = input.LA(1);

                         
                        int index112_324 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_324);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA112_298 = input.LA(1);

                         
                        int index112_298 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_298);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA112_278 = input.LA(1);

                         
                        int index112_278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_278);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA112_244 = input.LA(1);

                         
                        int index112_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_244);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA112_69 = input.LA(1);

                         
                        int index112_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_69);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA112_21 = input.LA(1);

                         
                        int index112_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 91;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_21);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA112_40 = input.LA(1);

                         
                        int index112_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 186;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_40);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA112_111 = input.LA(1);

                         
                        int index112_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 186;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_111);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA112_138 = input.LA(1);

                         
                        int index112_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_138);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA112_149 = input.LA(1);

                         
                        int index112_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 186;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_149);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA112_176 = input.LA(1);

                         
                        int index112_176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_176);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA112_12 = input.LA(1);

                         
                        int index112_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_12);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA112_35 = input.LA(1);

                         
                        int index112_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 108;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_35);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA112_103 = input.LA(1);

                         
                        int index112_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 224;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_103);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA112_23 = input.LA(1);

                         
                        int index112_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 92;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_23);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA112_102 = input.LA(1);

                         
                        int index112_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_102);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA112_78 = input.LA(1);

                         
                        int index112_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_78);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA112_56 = input.LA(1);

                         
                        int index112_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_56);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA112_124 = input.LA(1);

                         
                        int index112_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_124);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA112_162 = input.LA(1);

                         
                        int index112_162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_162);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA112_58 = input.LA(1);

                         
                        int index112_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_58);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA112_126 = input.LA(1);

                         
                        int index112_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_126);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA112_164 = input.LA(1);

                         
                        int index112_164 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_164);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA112_46 = input.LA(1);

                         
                        int index112_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 192;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_46);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA112_117 = input.LA(1);

                         
                        int index112_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 192;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_117);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA112_155 = input.LA(1);

                         
                        int index112_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 192;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_155);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA112_57 = input.LA(1);

                         
                        int index112_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA112_125 = input.LA(1);

                         
                        int index112_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_125);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA112_163 = input.LA(1);

                         
                        int index112_163 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 204;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_163);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA112_345 = input.LA(1);

                         
                        int index112_345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 343;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_345);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA112_344 = input.LA(1);

                         
                        int index112_344 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 343;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_344);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA112_341 = input.LA(1);

                         
                        int index112_341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 343;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_341);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA112_336 = input.LA(1);

                         
                        int index112_336 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 343;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_336);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA112_318 = input.LA(1);

                         
                        int index112_318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 208;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_318);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA112_292 = input.LA(1);

                         
                        int index112_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 208;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_292);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA112_272 = input.LA(1);

                         
                        int index112_272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 208;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_272);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA112_238 = input.LA(1);

                         
                        int index112_238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 208;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_238);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA112_63 = input.LA(1);

                         
                        int index112_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 208;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_63);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA112_131 = input.LA(1);

                         
                        int index112_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 208;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_131);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA112_169 = input.LA(1);

                         
                        int index112_169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 208;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_169);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA112_28 = input.LA(1);

                         
                        int index112_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 96;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_28);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA112_331 = input.LA(1);

                         
                        int index112_331 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_331);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA112_305 = input.LA(1);

                         
                        int index112_305 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_305);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA112_285 = input.LA(1);

                         
                        int index112_285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_285);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA112_251 = input.LA(1);

                         
                        int index112_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_251);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA112_76 = input.LA(1);

                         
                        int index112_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_76);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA112_145 = input.LA(1);

                         
                        int index112_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_145);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA112_183 = input.LA(1);

                         
                        int index112_183 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 213;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_183);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA112_329 = input.LA(1);

                         
                        int index112_329 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 217;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_329);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA112_303 = input.LA(1);

                         
                        int index112_303 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 217;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_303);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA112_283 = input.LA(1);

                         
                        int index112_283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 217;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_283);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA112_249 = input.LA(1);

                         
                        int index112_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 217;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_249);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA112_74 = input.LA(1);

                         
                        int index112_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 217;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_74);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA112_143 = input.LA(1);

                         
                        int index112_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 217;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_143);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA112_181 = input.LA(1);

                         
                        int index112_181 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 217;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_181);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 79;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_4);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA112_327 = input.LA(1);

                         
                        int index112_327 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 215;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_327);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA112_301 = input.LA(1);

                         
                        int index112_301 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 215;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_301);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA112_281 = input.LA(1);

                         
                        int index112_281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 215;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_281);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA112_247 = input.LA(1);

                         
                        int index112_247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 215;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_247);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA112_72 = input.LA(1);

                         
                        int index112_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 215;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_72);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA112_141 = input.LA(1);

                         
                        int index112_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 215;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_141);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA112_179 = input.LA(1);

                         
                        int index112_179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 215;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_179);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA112_326 = input.LA(1);

                         
                        int index112_326 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 214;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_326);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA112_300 = input.LA(1);

                         
                        int index112_300 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 214;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_300);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA112_280 = input.LA(1);

                         
                        int index112_280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 214;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_280);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA112_246 = input.LA(1);

                         
                        int index112_246 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 214;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_246);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA112_71 = input.LA(1);

                         
                        int index112_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 214;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_71);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA112_140 = input.LA(1);

                         
                        int index112_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 214;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_140);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA112_178 = input.LA(1);

                         
                        int index112_178 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 214;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_178);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA112_22 = input.LA(1);

                         
                        int index112_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_22);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA112_313 = input.LA(1);

                         
                        int index112_313 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 230;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_313);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA112_267 = input.LA(1);

                         
                        int index112_267 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 230;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_267);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA112_232 = input.LA(1);

                         
                        int index112_232 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 230;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_232);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA112_45 = input.LA(1);

                         
                        int index112_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 191;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_45);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA112_116 = input.LA(1);

                         
                        int index112_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 191;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_116);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA112_154 = input.LA(1);

                         
                        int index112_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 191;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_154);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA112_10 = input.LA(1);

                         
                        int index112_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 85;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_10);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA112_322 = input.LA(1);

                         
                        int index112_322 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 212;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_322);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA112_296 = input.LA(1);

                         
                        int index112_296 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 212;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_296);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA112_276 = input.LA(1);

                         
                        int index112_276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 212;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_276);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA112_242 = input.LA(1);

                         
                        int index112_242 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 212;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_242);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA112_67 = input.LA(1);

                         
                        int index112_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 212;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_67);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA112_136 = input.LA(1);

                         
                        int index112_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 212;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_136);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA112_174 = input.LA(1);

                         
                        int index112_174 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 212;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_174);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA112_107 = input.LA(1);

                         
                        int index112_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 228;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_107);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA112_42 = input.LA(1);

                         
                        int index112_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 188;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_42);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA112_113 = input.LA(1);

                         
                        int index112_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 188;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_113);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA112_151 = input.LA(1);

                         
                        int index112_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 188;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_151);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA112_41 = input.LA(1);

                         
                        int index112_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 187;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_41);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA112_112 = input.LA(1);

                         
                        int index112_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 187;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_112);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA112_150 = input.LA(1);

                         
                        int index112_150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 187;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_150);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA112_47 = input.LA(1);

                         
                        int index112_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 193;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_47);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA112_39 = input.LA(1);

                         
                        int index112_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 186;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_39);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA112_110 = input.LA(1);

                         
                        int index112_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 186;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_110);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA112_148 = input.LA(1);

                         
                        int index112_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 186;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_148);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA112_50 = input.LA(1);

                         
                        int index112_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 196;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_50);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA112_121 = input.LA(1);

                         
                        int index112_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 196;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_121);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA112_159 = input.LA(1);

                         
                        int index112_159 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 196;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_159);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA112_49 = input.LA(1);

                         
                        int index112_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 195;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_49);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA112_120 = input.LA(1);

                         
                        int index112_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 195;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_120);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA112_158 = input.LA(1);

                         
                        int index112_158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 195;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_158);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 82;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_7);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA112_48 = input.LA(1);

                         
                        int index112_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 194;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_48);
                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA112_119 = input.LA(1);

                         
                        int index112_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 194;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_119);
                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA112_157 = input.LA(1);

                         
                        int index112_157 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 194;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_157);
                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA112_330 = input.LA(1);

                         
                        int index112_330 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 218;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_330);
                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA112_304 = input.LA(1);

                         
                        int index112_304 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 218;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_304);
                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA112_284 = input.LA(1);

                         
                        int index112_284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 218;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_284);
                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA112_250 = input.LA(1);

                         
                        int index112_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 218;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_250);
                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA112_75 = input.LA(1);

                         
                        int index112_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 218;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_75);
                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA112_144 = input.LA(1);

                         
                        int index112_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 218;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_144);
                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA112_182 = input.LA(1);

                         
                        int index112_182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 218;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_182);
                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA112_15 = input.LA(1);

                         
                        int index112_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 90;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_15);
                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA112_13 = input.LA(1);

                         
                        int index112_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_13);
                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA112_134 = input.LA(1);

                         
                        int index112_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 230;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_134);
                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA112_172 = input.LA(1);

                         
                        int index112_172 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 230;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_172);
                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA112_317 = input.LA(1);

                         
                        int index112_317 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_317);
                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA112_291 = input.LA(1);

                         
                        int index112_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_291);
                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA112_271 = input.LA(1);

                         
                        int index112_271 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_271);
                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA112_237 = input.LA(1);

                         
                        int index112_237 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_237);
                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA112_62 = input.LA(1);

                         
                        int index112_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_62);
                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA112_130 = input.LA(1);

                         
                        int index112_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_130);
                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA112_168 = input.LA(1);

                         
                        int index112_168 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_168);
                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA112_312 = input.LA(1);

                         
                        int index112_312 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 338;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_312);
                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA112_202 = input.LA(1);

                         
                        int index112_202 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 256;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_202);
                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA112_201 = input.LA(1);

                         
                        int index112_201 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 256;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_201);
                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA112_200 = input.LA(1);

                         
                        int index112_200 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 256;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_200);
                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA112_100 = input.LA(1);

                         
                        int index112_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 222;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_100);
                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA112_255 = input.LA(1);

                         
                        int index112_255 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 266;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_255);
                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 81;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_6);
                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA112_104 = input.LA(1);

                         
                        int index112_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 225;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_104);
                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA112_328 = input.LA(1);

                         
                        int index112_328 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 216;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_328);
                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA112_302 = input.LA(1);

                         
                        int index112_302 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 216;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_302);
                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA112_282 = input.LA(1);

                         
                        int index112_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 216;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_282);
                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA112_248 = input.LA(1);

                         
                        int index112_248 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 216;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_248);
                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA112_73 = input.LA(1);

                         
                        int index112_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 216;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_73);
                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA112_142 = input.LA(1);

                         
                        int index112_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 216;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_142);
                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA112_180 = input.LA(1);

                         
                        int index112_180 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 216;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_180);
                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA112_20 = input.LA(1);

                         
                        int index112_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_20);
                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA112_19 = input.LA(1);

                         
                        int index112_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_19);
                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA112_316 = input.LA(1);

                         
                        int index112_316 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_316);
                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA112_290 = input.LA(1);

                         
                        int index112_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_290);
                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA112_270 = input.LA(1);

                         
                        int index112_270 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_270);
                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA112_236 = input.LA(1);

                         
                        int index112_236 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_236);
                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA112_61 = input.LA(1);

                         
                        int index112_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_61);
                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA112_129 = input.LA(1);

                         
                        int index112_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_129);
                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA112_167 = input.LA(1);

                         
                        int index112_167 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 207;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_167);
                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA112_18 = input.LA(1);

                         
                        int index112_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_18);
                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA112_332 = input.LA(1);

                         
                        int index112_332 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 98;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_332);
                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA112_306 = input.LA(1);

                         
                        int index112_306 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 98;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_306);
                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA112_286 = input.LA(1);

                         
                        int index112_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 98;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_286);
                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA112_252 = input.LA(1);

                         
                        int index112_252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 98;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_252);
                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA112_114 = input.LA(1);

                         
                        int index112_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 189;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_114);
                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA112_146 = input.LA(1);

                         
                        int index112_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 98;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_146);
                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA112_152 = input.LA(1);

                         
                        int index112_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 189;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_152);
                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA112_184 = input.LA(1);

                         
                        int index112_184 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 98;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_184);
                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA112_59 = input.LA(1);

                         
                        int index112_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_59);
                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA112_127 = input.LA(1);

                         
                        int index112_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_127);
                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA112_165 = input.LA(1);

                         
                        int index112_165 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_165);
                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA112_115 = input.LA(1);

                         
                        int index112_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 190;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_115);
                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA112_153 = input.LA(1);

                         
                        int index112_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 190;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_153);
                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA112_99 = input.LA(1);

                         
                        int index112_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_99);
                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA112_321 = input.LA(1);

                         
                        int index112_321 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 211;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_321);
                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA112_295 = input.LA(1);

                         
                        int index112_295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 211;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_295);
                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA112_275 = input.LA(1);

                         
                        int index112_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 211;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_275);
                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA112_241 = input.LA(1);

                         
                        int index112_241 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 211;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_241);
                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA112_66 = input.LA(1);

                         
                        int index112_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 211;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_66);
                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA112_135 = input.LA(1);

                         
                        int index112_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 211;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_135);
                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA112_173 = input.LA(1);

                         
                        int index112_173 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 211;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_173);
                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA112_17 = input.LA(1);

                         
                        int index112_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_17);
                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA112_319 = input.LA(1);

                         
                        int index112_319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 209;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_319);
                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA112_293 = input.LA(1);

                         
                        int index112_293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 209;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_293);
                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA112_273 = input.LA(1);

                         
                        int index112_273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 209;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_273);
                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA112_239 = input.LA(1);

                         
                        int index112_239 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 209;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_239);
                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA112_64 = input.LA(1);

                         
                        int index112_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 209;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_64);
                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA112_132 = input.LA(1);

                         
                        int index112_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 209;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_132);
                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA112_170 = input.LA(1);

                         
                        int index112_170 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 209;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_170);
                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA112_105 = input.LA(1);

                         
                        int index112_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 226;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_105);
                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA112_314 = input.LA(1);

                         
                        int index112_314 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 259;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_314);
                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA112_287 = input.LA(1);

                         
                        int index112_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 259;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_287);
                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA112_268 = input.LA(1);

                         
                        int index112_268 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 259;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_268);
                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA112_234 = input.LA(1);

                         
                        int index112_234 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 259;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_234);
                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA112_118 = input.LA(1);

                         
                        int index112_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 229;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_118);
                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA112_156 = input.LA(1);

                         
                        int index112_156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 229;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_156);
                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA112_93 = input.LA(1);

                         
                        int index112_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 220;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_93);
                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA112_11 = input.LA(1);

                         
                        int index112_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 86;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_11);
                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA112_30 = input.LA(1);

                         
                        int index112_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 98;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_30);
                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA112_51 = input.LA(1);

                         
                        int index112_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 197;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_51);
                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA112_122 = input.LA(1);

                         
                        int index112_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 197;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_122);
                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA112_160 = input.LA(1);

                         
                        int index112_160 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 197;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_160);
                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA112_77 = input.LA(1);

                         
                        int index112_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 219;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_77);
                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA112_320 = input.LA(1);

                         
                        int index112_320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 210;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_320);
                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA112_294 = input.LA(1);

                         
                        int index112_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 210;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_294);
                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA112_274 = input.LA(1);

                         
                        int index112_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 210;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_274);
                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA112_240 = input.LA(1);

                         
                        int index112_240 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 210;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_240);
                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA112_65 = input.LA(1);

                         
                        int index112_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 210;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_65);
                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA112_133 = input.LA(1);

                         
                        int index112_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 210;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_133);
                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA112_171 = input.LA(1);

                         
                        int index112_171 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 210;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_171);
                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA112_27 = input.LA(1);

                         
                        int index112_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 95;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_27);
                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA112_311 = input.LA(1);

                         
                        int index112_311 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 337;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_311);
                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA112_254 = input.LA(1);

                         
                        int index112_254 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 265;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_254);
                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA112_25 = input.LA(1);

                         
                        int index112_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_25);
                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA112_16 = input.LA(1);

                         
                        int index112_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_16);
                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA112_14 = input.LA(1);

                         
                        int index112_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 89;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_14);
                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 84;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA112_315 = input.LA(1);

                         
                        int index112_315 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 206;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_315);
                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA112_289 = input.LA(1);

                         
                        int index112_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 206;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_289);
                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA112_269 = input.LA(1);

                         
                        int index112_269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 206;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_269);
                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA112_235 = input.LA(1);

                         
                        int index112_235 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 206;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_235);
                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA112_94 = input.LA(1);

                         
                        int index112_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 221;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_94);
                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA112_60 = input.LA(1);

                         
                        int index112_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 206;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_60);
                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA112_128 = input.LA(1);

                         
                        int index112_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 206;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_128);
                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA112_166 = input.LA(1);

                         
                        int index112_166 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68()) ) {s = 206;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_166);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA116_eotS =
        "\167\uffff";
    static final String DFA116_eofS =
        "\1\3\5\uffff\1\3\43\uffff\1\3\7\uffff\1\3\2\uffff\1\3\13\uffff"+
        "\1\3\5\uffff\2\3\14\uffff\1\3\41\uffff";
    static final String DFA116_minS =
        "\1\4\1\27\1\4\1\uffff\1\146\1\70\1\4\1\27\2\0\40\uffff\1\16\1\75"+
        "\2\0\1\70\3\0\1\4\2\0\2\16\2\0\1\uffff\1\0\1\70\1\75\1\76\1\0\2"+
        "\uffff\1\4\3\uffff\2\0\1\4\1\16\3\0\2\uffff\3\0\1\70\3\0\1\4\3\uffff"+
        "\1\75\1\0\1\146\1\75\1\uffff\13\0\1\16\3\uffff\12\0";
    static final String DFA116_maxS =
        "\1\u0083\2\163\1\uffff\2\146\1\u0083\1\163\2\0\40\uffff\1\u0083"+
        "\1\146\2\0\1\70\3\0\1\u0083\2\0\2\u0083\2\0\1\uffff\1\0\1\70\1\146"+
        "\1\76\1\0\2\uffff\1\u0083\3\uffff\2\0\2\u0083\3\0\2\uffff\3\0\1"+
        "\70\3\0\1\u0083\3\uffff\1\146\1\0\2\146\1\uffff\13\0\1\u0083\3\uffff"+
        "\12\0";
    static final String DFA116_acceptS =
        "\3\uffff\1\3\6\uffff\40\2\17\uffff\1\1\5\uffff\2\1\1\uffff\3\1"+
        "\7\uffff\2\1\10\uffff\3\1\4\uffff\1\1\14\uffff\3\1\12\uffff";
    static final String DFA116_specialS =
        "\2\uffff\1\14\5\uffff\1\32\1\16\42\uffff\1\37\1\23\1\uffff\1\50"+
        "\1\12\1\17\1\uffff\1\54\1\42\2\uffff\1\2\1\15\1\uffff\1\45\3\uffff"+
        "\1\35\6\uffff\1\6\1\43\2\uffff\1\51\1\13\1\25\2\uffff\1\27\1\5\1"+
        "\21\1\uffff\1\56\1\31\1\4\5\uffff\1\36\3\uffff\1\55\1\44\1\52\1"+
        "\11\1\1\1\10\1\24\1\47\1\26\1\20\1\22\4\uffff\1\53\1\41\1\46\1\7"+
        "\1\0\1\34\1\33\1\40\1\30\1\3}>";
    static final String[] DFA116_transitionS = {
            "\11\3\1\uffff\41\3\10\uffff\12\3\1\2\2\3\2\uffff\40\3\1\1\12"+
            "\3\2\uffff\1\3\16\uffff\2\3",
            "\4\3\16\uffff\2\3\14\uffff\1\3\1\6\4\3\1\7\1\uffff\1\3\3\uffff"+
            "\1\4\5\uffff\1\5\34\uffff\1\10\5\3\3\uffff\2\3\2\uffff\1\3",
            "\11\3\5\uffff\5\3\1\42\1\41\1\43\1\40\1\12\1\13\1\14\1\15"+
            "\1\uffff\1\16\1\20\1\21\1\22\2\uffff\1\17\2\uffff\1\45\1\44"+
            "\14\uffff\1\50\1\11\1\35\1\36\1\37\1\46\1\23\1\uffff\1\34\2"+
            "\uffff\1\51\43\uffff\1\24\1\33\1\27\1\30\1\25\1\26\3\uffff\1"+
            "\32\1\31\2\uffff\1\47",
            "",
            "\1\52",
            "\1\53\4\uffff\1\54\50\uffff\1\55",
            "\11\3\1\uffff\41\3\10\uffff\1\3\1\65\4\3\1\63\5\3\1\57\1\56"+
            "\1\uffff\1\64\2\3\1\60\15\3\1\62\16\3\1\61\12\3\2\uffff\1\3"+
            "\16\uffff\2\3",
            "\4\3\16\uffff\2\3\14\uffff\1\3\1\66\4\3\1\67\1\uffff\1\3\3"+
            "\uffff\1\3\2\uffff\1\3\37\uffff\1\70\5\3\3\uffff\2\3\2\uffff"+
            "\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\10\uffff\10\3\1\uffff\4\3\2\uffff\11\3\10\uffff\7\3\1"+
            "\uffff\1\3\1\uffff\1\72\2\3\2\uffff\53\3\2\uffff\1\3\16\uffff"+
            "\2\3",
            "\1\75\6\uffff\1\73\1\uffff\1\76\20\uffff\1\74\16\uffff\1\52",
            "\1\uffff",
            "\1\uffff",
            "\1\101",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\11\3\1\uffff\41\3\10\uffff\1\3\1\110\4\3\1\105\5\3\1\111"+
            "\2\uffff\1\106\2\3\1\112\15\3\1\107\16\3\1\113\12\3\2\uffff"+
            "\1\3\16\uffff\2\3",
            "\1\uffff",
            "\1\uffff",
            "\1\3\10\uffff\10\3\1\uffff\4\3\2\uffff\11\3\10\uffff\7\3\1"+
            "\uffff\1\3\1\uffff\2\3\1\116\5\3\1\117\34\3\1\120\12\3\2\uffff"+
            "\1\3\16\uffff\2\3",
            "\1\3\34\uffff\4\3\16\uffff\1\123\1\125\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\121\1\uffff\1\124\1\uffff\17\3\1\122\27\3\4\uffff\1\3"+
            "\16\uffff\2\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\131",
            "\1\75\10\uffff\1\132\20\uffff\1\133\16\uffff\1\52",
            "\1\134",
            "\1\uffff",
            "",
            "",
            "\11\3\1\uffff\41\3\10\uffff\1\3\1\65\4\3\1\136\5\3\1\140\2"+
            "\uffff\1\137\2\3\1\141\15\3\1\62\16\3\1\142\12\3\2\uffff\1\3"+
            "\16\uffff\2\3",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\11\3\1\uffff\41\3\10\uffff\1\3\1\110\12\3\1\145\2\uffff\3"+
            "\3\1\143\34\3\1\144\12\3\2\uffff\1\3\16\uffff\2\3",
            "\1\3\10\uffff\10\3\1\uffff\4\3\2\uffff\11\3\10\uffff\7\3\1"+
            "\uffff\1\3\1\uffff\2\3\1\146\5\3\1\147\34\3\1\150\12\3\2\uffff"+
            "\1\3\16\uffff\2\3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\151",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\11\3\1\uffff\41\3\10\uffff\1\3\1\65\4\3\1\155\5\3\1\157\2"+
            "\uffff\1\156\2\3\1\160\15\3\1\62\16\3\1\161\12\3\2\uffff\1\3"+
            "\16\uffff\2\3",
            "",
            "",
            "",
            "\1\75\10\uffff\1\162\20\uffff\1\74\16\uffff\1\52",
            "\1\uffff",
            "\1\52",
            "\1\75\10\uffff\1\163\20\uffff\1\133\16\uffff\1\52",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\3\34\uffff\4\3\16\uffff\1\165\1\125\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\2\uffff\1\166\1\uffff\17\3\1\164\27\3\4\uffff\1\3\16\uffff"+
            "\2\3",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "1883:3: ( ( funcType )=>cl= closure | ( LC )=>cl= itBlock )?";
        }
        public int specialStateTransition(int s, IntStream input) throws NoViableAltException {
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA116_113 = input.LA(1);

                         
                        int index116_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 68;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_113);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA116_98 = input.LA(1);

                         
                        int index116_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 68;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_98);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA116_55 = input.LA(1);

                         
                        int index116_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 86;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_55);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA116_118 = input.LA(1);

                         
                        int index116_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 108;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_118);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA116_84 = input.LA(1);

                         
                        int index116_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 108;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_84);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA116_79 = input.LA(1);

                         
                        int index116_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 67;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_79);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA116_69 = input.LA(1);

                         
                        int index116_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 76;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_69);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA116_112 = input.LA(1);

                         
                        int index116_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 67;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_112);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA116_99 = input.LA(1);

                         
                        int index116_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 67;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_99);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA116_97 = input.LA(1);

                         
                        int index116_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 67;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_97);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA116_48 = input.LA(1);

                         
                        int index116_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 67;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_48);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA116_74 = input.LA(1);

                         
                        int index116_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 67;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_74);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA116_2 = input.LA(1);

                         
                        int index116_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA116_2==Id) ) {s = 9;}

                        else if ( ((LA116_2>=Abstract && LA116_2<=ReadOnly)||(LA116_2>=Public && LA116_2<=New)) ) {s = 3;}

                        else if ( (LA116_2==Break) && (synpred70())) {s = 10;}

                        else if ( (LA116_2==Continue) && (synpred70())) {s = 11;}

                        else if ( (LA116_2==For) && (synpred70())) {s = 12;}

                        else if ( (LA116_2==If) && (synpred70())) {s = 13;}

                        else if ( (LA116_2==Return) && (synpred70())) {s = 14;}

                        else if ( (LA116_2==Switch) && (synpred70())) {s = 15;}

                        else if ( (LA116_2==Throw) && (synpred70())) {s = 16;}

                        else if ( (LA116_2==While) && (synpred70())) {s = 17;}

                        else if ( (LA116_2==Try) && (synpred70())) {s = 18;}

                        else if ( (LA116_2==LB) && (synpred70())) {s = 19;}

                        else if ( (LA116_2==Pipe) && (synpred70())) {s = 20;}

                        else if ( (LA116_2==Add) && (synpred70())) {s = 21;}

                        else if ( (LA116_2==Sub) && (synpred70())) {s = 22;}

                        else if ( (LA116_2==Incr) && (synpred70())) {s = 23;}

                        else if ( (LA116_2==Decr) && (synpred70())) {s = 24;}

                        else if ( (LA116_2==Inv) && (synpred70())) {s = 25;}

                        else if ( (LA116_2==Not) && (synpred70())) {s = 26;}

                        else if ( (LA116_2==BAnd) && (synpred70())) {s = 27;}

                        else if ( (LA116_2==LP) && (synpred70())) {s = 28;}

                        else if ( (LA116_2==Number) && (synpred70())) {s = 29;}

                        else if ( (LA116_2==String) && (synpred70())) {s = 30;}

                        else if ( (LA116_2==Uri) && (synpred70())) {s = 31;}

                        else if ( (LA116_2==Null) && (synpred70())) {s = 32;}

                        else if ( (LA116_2==Super) && (synpred70())) {s = 33;}

                        else if ( (LA116_2==This) && (synpred70())) {s = 34;}

                        else if ( (LA116_2==It) && (synpred70())) {s = 35;}

                        else if ( (LA116_2==True) && (synpred70())) {s = 36;}

                        else if ( (LA116_2==False) && (synpred70())) {s = 37;}

                        else if ( (LA116_2==Dsl) && (synpred70())) {s = 38;}

                        else if ( (LA116_2==Pound) && (synpred70())) {s = 39;}

                        else if ( (LA116_2==AtId) && (synpred70())) {s = 40;}

                        else if ( (LA116_2==RC) && (synpred70())) {s = 41;}

                         
                        input.seek(index116_2);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA116_56 = input.LA(1);

                         
                        int index116_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 87;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA116_9 = input.LA(1);

                         
                        int index116_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70()) ) {s = 41;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_9);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA116_49 = input.LA(1);

                         
                        int index116_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 68;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_49);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA116_103 = input.LA(1);

                         
                        int index116_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 67;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_103);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA116_80 = input.LA(1);

                         
                        int index116_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 68;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_80);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA116_104 = input.LA(1);

                         
                        int index116_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 68;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_104);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA116_45 = input.LA(1);

                         
                        int index116_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 64;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_45);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA116_100 = input.LA(1);

                         
                        int index116_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 68;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_100);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA116_75 = input.LA(1);

                         
                        int index116_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 68;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_75);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA116_102 = input.LA(1);

                         
                        int index116_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 66;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_102);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA116_78 = input.LA(1);

                         
                        int index116_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 66;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_78);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA116_117 = input.LA(1);

                         
                        int index116_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 107;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_117);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA116_83 = input.LA(1);

                         
                        int index116_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 107;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_83);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA116_8 = input.LA(1);

                         
                        int index116_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 57;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_8);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA116_115 = input.LA(1);

                         
                        int index116_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 93;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_115);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA116_114 = input.LA(1);

                         
                        int index116_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 93;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_114);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA116_62 = input.LA(1);

                         
                        int index116_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 93;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_62);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA116_90 = input.LA(1);

                         
                        int index116_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 93;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_90);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA116_44 = input.LA(1);

                         
                        int index116_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 63;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_44);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA116_116 = input.LA(1);

                         
                        int index116_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_116);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA116_110 = input.LA(1);

                         
                        int index116_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 77;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_110);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA116_52 = input.LA(1);

                         
                        int index116_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 77;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_52);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA116_70 = input.LA(1);

                         
                        int index116_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 77;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_70);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA116_95 = input.LA(1);

                         
                        int index116_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 77;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_95);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA116_58 = input.LA(1);

                         
                        int index116_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 88;}

                        else if ( (lookupNL()) ) {s = 3;}

                         
                        input.seek(index116_58);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA116_111 = input.LA(1);

                         
                        int index116_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 66;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_111);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA116_101 = input.LA(1);

                         
                        int index116_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 66;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_101);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA116_47 = input.LA(1);

                         
                        int index116_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 66;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_47);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA116_73 = input.LA(1);

                         
                        int index116_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 66;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_73);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA116_96 = input.LA(1);

                         
                        int index116_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 66;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_96);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA116_109 = input.LA(1);

                         
                        int index116_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 76;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_109);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA116_51 = input.LA(1);

                         
                        int index116_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 76;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_51);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA116_94 = input.LA(1);

                         
                        int index116_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 76;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_94);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA116_82 = input.LA(1);

                         
                        int index116_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69()) ) {s = 106;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index116_82);
                        if ( s>=0 ) return s;
                        break;
            }
            if (backtracking>0) {failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_intro_in_compilationUnit1879 = new BitSet(new long[]{0x00800000007FBFF0L});
    public static final BitSet FOLLOW_using_in_compilationUnit1890 = new BitSet(new long[]{0x00800000007FBFF0L});
    public static final BitSet FOLLOW_typeDef_in_compilationUnit1904 = new BitSet(new long[]{0x00800000007F9FF0L});
    public static final BitSet FOLLOW_EOF_in_compilationUnit1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facet_in_facets1941 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_AtId_in_facet1965 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_Assign_in_facet1968 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_facet1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Pound_in_intro1987 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_Not_in_intro1989 = new BitSet(new long[]{0x0100000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_Div_in_intro1992 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_intro1994 = new BitSet(new long[]{0x0100000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_Id_in_intro1999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Using_in_using2019 = new BitSet(new long[]{0x2100000000000000L});
    public static final BitSet FOLLOW_podSpec_in_using2027 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000090L});
    public static final BitSet FOLLOW_DoubleColon_in_using2035 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_using2044 = new BitSet(new long[]{0x0000000000004002L,0x0000000000000080L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_using2053 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_using2059 = new BitSet(new long[]{0x0000000000004002L,0x0000000000000080L});
    public static final BitSet FOLLOW_As_in_using2076 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_using2085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_using2104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ffi_in_podSpec2134 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_podSpec2151 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_Dot_in_podSpec2158 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_podSpec2165 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_LB_in_ffi2192 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_ffi2197 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RB_in_ffi2202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Abstract_in_flags2221 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Const_in_flags2229 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Final_in_flags2237 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Internal_in_flags2245 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Native_in_flags2253 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_New_in_flags2261 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Once_in_flags2269 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Override_in_flags2277 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Private_in_flags2285 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Protected_in_flags2293 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Public_in_flags2301 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_ReadOnly_in_flags2309 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Static_in_flags2317 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_Virtual_in_flags2325 = new BitSet(new long[]{0x00000000007C1FF2L});
    public static final BitSet FOLLOW_facets_in_typeDef2347 = new BitSet(new long[]{0x00000000007F9FF0L});
    public static final BitSet FOLLOW_flags_in_typeDef2353 = new BitSet(new long[]{0x0000000000038000L});
    public static final BitSet FOLLOW_classDef_in_typeDef2360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixinDef_in_typeDef2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDef_in_typeDef2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Enum_in_enumDef2410 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_enumDef2418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_Colon_in_enumDef2432 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_enumDef2436 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_Comma_in_enumDef2446 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_enumDef2450 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_LC_in_enumDef2463 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_enumValDefs_in_enumDef2467 = new BitSet(new long[]{0x21800000007C1FF0L,0x0000004000000004L});
    public static final BitSet FOLLOW_slotDef_in_enumDef2478 = new BitSet(new long[]{0x21800000007C1FF0L,0x0000004000000004L});
    public static final BitSet FOLLOW_RC_in_enumDef2493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Class_in_classDef2515 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_classDef2523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_Colon_in_classDef2537 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_classDef2541 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_Comma_in_classDef2551 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_classDef2555 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_LC_in_classDef2568 = new BitSet(new long[]{0x21800000007C1FF0L,0x0000004000000004L});
    public static final BitSet FOLLOW_slotDef_in_classDef2578 = new BitSet(new long[]{0x21800000007C1FF0L,0x0000004000000004L});
    public static final BitSet FOLLOW_RC_in_classDef2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Mixin_in_mixinDef2615 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_mixinDef2623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_Colon_in_mixinDef2637 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_mixinDef2641 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_Comma_in_mixinDef2651 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_mixinDef2655 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_LC_in_mixinDef2668 = new BitSet(new long[]{0x21800000007C1FF0L,0x0000004000000004L});
    public static final BitSet FOLLOW_slotDef_in_mixinDef2678 = new BitSet(new long[]{0x21800000007C1FF0L,0x0000004000000004L});
    public static final BitSet FOLLOW_RC_in_mixinDef2693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumValDef_in_enumValDefs2714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000088L});
    public static final BitSet FOLLOW_Comma_in_enumValDefs2728 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_enumValDef_in_enumValDefs2738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000088L});
    public static final BitSet FOLLOW_eos_in_enumValDefs2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_enumValDef2773 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_args_in_enumValDef2782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Static_in_slotDef2828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_slotDef2830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_facets_in_slotDef2842 = new BitSet(new long[]{0x21000000007C1FF0L,0x0000004000000000L});
    public static final BitSet FOLLOW_flags_in_slotDef2853 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_slotDef2868 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_slotDef2872 = new BitSet(new long[]{0x8000000000000002L,0x00000000000000A2L});
    public static final BitSet FOLLOW_methodDef_in_slotDef2893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDefWithInitializer_in_slotDef2908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDef_in_slotDef2924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eos_in_slotDef2933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctorDef_in_slotDef2956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Define_in_fieldDefWithInitializer2989 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_fieldDefWithInitializer2993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000082L});
    public static final BitSet FOLLOW_getterAndSetter_in_fieldDefWithInitializer3004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_fieldDefWithInitializer3012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_getterAndSetter_in_fieldDef3036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_fieldDef3041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_getterAndSetter3055 = new BitSet(new long[]{0x01000000007C1FF0L});
    public static final BitSet FOLLOW_fieldGetter_in_getterAndSetter3065 = new BitSet(new long[]{0x01000000007C1FF0L,0x0000000000000004L});
    public static final BitSet FOLLOW_fieldSetter_in_getterAndSetter3070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_fieldSetter_in_getterAndSetter3078 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_fieldGetter_in_getterAndSetter3083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RC_in_getterAndSetter3095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_get_in_fieldGetter3124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000082L});
    public static final BitSet FOLLOW_eos_in_fieldGetter3131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_fieldGetter3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flags_in_fieldSetter3167 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_set_in_fieldSetter3169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000082L});
    public static final BitSet FOLLOW_eos_in_fieldSetter3176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_fieldSetter3182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_get3200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_set3216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_methodDef3237 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000001L});
    public static final BitSet FOLLOW_param_in_methodDef3244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_Comma_in_methodDef3256 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_param_in_methodDef3263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_RP_in_methodDef3272 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000082L});
    public static final BitSet FOLLOW_methodBody_in_methodDef3277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_param3310 = new BitSet(new long[]{0x0100000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_Id_in_param3317 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_Id_in_param3331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_Define_in_param3336 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_param3340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_methodBody3389 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000004L});
    public static final BitSet FOLLOW_stmt_in_methodBody3398 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000004L});
    public static final BitSet FOLLOW_RC_in_methodBody3412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eos_in_methodBody3420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_ctorDef3441 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_LP_in_ctorDef3449 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000001L});
    public static final BitSet FOLLOW_param_in_ctorDef3456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_Comma_in_ctorDef3468 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_param_in_ctorDef3475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_RP_in_ctorDef3484 = new BitSet(new long[]{0x0000000000000002L,0x00000000000000C2L});
    public static final BitSet FOLLOW_ctorChain_in_ctorDef3491 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000082L});
    public static final BitSet FOLLOW_methodBody_in_ctorDef3501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Colon_in_ctorChain3520 = new BitSet(new long[]{0x0000000001800000L});
    public static final BitSet FOLLOW_ctorChainThis_in_ctorChain3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctorChainSuper_in_ctorChain3531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_thisRef_in_ctorChainThis3553 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_Dot_in_ctorChainThis3557 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_simpleRef_in_ctorChainThis3563 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_args_in_ctorChainThis3569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_superRef_in_ctorChainSuper3592 = new BitSet(new long[]{0x8000400000000000L});
    public static final BitSet FOLLOW_Dot_in_ctorChainSuper3597 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_simpleRef_in_ctorChainSuper3601 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_args_in_ctorChainSuper3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_args3634 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000001L});
    public static final BitSet FOLLOW_expr_in_args3643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_Comma_in_args3653 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_args3664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_RP_in_args3685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_block3713 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000004L});
    public static final BitSet FOLLOW_stmts_in_block3720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RC_in_block3726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_blockOrSingleStmt3758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_blockOrSingleStmt3768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stmt_in_stmts3799 = new BitSet(new long[]{0xBF80064F7F800002L,0x00098FC000000000L});
    public static final BitSet FOLLOW_breakStmt_in_stmt3844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continueStmt_in_stmt3867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forStmt_in_stmt3887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifStmt_in_stmt3912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returnStmt_in_stmt3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchStmt_in_stmt3960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throwStmt_in_stmt3982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileStmt_in_stmt4005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryStmt_in_stmt4028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_locOrExprStmt_in_stmt4044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inferredTypedLocalDefStmt_in_locOrExprStmt4084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localDefStmt_in_locOrExprStmt4101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprStmt_in_locOrExprStmt4110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localDef_in_localDefStmt4128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_localDefStmt4133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inferredTypedLocalDef_in_inferredTypedLocalDefStmt4148 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_inferredTypedLocalDefStmt4153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localDef_in_locOrExpr4182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inferredTypedLocalDef_in_locOrExpr4191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_locOrExpr4200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_localDef4224 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_localDef4231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_Define_in_localDef4237 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_localDef4241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_inferredTypedLocalDef4268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_Define_in_inferredTypedLocalDef4273 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_inferredTypedLocalDef4279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Break_in_breakStmt4300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_breakStmt4306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Continue_in_continueStmt4331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_continueStmt4337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_For_in_forStmt4362 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_LP_in_forStmt4368 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000080L});
    public static final BitSet FOLLOW_forInit_in_forStmt4374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_Semi_in_forStmt4387 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000080L});
    public static final BitSet FOLLOW_expr_in_forStmt4393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_Semi_in_forStmt4407 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000001L});
    public static final BitSet FOLLOW_expr_in_forStmt4413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RP_in_forStmt4420 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000002L});
    public static final BitSet FOLLOW_blockOrSingleStmt_in_forStmt4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_locOrExpr_in_forInit4448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_If_in_ifStmt4473 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_LP_in_ifStmt4479 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_ifStmt4485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RP_in_ifStmt4491 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000002L});
    public static final BitSet FOLLOW_blockOrSingleStmt_in_ifStmt4497 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_Else_in_ifStmt4513 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000002L});
    public static final BitSet FOLLOW_blockOrSingleStmt_in_ifStmt4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Return_in_returnStmt4551 = new BitSet(new long[]{0xBF80060007800002L,0x00098FC000000080L});
    public static final BitSet FOLLOW_expr_in_returnStmt4568 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_returnStmt4579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Throw_in_throwStmt4604 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_throwStmt4610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_eos_in_throwStmt4616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_While_in_whileStmt4641 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_LP_in_whileStmt4648 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_whileStmt4655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RP_in_whileStmt4662 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000002L});
    public static final BitSet FOLLOW_blockOrSingleStmt_in_whileStmt4669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprStmt4699 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000088L});
    public static final BitSet FOLLOW_Comma_in_exprStmt4707 = new BitSet(new long[]{0xBF80060007800002L,0x00098FC000000088L});
    public static final BitSet FOLLOW_expr_in_exprStmt4715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000088L});
    public static final BitSet FOLLOW_eos_in_exprStmt4724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Try_in_tryStmt4749 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000002L});
    public static final BitSet FOLLOW_blockOrSingleStmt_in_tryStmt4755 = new BitSet(new long[]{0x0000003000000002L});
    public static final BitSet FOLLOW_catchStmt_in_tryStmt4771 = new BitSet(new long[]{0x0000003000000002L});
    public static final BitSet FOLLOW_finallyStmt_in_tryStmt4794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Catch_in_catchStmt4823 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000002L});
    public static final BitSet FOLLOW_LP_in_catchStmt4839 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_catchStmt4847 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_catchStmt4855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RP_in_catchStmt4863 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000002L});
    public static final BitSet FOLLOW_blockOrSingleStmt_in_catchStmt4874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Finally_in_finallyStmt4898 = new BitSet(new long[]{0xBF80064F7F800000L,0x00098FC000000002L});
    public static final BitSet FOLLOW_blockOrSingleStmt_in_finallyStmt4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Switch_in_switchStmt4933 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_LP_in_switchStmt4939 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_switchStmt4945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RP_in_switchStmt4951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_switchStmt4957 = new BitSet(new long[]{0x0000018000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_caseStmt_in_switchStmt4964 = new BitSet(new long[]{0x0000018000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_defaultStmt_in_switchStmt4975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RC_in_switchStmt4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Case_in_caseStmt5008 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_caseStmt5014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Colon_in_caseStmt5020 = new BitSet(new long[]{0xBF80064F7F800002L,0x00098FC000000000L});
    public static final BitSet FOLLOW_stmts_in_caseStmt5026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Default_in_defaultStmt5050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Colon_in_defaultStmt5056 = new BitSet(new long[]{0xBF80064F7F800002L,0x00098FC000000000L});
    public static final BitSet FOLLOW_stmts_in_defaultStmt5062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_ctype5103 = new BitSet(new long[]{0x2000000000000002L,0x0000000000800040L});
    public static final BitSet FOLLOW_LB_in_ctype5121 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_ctype5125 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RB_in_ctype5127 = new BitSet(new long[]{0x2000000000000002L,0x0000000000800040L});
    public static final BitSet FOLLOW_funcType_in_ctype5145 = new BitSet(new long[]{0x2000000000000002L,0x0000000000800040L});
    public static final BitSet FOLLOW_Qu_in_ctype5159 = new BitSet(new long[]{0x2000000000000002L,0x0000000000800040L});
    public static final BitSet FOLLOW_LB_in_ctype5180 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RB_in_ctype5184 = new BitSet(new long[]{0x2000000000000002L,0x0000000000800040L});
    public static final BitSet FOLLOW_Colon_in_ctype5211 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_ctype5220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_Qu_in_ctype5240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_simpleType5276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DoubleColon_in_simpleType5285 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_simpleType5296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Pipe_in_funcType5325 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000208L});
    public static final BitSet FOLLOW_Comma_in_funcType5335 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_Arrow_in_funcType5343 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_funcType5347 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_funcTypeParam_in_funcType5357 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000208L});
    public static final BitSet FOLLOW_Comma_in_funcType5368 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_funcTypeParam_in_funcType5372 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000208L});
    public static final BitSet FOLLOW_Arrow_in_funcType5386 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_funcType5390 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_Pipe_in_funcType5404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_funcTypeParam5446 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_Id_in_funcTypeParam5457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_funcTypeParam5473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignExpr_in_expr5504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ternaryExpr_in_assignExpr5523 = new BitSet(new long[]{0x0000000000000002L,0x00000000001FFC00L});
    public static final BitSet FOLLOW_assignOp_in_assignExpr5616 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_assignExpr_in_assignExpr5620 = new BitSet(new long[]{0x0000000000000002L,0x00000000001FFC00L});
    public static final BitSet FOLLOW_Assign_in_assignOp5670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MulAss_in_assignOp5678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DivAss_in_assignOp5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ModAss_in_assignOp5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AddAss_in_assignOp5705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SubAss_in_assignOp5714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LShiftAss_in_assignOp5723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RShiftAss_in_assignOp5732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAndAss_in_assignOp5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BNotAss_in_assignOp5751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PipeAss_in_assignOp5760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condOrExpr_in_ternaryExpr5786 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_Qu_in_ternaryExpr5797 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_condOrExpr_in_ternaryExpr5807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Colon_in_ternaryExpr5814 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_condOrExpr_in_ternaryExpr5822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condAndExpr_in_condOrExpr5851 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_Or_in_condOrExpr5859 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_condAndExpr_in_condOrExpr5863 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_equalityExpr_in_condAndExpr5897 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_And_in_condAndExpr5905 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_equalityExpr_in_condAndExpr5909 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_relationalExpr_in_equalityExpr5944 = new BitSet(new long[]{0x0000000000000002L,0x000000003C000000L});
    public static final BitSet FOLLOW_Eq_in_equalityExpr5970 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_NEq_in_equalityExpr5979 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_SEq_in_equalityExpr5988 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_NSEq_in_equalityExpr5997 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_relationalExpr_in_equalityExpr6010 = new BitSet(new long[]{0x0000000000000002L,0x000000003C000000L});
    public static final BitSet FOLLOW_elvisExpr_in_relationalExpr6044 = new BitSet(new long[]{0x0000000000004002L,0x0000001F00000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_130_in_relationalExpr6056 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_131_in_relationalExpr6068 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_As_in_relationalExpr6080 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_relationalExpr6096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEG_in_relationalExpr6123 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_LE_in_relationalExpr6134 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_LT_in_relationalExpr6145 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_GE_in_relationalExpr6156 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_GT_in_relationalExpr6167 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_elvisExpr_in_relationalExpr6180 = new BitSet(new long[]{0x0000000000000002L,0x0000001F00000000L});
    public static final BitSet FOLLOW_rangeExpr_in_elvisExpr6219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_Elvis_in_elvisExpr6226 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_rangeExpr_in_elvisExpr6230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitOrExpr_in_rangeExpr6266 = new BitSet(new long[]{0x0000380000000002L});
    public static final BitSet FOLLOW_RangeExclOld_in_rangeExpr6276 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_RangeExcl_in_rangeExpr6286 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_Range_in_rangeExpr6295 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_bitOrExpr_in_rangeExpr6309 = new BitSet(new long[]{0x0000380000000002L});
    public static final BitSet FOLLOW_bitAndExpr_in_bitOrExpr6346 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_BNot_in_bitOrExpr6369 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_Pipe_in_bitOrExpr6379 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_bitAndExpr_in_bitOrExpr6391 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_shiftExpr_in_bitAndExpr6420 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_BAnd_in_bitAndExpr6432 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_shiftExpr_in_bitAndExpr6441 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_addExpr_in_shiftExpr6473 = new BitSet(new long[]{0x0000000000000002L,0x00000000C0000000L});
    public static final BitSet FOLLOW_LShift_in_shiftExpr6484 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_RShift_in_shiftExpr6492 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_addExpr_in_shiftExpr6506 = new BitSet(new long[]{0x0000000000000002L,0x00000000C0000000L});
    public static final BitSet FOLLOW_multExpr_in_addExpr6541 = new BitSet(new long[]{0x0000000000000002L,0x00000C0000000000L});
    public static final BitSet FOLLOW_Add_in_addExpr6566 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_Sub_in_addExpr6576 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_multExpr_in_addExpr6585 = new BitSet(new long[]{0x0000000000000002L,0x00000C0000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_multExpr6619 = new BitSet(new long[]{0x0000000000000002L,0x0000700000000000L});
    public static final BitSet FOLLOW_Mul_in_multExpr6635 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_Div_in_multExpr6645 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_Mod_in_multExpr6655 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_multExpr6669 = new BitSet(new long[]{0x0000000000000002L,0x0000700000000000L});
    public static final BitSet FOLLOW_Add_in_unaryExpr6700 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_unaryExpr6706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Sub_in_unaryExpr6720 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_unaryExpr6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Incr_in_unaryExpr6740 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_unaryExpr6746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Decr_in_unaryExpr6760 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_unaryExpr6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExprNotPlusMinus_in_unaryExpr6782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Inv_in_unaryExprNotPlusMinus6817 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_unaryExprNotPlusMinus6821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Not_in_unaryExprNotPlusMinus6834 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_unaryExprNotPlusMinus6838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAnd_in_unaryExprNotPlusMinus6852 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_unaryExprNotPlusMinus6856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpr_in_unaryExprNotPlusMinus6870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_termExpr_in_unaryExprNotPlusMinus6884 = new BitSet(new long[]{0x0000000000000002L,0x0000030000000000L});
    public static final BitSet FOLLOW_Incr_in_unaryExprNotPlusMinus6895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Decr_in_unaryExprNotPlusMinus6913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_castExpr6944 = new BitSet(new long[]{0x2100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ctype_in_castExpr6948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RP_in_castExpr6952 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_unaryExpr_in_castExpr6957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_termBaseExpr_in_termExpr6981 = new BitSet(new long[]{0xA000400000000002L,0x0000000000200300L});
    public static final BitSet FOLLOW_termChainExpr_in_termExpr7011 = new BitSet(new long[]{0xA000400000000002L,0x0000000000200300L});
    public static final BitSet FOLLOW_numberLiteral_in_termBaseExpr7038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteral_in_termBaseExpr7048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_uriLiteral_in_termBaseExpr7058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nullLiteral_in_termBaseExpr7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_superRef_in_termBaseExpr7078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_thisRef_in_termBaseExpr7088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itRef_in_termBaseExpr7098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolLiteral_in_termBaseExpr7108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dslLiteral_in_termBaseExpr7118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slotWithoutTypeLit_in_termBaseExpr7132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slotOrTypeLiteral_in_termBaseExpr7148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_callExprWithoutArgs_in_termBaseExpr7164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_idExpr_in_termBaseExpr7178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_closure_in_termBaseExpr7189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_termBaseExpr7204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listOrMap_in_termBaseExpr7219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parenExpr_in_termBaseExpr7234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_idNotType7248 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFAFL,0x000000000000000FL});
    public static final BitSet FOLLOW_LB_in_idNotType7273 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFB7L,0x000000000000000FL});
    public static final BitSet FOLLOW_set_in_idNotType7275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_idNotType7289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_callExprWithoutArgs7319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_itBlock_in_callExprWithoutArgs7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Pound_in_slotWithoutTypeLit7343 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_slotWithoutTypeLit7349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_slotOrTypeLiteral7369 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_Pound_in_slotOrTypeLiteral7377 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_Id_in_slotOrTypeLiteral7386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_parenExpr7411 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_parenExpr7417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RP_in_parenExpr7423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_It_in_itRef7448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_This_in_thisRef7473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Super_in_superRef7498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_String_in_stringLiteral7523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Null_in_nullLiteral7548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Uri_in_uriLiteral7573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Number_in_numberLiteral7598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Dsl_in_dslLiteral7623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_True_in_boolLiteral7653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_False_in_boolLiteral7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Dot_in_termChainExpr7696 = new BitSet(new long[]{0x0180000001000000L});
    public static final BitSet FOLLOW_superCallExpr_in_termChainExpr7701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_idExprIndex_in_termChainExpr7706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Arrow_in_termChainExpr7718 = new BitSet(new long[]{0x0180000000000000L});
    public static final BitSet FOLLOW_idExprIndex_in_termChainExpr7722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QuDot_in_termChainExpr7733 = new BitSet(new long[]{0x0180000000000000L});
    public static final BitSet FOLLOW_idExprIndex_in_termChainExpr7737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QuArrow_in_termChainExpr7748 = new BitSet(new long[]{0x0180000000000000L});
    public static final BitSet FOLLOW_idExprIndex_in_termChainExpr7752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listOrMap_in_termChainExpr7767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_callArgs_in_termChainExpr7780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_superRef_in_superCallExpr7803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldStorage_in_idExpr7829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_idAccess_in_idExpr7840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_simpleRef7865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleRef_in_idAccess7891 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_closure_in_idAccess7907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldStorage_in_idExprIndex7941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_idAccess_in_idExprIndex7950 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_LB_in_idExprIndex7973 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_idExprIndex7981 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_RB_in_idExprIndex7989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AtId_in_fieldStorage8025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_itBlock8047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_callArgs8074 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000001L});
    public static final BitSet FOLLOW_expr_in_callArgs8083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_Comma_in_callArgs8093 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_callArgs8104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000009L});
    public static final BitSet FOLLOW_RP_in_callArgs8125 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000002L});
    public static final BitSet FOLLOW_closure_in_callArgs8139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_itBlock_in_callArgs8153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcType_in_closure8180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_closure8186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LB_in_listOrMap8210 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000048L});
    public static final BitSet FOLLOW_Comma_in_listOrMap8222 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_Colon_in_listOrMap8230 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_expr_in_listOrMap8244 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000048L});
    public static final BitSet FOLLOW_Colon_in_listOrMap8270 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_listOrMap8276 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_Comma_in_listOrMap8287 = new BitSet(new long[]{0xFF80060007800000L,0x00098FC000000008L});
    public static final BitSet FOLLOW_expr_in_listOrMap8294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_Colon_in_listOrMap8296 = new BitSet(new long[]{0xBF80060007800000L,0x00098FC000000000L});
    public static final BitSet FOLLOW_expr_in_listOrMap8302 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_Comma_in_listOrMap8346 = new BitSet(new long[]{0xFF80060007800000L,0x00098FC000000008L});
    public static final BitSet FOLLOW_expr_in_listOrMap8351 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RB_in_listOrMap8379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_eos8400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Semi_in_eos8410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AtId_in_synpred11936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_synpred32777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Static_in_synpred42822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_synpred42824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_synpred52862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_synpred62886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Define_in_synpred72903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_synpred82919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred92951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_synpred103001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_get_in_synpred123060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Comma_in_synpred133252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_synpred143305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred153326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_synpred163373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Comma_in_synpred173464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_synpred183751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Break_in_synpred193834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Continue_in_synpred203857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_For_in_synpred213877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_If_in_synpred223902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Return_in_synpred233928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Switch_in_synpred243950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Throw_in_synpred253972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_While_in_synpred263995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Try_in_synpred274018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred284077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_Define_in_synpred284079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_synpred294092 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_Id_in_synpred294094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_Define_in_synpred294096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localDef_in_synpred304182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inferredTypedLocalDef_in_synpred314191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Semi_in_synpred334399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Else_in_synpred344503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eos_in_synpred354557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eos_in_synpred364711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Catch_in_synpred374761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Finally_in_synpred384784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_synpred394829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Id_in_synpred405094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LB_in_synpred415114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Pipe_in_synpred425138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LB_in_synpred435175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred445430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred455528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Qu_in_synpred465794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred475949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred486353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAnd_in_synpred496429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred506550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpr_in_synpred546870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Incr_in_synpred556890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Decr_in_synpred566908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred576988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Pound_in_synpred587127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_synpred597141 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_Pound_in_synpred597143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_synpred607157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_synpred607159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_idNotType_in_synpred617173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctype_in_synpred627198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LB_in_synpred637213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LP_in_synpred647228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LB_in_synpred657270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LB_in_synpred667762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_closure_in_synpred677902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LB_in_synpred687962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcType_in_synpred698134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LC_in_synpred708148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Colon_in_synpred718256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Comma_in_synpred728329 = new BitSet(new long[]{0x0000000000000002L});

}